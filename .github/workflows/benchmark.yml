name: benchmark
on:
  pull_request:
  workflow_dispatch:
    inputs:
      old:
        description: 'Old Ref'
        required: false
        default: 'main'
      new:
        description: 'New Ref'
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GO111MODULE: "on"
  CACHE_BENCHMARK: "off"
  RUN_BASE_BENCHMARK: "on"
  GO_VERSION: 1.22.x
jobs:
  benchmark:
    strategy:
      matrix:
        go-version: [ 1.22.x ]
    runs-on: ubuntu-latest
    steps:
      - name: Install Go stable
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ (github.event.inputs.new != '') && github.event.inputs.new || github.event.ref }}

      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache

      - name: Restore benchstat
        uses: actions/cache@v3
        with:
          path: ~/go/bin/benchstat
          key: ${{ runner.os }}-benchstat-legacy

      - name: Restore base benchmark result
        id: base-benchmark
        if: env.CACHE_BENCHMARK == 'on'
        uses: actions/cache@v3
        with:
          path: |
            bench-master.txt
            bench-main.txt
          key: ${{ runner.os }}-bench-${{ (github.event.pull_request.base.sha != github.event.after) && github.event.pull_request.base.sha || github.event.after }}

      - name: Run benchmark
        run: |
          export REF_NAME=new
          cd benchmarks && make benchmark-ci
          OUTPUT=$(make bench-stat-diff)
          echo "${OUTPUT}"
          echo "diff<<EOF" >> $GITHUB_OUTPUT && echo "$OUTPUT" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT
          OUTPUT=$(make bench-stat)
          echo "${OUTPUT}"
          echo "result<<EOF" >> $GITHUB_OUTPUT && echo "$OUTPUT" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT

      - name: Run benchmark for base code
        if: env.RUN_BASE_BENCHMARK == 'on' && steps.base-benchmark.outputs.cache-hit != 'true' && (github.event.pull_request.base.sha != '' || github.event.inputs.old != '')
        run: |
          git fetch origin main ${{ github.event.pull_request.base.sha }}
          HEAD=$(git rev-parse HEAD)
          git reset --hard ${{ github.event.pull_request.base.sha }}
          export REF_NAME=main
          cd benchmarks && make bench-run bench-stat
          git reset --hard $HEAD

      - name: Benchmark stats
        id: benchmark
        run: |
          export REF_NAME=new
          cd benchmarks
          OUTPUT=$(make bench-stat-diff)
          echo "${OUTPUT}"
          echo "diff<<EOF" >> $GITHUB_OUTPUT && echo "$OUTPUT" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT
          OUTPUT=$(make bench-stat)
          echo "${OUTPUT}"
          echo "result<<EOF" >> $GITHUB_OUTPUT && echo "$OUTPUT" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment benchmark result
        continue-on-error: true
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: benchmark
          message: |
            ### Benchmark Result
            <details><summary>Benchmark diff with base branch</summary>

            ```
            ${{ steps.benchmark.outputs.diff }}
            ```
            </details>

            <details><summary>Benchmark result</summary>

            ```
            ${{ steps.benchmark.outputs.result }}
            ```
            </details>