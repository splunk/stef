// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.5
// source: destination.proto

package stef_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	STEFDestination_Stream_FullMethodName = "/STEFDestination/Stream"
)

// STEFDestinationClient is the client API for STEFDestination service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type STEFDestinationClient interface {
	// Stream is a channel to send STEF data from the client to Destination.
	// Once the stream is open the Destination MUST send a ServerMessage with
	// DestCapabilities field set.
	// The client MUST examine received DestCapabilities and if the client is
	// able to operate as requested by DestCapabilities the client MUST begin sending
	// ClientMessage containing STEF data. The Destination MUST periodically
	// respond with ServerMessage containing ExportResponse field.
	// One gRPC stream corresponds to one STEF byte stream.
	Stream(ctx context.Context, opts ...grpc.CallOption) (STEFDestination_StreamClient, error)
}

type sTEFDestinationClient struct {
	cc grpc.ClientConnInterface
}

func NewSTEFDestinationClient(cc grpc.ClientConnInterface) STEFDestinationClient {
	return &sTEFDestinationClient{cc}
}

func (c *sTEFDestinationClient) Stream(ctx context.Context, opts ...grpc.CallOption) (STEFDestination_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &STEFDestination_ServiceDesc.Streams[0], STEFDestination_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sTEFDestinationStreamClient{stream}
	return x, nil
}

type STEFDestination_StreamClient interface {
	Send(*STEFClientMessage) error
	Recv() (*STEFServerMessage, error)
	grpc.ClientStream
}

type sTEFDestinationStreamClient struct {
	grpc.ClientStream
}

func (x *sTEFDestinationStreamClient) Send(m *STEFClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sTEFDestinationStreamClient) Recv() (*STEFServerMessage, error) {
	m := new(STEFServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// STEFDestinationServer is the server API for STEFDestination service.
// All implementations must embed UnimplementedSTEFDestinationServer
// for forward compatibility
type STEFDestinationServer interface {
	// Stream is a channel to send STEF data from the client to Destination.
	// Once the stream is open the Destination MUST send a ServerMessage with
	// DestCapabilities field set.
	// The client MUST examine received DestCapabilities and if the client is
	// able to operate as requested by DestCapabilities the client MUST begin sending
	// ClientMessage containing STEF data. The Destination MUST periodically
	// respond with ServerMessage containing ExportResponse field.
	// One gRPC stream corresponds to one STEF byte stream.
	Stream(STEFDestination_StreamServer) error
	mustEmbedUnimplementedSTEFDestinationServer()
}

// UnimplementedSTEFDestinationServer must be embedded to have forward compatible implementations.
type UnimplementedSTEFDestinationServer struct {
}

func (UnimplementedSTEFDestinationServer) Stream(STEFDestination_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedSTEFDestinationServer) mustEmbedUnimplementedSTEFDestinationServer() {}

// UnsafeSTEFDestinationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to STEFDestinationServer will
// result in compilation errors.
type UnsafeSTEFDestinationServer interface {
	mustEmbedUnimplementedSTEFDestinationServer()
}

func RegisterSTEFDestinationServer(s grpc.ServiceRegistrar, srv STEFDestinationServer) {
	s.RegisterService(&STEFDestination_ServiceDesc, srv)
}

func _STEFDestination_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(STEFDestinationServer).Stream(&sTEFDestinationStreamServer{stream})
}

type STEFDestination_StreamServer interface {
	Send(*STEFServerMessage) error
	Recv() (*STEFClientMessage, error)
	grpc.ServerStream
}

type sTEFDestinationStreamServer struct {
	grpc.ServerStream
}

func (x *sTEFDestinationStreamServer) Send(m *STEFServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sTEFDestinationStreamServer) Recv() (*STEFClientMessage, error) {
	m := new(STEFClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// STEFDestination_ServiceDesc is the grpc.ServiceDesc for STEFDestination service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var STEFDestination_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "STEFDestination",
	HandlerType: (*STEFDestinationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _STEFDestination_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "destination.proto",
}
