// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.25.2
// source: destination.proto

package stef_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type STEFClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The client MUST set first_message field in the first STEFClientMessage sent.
	// All other fields MUST be unset when first_message is set.
	// All subsequent messages MUST have first_message unset.
	FirstMessage *STEFClientFirstMessage `protobuf:"bytes,1,opt,name=first_message,json=firstMessage,proto3" json:"first_message,omitempty"`
	// The bytes of STEF stream. The recipient is responsible for assembling the
	// STEF data stream from a sequence of messages in the order the
	// messages are received and decoding the STEF data stream.
	//
	// See specification.md for specification of STEF stream.
	StefBytes []byte `protobuf:"bytes,2,opt,name=stef_bytes,json=stefBytes,proto3" json:"stef_bytes,omitempty"`
	// Indicates that the last byte of tef_bytes is also an end of a chunk (a STEF header or
	// STEF frame). This can be used by recipients to accumulates bytes until the end of
	// the chunk is encountered and only then start decoding the chunk.
	// Clients MUST ensure they mark this field true at least once in a while otherwise
	// recipients may never start decoding the data.
	IsEndOfChunk bool `protobuf:"varint,3,opt,name=is_end_of_chunk,json=isEndOfChunk,proto3" json:"is_end_of_chunk,omitempty"`
}

func (x *STEFClientMessage) Reset() {
	*x = STEFClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STEFClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STEFClientMessage) ProtoMessage() {}

func (x *STEFClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_destination_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STEFClientMessage.ProtoReflect.Descriptor instead.
func (*STEFClientMessage) Descriptor() ([]byte, []int) {
	return file_destination_proto_rawDescGZIP(), []int{0}
}

func (x *STEFClientMessage) GetFirstMessage() *STEFClientFirstMessage {
	if x != nil {
		return x.FirstMessage
	}
	return nil
}

func (x *STEFClientMessage) GetStefBytes() []byte {
	if x != nil {
		return x.StefBytes
	}
	return nil
}

func (x *STEFClientMessage) GetIsEndOfChunk() bool {
	if x != nil {
		return x.IsEndOfChunk
	}
	return false
}

// ClientFirstMessage is the first message sent by the client to the destination.
// The client MUST send this message first. The destination MUST respond with
// STEFDestinationCapabilities message. The client MUST NOT send any other
// messages until it receives STEFDestinationCapabilities message from the
// destination. The client MUST NOT send STEF data until it receives
// STEFDestinationCapabilities message from the destination.
type STEFClientFirstMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the root struct of the client's schema. This is useful
	// for destinations that accept multiple schemas and need to know which schema
	// the client is using. The destination will use this information to
	// determine the schema to use for decoding the data.
	RootStructName string `protobuf:"bytes,1,opt,name=root_struct_name,json=rootStructName,proto3" json:"root_struct_name,omitempty"`
}

func (x *STEFClientFirstMessage) Reset() {
	*x = STEFClientFirstMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STEFClientFirstMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STEFClientFirstMessage) ProtoMessage() {}

func (x *STEFClientFirstMessage) ProtoReflect() protoreflect.Message {
	mi := &file_destination_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STEFClientFirstMessage.ProtoReflect.Descriptor instead.
func (*STEFClientFirstMessage) Descriptor() ([]byte, []int) {
	return file_destination_proto_rawDescGZIP(), []int{1}
}

func (x *STEFClientFirstMessage) GetRootStructName() string {
	if x != nil {
		return x.RootStructName
	}
	return ""
}

type STEFDestinationCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dictionary_limits of the destination. The client MUST honor the limits.
	DictionaryLimits *STEFDictionaryLimits `protobuf:"bytes,1,opt,name=dictionary_limits,json=dictionaryLimits,proto3" json:"dictionary_limits,omitempty"`
	// schema is the STEF schema supported by the destination. The schema description
	// is in binary format defined by STEF spec.
	// Upon receiving this schema description from the destination the client has 4
	// possibilities:
	//  1. The schema matches client's schema exactly. The client can send its STEF data as is.
	//  2. The schema is a superset of client's schema. The client can send its STEF
	//     data as is and MUST specify client's schema in the STEF header. The destination
	//     will be able to read STEF data because STEF Readers support reading data encoded
	//     in schema that is subset of their supported schema.
	//  3. The schema is a subset of client's schema. The client MUST downgrade its encoders
	//     to output STEF data in the specified schema.
	//  4. The schema is incompatible with client's schema (neither an exact match, nor a
	//     subset or superset). The client and the destination are incompatible and cannot
	//     communicate. The client MUST close the stream, further communication is not possible.
	Schema []byte `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *STEFDestinationCapabilities) Reset() {
	*x = STEFDestinationCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STEFDestinationCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STEFDestinationCapabilities) ProtoMessage() {}

func (x *STEFDestinationCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_destination_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STEFDestinationCapabilities.ProtoReflect.Descriptor instead.
func (*STEFDestinationCapabilities) Descriptor() ([]byte, []int) {
	return file_destination_proto_rawDescGZIP(), []int{2}
}

func (x *STEFDestinationCapabilities) GetDictionaryLimits() *STEFDictionaryLimits {
	if x != nil {
		return x.DictionaryLimits
	}
	return nil
}

func (x *STEFDestinationCapabilities) GetSchema() []byte {
	if x != nil {
		return x.Schema
	}
	return nil
}

// DictionaryLimits defines the limits of the recipient. Once any of the limits
// are reached the sender will reset the dictionaries. This prevents the
// dictionaries growing indefinitely large.
type STEFDictionaryLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum total in-memory byte size of all dictionaries.
	// 0 means no limit.
	// The sender's total byte size calculation may be approximate. Senders
	// SHOULD make the best effort to make this calculation as accurate as possible.
	// Note that the memory size is inherently dependent on dictionary in-memory
	// memory structure, word size, etc, so it may end up differing between what
	// the sender computes and what receiver's re-created dictionary ends up using.
	// Receivers that are memory constrained should specify conservatively low values
	// for the limit.
	MaxDictBytes uint64 `protobuf:"varint,2,opt,name=max_dict_bytes,json=maxDictBytes,proto3" json:"max_dict_bytes,omitempty"`
}

func (x *STEFDictionaryLimits) Reset() {
	*x = STEFDictionaryLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STEFDictionaryLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STEFDictionaryLimits) ProtoMessage() {}

func (x *STEFDictionaryLimits) ProtoReflect() protoreflect.Message {
	mi := &file_destination_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STEFDictionaryLimits.ProtoReflect.Descriptor instead.
func (*STEFDictionaryLimits) Descriptor() ([]byte, []int) {
	return file_destination_proto_rawDescGZIP(), []int{3}
}

func (x *STEFDictionaryLimits) GetMaxDictBytes() uint64 {
	if x != nil {
		return x.MaxDictBytes
	}
	return 0
}

type STEFServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: refactor this to avoid using oneof message to reduce
	// allocations for the most common case of STEFDataResponse.
	//
	// Types that are assignable to Message:
	//
	//	*STEFServerMessage_Capabilities
	//	*STEFServerMessage_Response
	Message isSTEFServerMessage_Message `protobuf_oneof:"message"`
}

func (x *STEFServerMessage) Reset() {
	*x = STEFServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STEFServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STEFServerMessage) ProtoMessage() {}

func (x *STEFServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_destination_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STEFServerMessage.ProtoReflect.Descriptor instead.
func (*STEFServerMessage) Descriptor() ([]byte, []int) {
	return file_destination_proto_rawDescGZIP(), []int{4}
}

func (m *STEFServerMessage) GetMessage() isSTEFServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *STEFServerMessage) GetCapabilities() *STEFDestinationCapabilities {
	if x, ok := x.GetMessage().(*STEFServerMessage_Capabilities); ok {
		return x.Capabilities
	}
	return nil
}

func (x *STEFServerMessage) GetResponse() *STEFDataResponse {
	if x, ok := x.GetMessage().(*STEFServerMessage_Response); ok {
		return x.Response
	}
	return nil
}

type isSTEFServerMessage_Message interface {
	isSTEFServerMessage_Message()
}

type STEFServerMessage_Capabilities struct {
	Capabilities *STEFDestinationCapabilities `protobuf:"bytes,1,opt,name=capabilities,proto3,oneof"`
}

type STEFServerMessage_Response struct {
	Response *STEFDataResponse `protobuf:"bytes,2,opt,name=response,proto3,oneof"`
}

func (*STEFServerMessage_Capabilities) isSTEFServerMessage_Message() {}

func (*STEFServerMessage_Response) isSTEFServerMessage_Message() {}

type STEFDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ack_record_id acknowledges receipt of STEF data
	// with record_id <= ack_record_id.
	//
	// The client must be ready to re-connect and re-send unacknowledged
	// metric data in case of disconnection or other failures. When reconnecting
	// after failure, the STEF stream is restarted and the original unacknowledged
	// metric data is re-encoded again (since encoding depends on the state of the
	// connection).
	AckRecordId uint64 `protobuf:"varint,1,opt,name=ack_record_id,json=ackRecordId,proto3" json:"ack_record_id,omitempty"`
	// Record id of STEF data items that the destination was not able to
	// read or validate. If the client retries sending it MUST NOT send the data
	// with specified record ids again. All ids in all specified ranges are bad.
	// It is expected that all from and to ids in the ranges are smaller or equal
	// to ack_record_id.
	// This field is optional. When empty it means there is no bad data,
	// all data up to ack_record_id was successfully processed.
	BadDataRecordIdRanges []*STEFIDRange `protobuf:"bytes,2,rep,name=bad_data_record_id_ranges,json=badDataRecordIdRanges,proto3" json:"bad_data_record_id_ranges,omitempty"`
}

func (x *STEFDataResponse) Reset() {
	*x = STEFDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STEFDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STEFDataResponse) ProtoMessage() {}

func (x *STEFDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_destination_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STEFDataResponse.ProtoReflect.Descriptor instead.
func (*STEFDataResponse) Descriptor() ([]byte, []int) {
	return file_destination_proto_rawDescGZIP(), []int{5}
}

func (x *STEFDataResponse) GetAckRecordId() uint64 {
	if x != nil {
		return x.AckRecordId
	}
	return 0
}

func (x *STEFDataResponse) GetBadDataRecordIdRanges() []*STEFIDRange {
	if x != nil {
		return x.BadDataRecordIdRanges
	}
	return nil
}

type STEFIDRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// From ID, inclusive.
	FromId uint64 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	// To ID, inclusive.
	ToId uint64 `protobuf:"varint,2,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
}

func (x *STEFIDRange) Reset() {
	*x = STEFIDRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STEFIDRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STEFIDRange) ProtoMessage() {}

func (x *STEFIDRange) ProtoReflect() protoreflect.Message {
	mi := &file_destination_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STEFIDRange.ProtoReflect.Descriptor instead.
func (*STEFIDRange) Descriptor() ([]byte, []int) {
	return file_destination_proto_rawDescGZIP(), []int{6}
}

func (x *STEFIDRange) GetFromId() uint64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *STEFIDRange) GetToId() uint64 {
	if x != nil {
		return x.ToId
	}
	return 0
}

var File_destination_proto protoreflect.FileDescriptor

var file_destination_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x53, 0x54, 0x45, 0x46, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x53, 0x54, 0x45, 0x46, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x66, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x65,
	0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x42, 0x0a,
	0x16, 0x53, 0x54, 0x45, 0x46, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x79, 0x0a, 0x1b, 0x53, 0x54, 0x45, 0x46, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x42, 0x0a, 0x11, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x54,
	0x45, 0x46, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x52, 0x10, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x3c, 0x0a, 0x14,
	0x53, 0x54, 0x45, 0x46, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x63, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x44, 0x69, 0x63, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x53,
	0x54, 0x45, 0x46, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x54, 0x45, 0x46, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x54, 0x45, 0x46, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x7e, 0x0a, 0x10, 0x53, 0x54, 0x45, 0x46, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x19, 0x62, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x54,
	0x45, 0x46, 0x49, 0x44, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x15, 0x62, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x22, 0x3b, 0x0a, 0x0b, 0x53, 0x54, 0x45, 0x46, 0x49, 0x44, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x32, 0x49, 0x0a,
	0x0f, 0x53, 0x54, 0x45, 0x46, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x2e, 0x53, 0x54, 0x45,
	0x46, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12,
	0x2e, 0x53, 0x54, 0x45, 0x46, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x73, 0x74, 0x65,
	0x66, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_destination_proto_rawDescOnce sync.Once
	file_destination_proto_rawDescData = file_destination_proto_rawDesc
)

func file_destination_proto_rawDescGZIP() []byte {
	file_destination_proto_rawDescOnce.Do(func() {
		file_destination_proto_rawDescData = protoimpl.X.CompressGZIP(file_destination_proto_rawDescData)
	})
	return file_destination_proto_rawDescData
}

var file_destination_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_destination_proto_goTypes = []interface{}{
	(*STEFClientMessage)(nil),           // 0: STEFClientMessage
	(*STEFClientFirstMessage)(nil),      // 1: STEFClientFirstMessage
	(*STEFDestinationCapabilities)(nil), // 2: STEFDestinationCapabilities
	(*STEFDictionaryLimits)(nil),        // 3: STEFDictionaryLimits
	(*STEFServerMessage)(nil),           // 4: STEFServerMessage
	(*STEFDataResponse)(nil),            // 5: STEFDataResponse
	(*STEFIDRange)(nil),                 // 6: STEFIDRange
}
var file_destination_proto_depIdxs = []int32{
	1, // 0: STEFClientMessage.first_message:type_name -> STEFClientFirstMessage
	3, // 1: STEFDestinationCapabilities.dictionary_limits:type_name -> STEFDictionaryLimits
	2, // 2: STEFServerMessage.capabilities:type_name -> STEFDestinationCapabilities
	5, // 3: STEFServerMessage.response:type_name -> STEFDataResponse
	6, // 4: STEFDataResponse.bad_data_record_id_ranges:type_name -> STEFIDRange
	0, // 5: STEFDestination.Stream:input_type -> STEFClientMessage
	4, // 6: STEFDestination.Stream:output_type -> STEFServerMessage
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_destination_proto_init() }
func file_destination_proto_init() {
	if File_destination_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_destination_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STEFClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STEFClientFirstMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STEFDestinationCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STEFDictionaryLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STEFServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STEFDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STEFIDRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_destination_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*STEFServerMessage_Capabilities)(nil),
		(*STEFServerMessage_Response)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_destination_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_destination_proto_goTypes,
		DependencyIndexes: file_destination_proto_depIdxs,
		MessageInfos:      file_destination_proto_msgTypes,
	}.Build()
	File_destination_proto = out.File
	file_destination_proto_rawDesc = nil
	file_destination_proto_goTypes = nil
	file_destination_proto_depIdxs = nil
}
