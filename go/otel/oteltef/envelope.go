// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Envelope struct {
	attributes EnvelopeAttributes

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const EnvelopeStructName = "Envelope"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedEnvelopeAttributes = uint64(1 << iota)
)

// Init must be called once, before the Envelope is used.
func (s *Envelope) Init() {
	s.init(nil, 0)
}

func NewEnvelope() *Envelope {
	var s Envelope
	s.init(nil, 0)
	return &s
}

func (s *Envelope) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.attributes.init(&s.modifiedFields, fieldModifiedEnvelopeAttributes)
}

func (s *Envelope) Attributes() *EnvelopeAttributes {
	return &s.attributes
}

// IsAttributesModified returns true the value of Attributes field was modified since
// Envelope was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Envelope) IsAttributesModified() bool {
	return s.modifiedFields.mask&fieldModifiedEnvelopeAttributes != 0
}

func (s *Envelope) markModifiedRecursively() {

	s.attributes.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedEnvelopeAttributes | 0
}

func (s *Envelope) markUnmodifiedRecursively() {

	if s.IsAttributesModified() {
		s.attributes.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// markDiffModified marks fields in this struct modified if they differ from
// the corresponding fields in v.
func (s *Envelope) markDiffModified(v *Envelope) (modified bool) {
	if s.attributes.markDiffModified(&v.attributes) {
		s.modifiedFields.markModified(fieldModifiedEnvelopeAttributes)
		modified = true
	}

	return modified
}

func (s *Envelope) Clone() Envelope {
	return Envelope{
		attributes: s.attributes.Clone(),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Envelope) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.attributes.byteSize() + 0
}

func copyEnvelope(dst *Envelope, src *Envelope) {
	copyEnvelopeAttributes(&dst.attributes, &src.attributes)
}

// CopyFrom() performs a deep copy from src.
func (s *Envelope) CopyFrom(src *Envelope) {
	copyEnvelope(s, src)
}

func (s *Envelope) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Envelope) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.attributes.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *Envelope) mutateRandom(random *rand.Rand) {
	const fieldCount = 1
	if random.IntN(fieldCount) == 0 {
		s.attributes.mutateRandom(random)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *Envelope) IsEqual(val *Envelope) bool {
	if !e.attributes.IsEqual(&val.attributes) {
		return false
	}

	return true
}

func EnvelopeEqual(left, right *Envelope) bool {
	return left.IsEqual(right)
}

// CmpEnvelope performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpEnvelope(left, right *Envelope) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	if c := CmpEnvelopeAttributes(&left.attributes, &right.attributes); c != 0 {
		return c
	}

	return 0
}

// EnvelopeEncoder implements encoding of Envelope
type EnvelopeEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	attributesEncoder EnvelopeAttributesEncoder

	keepFieldMask uint64
	fieldCount    uint
}

func (e *EnvelopeEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.EnvelopeEncoder != nil {
		panic("cannot initialize EnvelopeEncoder: already initialized")
	}
	state.EnvelopeEncoder = e
	defer func() { state.EnvelopeEncoder = nil }()

	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Envelope")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Envelope")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 1
		e.keepFieldMask = ^uint64(0)
	}

	if e.fieldCount <= 0 {
		return nil // Attributes and subsequent fields are skipped.
	}
	if err := e.attributesEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}

	return nil
}

func (e *EnvelopeEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.attributesEncoder.Reset()
}

// Encode encodes val into buf
func (e *EnvelopeEncoder) Encode(val *Envelope) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedEnvelopeAttributes | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedEnvelopeAttributes != 0 {
		// Encode Attributes
		e.attributesEncoder.Encode(&val.attributes)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *EnvelopeEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Attributes and subsequent fields are skipped.
	}
	e.attributesEncoder.CollectColumns(columnSet.At(0))
}

// EnvelopeDecoder implements decoding of Envelope
type EnvelopeDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Envelope
	lastVal    Envelope
	fieldCount uint

	attributesDecoder EnvelopeAttributesDecoder
}

// Init is called once in the lifetime of the stream.
func (d *EnvelopeDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.EnvelopeDecoder != nil {
		panic("cannot initialize EnvelopeDecoder: already initialized")
	}
	state.EnvelopeDecoder = d
	defer func() { state.EnvelopeDecoder = nil }()

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Envelope")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Envelope")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 1
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // Attributes and subsequent fields are skipped.
	}
	err = d.attributesDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *EnvelopeDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Attributes and subsequent fields are skipped.
	}
	d.attributesDecoder.Continue()
}

func (d *EnvelopeDecoder) Reset() {
	d.attributesDecoder.Reset()
}

func (d *EnvelopeDecoder) Decode(dstPtr *Envelope) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedEnvelopeAttributes != 0 {
		// Field is changed and is present, decode it.
		err = d.attributesDecoder.Decode(&val.attributes)
		if err != nil {
			return err
		}
	}

	return nil
}
