// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

// PointValue is a oneof struct.
type PointValue struct {
	// The current type of the oneof.
	typ PointValueType

	int64        int64
	float64      float64
	histogram    HistogramValue
	expHistogram ExpHistogramValue
	summary      SummaryValue

	// Pointer to parent's modifiedFields
	parentModifiedFields *modifiedFields
	// Bit to set in parent's modifiedFields when this oneof is modified.
	parentModifiedBit uint64
}

// Init must be called once, before the PointValue is used.
func (s *PointValue) Init() {
	s.init(nil, 0)
}

func (s *PointValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.histogram.init(parentModifiedFields, parentModifiedBit)
	s.expHistogram.init(parentModifiedFields, parentModifiedBit)
	s.summary.init(parentModifiedFields, parentModifiedBit)
}

func (s *PointValue) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.histogram.initAlloc(parentModifiedFields, parentModifiedBit, allocators)
	s.expHistogram.initAlloc(parentModifiedFields, parentModifiedBit, allocators)
	s.summary.initAlloc(parentModifiedFields, parentModifiedBit, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *PointValue) reset() {
	s.typ = PointValueTypeNone

	s.histogram.reset()
	s.expHistogram.reset()
	s.summary.reset()
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *PointValue) fixParent(parentModifiedFields *modifiedFields) {
	s.parentModifiedFields = parentModifiedFields

	s.histogram.fixParent(parentModifiedFields)
	s.expHistogram.fixParent(parentModifiedFields)
	s.summary.fixParent(parentModifiedFields)
}

type PointValueType byte

const (
	PointValueTypeNone = PointValueType(iota)
	PointValueTypeInt64
	PointValueTypeFloat64
	PointValueTypeHistogram
	PointValueTypeExpHistogram
	PointValueTypeSummary
	PointValueTypeCount
)

// Type returns the type of the value currently contained in PointValue.
func (s *PointValue) Type() PointValueType {
	return s.typ
}

// SetType sets the type of the value currently contained in PointValue.
func (s *PointValue) SetType(typ PointValueType) {
	if s.typ != typ {
		s.typ = typ
		switch typ {
		}
		s.markParentModified()
	}
}

// Int64 returns the value if the contained type is currently PointValueTypeInt64.
// The caller must check the type via Type() before attempting to call this function.
func (s *PointValue) Int64() int64 {
	return s.int64
}

// SetInt64 sets the value to the specified value and sets the type to PointValueTypeInt64.
func (s *PointValue) SetInt64(v int64) {
	if s.typ != PointValueTypeInt64 || !pkg.Int64Equal(s.int64, v) {
		s.int64 = v
		s.typ = PointValueTypeInt64
		s.markParentModified()
	}
}

// Float64 returns the value if the contained type is currently PointValueTypeFloat64.
// The caller must check the type via Type() before attempting to call this function.
func (s *PointValue) Float64() float64 {
	return s.float64
}

// SetFloat64 sets the value to the specified value and sets the type to PointValueTypeFloat64.
func (s *PointValue) SetFloat64(v float64) {
	if s.typ != PointValueTypeFloat64 || !pkg.Float64Equal(s.float64, v) {
		s.float64 = v
		s.typ = PointValueTypeFloat64
		s.markParentModified()
	}
}

// Histogram returns the value if the contained type is currently PointValueTypeHistogram.
// The caller must check the type via Type() before attempting to call this function.
func (s *PointValue) Histogram() *HistogramValue {
	return &s.histogram
}

// ExpHistogram returns the value if the contained type is currently PointValueTypeExpHistogram.
// The caller must check the type via Type() before attempting to call this function.
func (s *PointValue) ExpHistogram() *ExpHistogramValue {
	return &s.expHistogram
}

// Summary returns the value if the contained type is currently PointValueTypeSummary.
// The caller must check the type via Type() before attempting to call this function.
func (s *PointValue) Summary() *SummaryValue {
	return &s.summary
}

func (s *PointValue) Clone(allocators *Allocators) PointValue {
	return PointValue{
		int64:        s.int64,
		float64:      s.float64,
		histogram:    s.histogram.Clone(allocators),
		expHistogram: s.expHistogram.Clone(allocators),
		summary:      s.summary.Clone(allocators),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *PointValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.histogram.byteSize() + s.expHistogram.byteSize() + s.summary.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copyPointValue(dst *PointValue, src *PointValue) {
	switch src.typ {
	case PointValueTypeInt64:
		dst.SetInt64(src.int64)
	case PointValueTypeFloat64:
		dst.SetFloat64(src.float64)
	case PointValueTypeHistogram:
		dst.SetType(src.typ)
		copyHistogramValue(&dst.histogram, &src.histogram)
	case PointValueTypeExpHistogram:
		dst.SetType(src.typ)
		copyExpHistogramValue(&dst.expHistogram, &src.expHistogram)
	case PointValueTypeSummary:
		dst.SetType(src.typ)
		copySummaryValue(&dst.summary, &src.summary)
	case PointValueTypeNone:
		dst.SetType(src.typ)
	default:
		panic("copyPointValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewPointValue(dst *PointValue, src *PointValue, allocators *Allocators) {
	dst.typ = src.typ
	switch src.typ {
	case PointValueTypeInt64:
		dst.int64 = src.int64
	case PointValueTypeFloat64:
		dst.float64 = src.float64
	case PointValueTypeHistogram:
		copyToNewHistogramValue(&dst.histogram, &src.histogram, allocators)
	case PointValueTypeExpHistogram:
		copyToNewExpHistogramValue(&dst.expHistogram, &src.expHistogram, allocators)
	case PointValueTypeSummary:
		copyToNewSummaryValue(&dst.summary, &src.summary, allocators)
	case PointValueTypeNone:
	default:
		panic("copyPointValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// CopyFrom() performs a deep copy from src.
func (s *PointValue) CopyFrom(src *PointValue) {
	copyPointValue(s, src)
}

func (s *PointValue) markParentModified() {
	s.parentModifiedFields.markModified(s.parentModifiedBit)
}

func (s *PointValue) markModifiedRecursively() {
	switch s.typ {
	case PointValueTypeInt64:
	case PointValueTypeFloat64:
	case PointValueTypeHistogram:
		s.histogram.markModifiedRecursively()
	case PointValueTypeExpHistogram:
		s.expHistogram.markModifiedRecursively()
	case PointValueTypeSummary:
		s.summary.markModifiedRecursively()
	}
}

func (s *PointValue) markUnmodifiedRecursively() {
	switch s.typ {
	case PointValueTypeInt64:
	case PointValueTypeFloat64:
	case PointValueTypeHistogram:
		s.histogram.markUnmodifiedRecursively()
	case PointValueTypeExpHistogram:
		s.expHistogram.markUnmodifiedRecursively()
	case PointValueTypeSummary:
		s.summary.markUnmodifiedRecursively()
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *PointValue) IsEqual(val *PointValue) bool {
	if e.typ != val.typ {
		return false
	}
	switch e.typ {
	case PointValueTypeInt64:
		return pkg.Int64Equal(e.int64, val.int64)
	case PointValueTypeFloat64:
		return pkg.Float64Equal(e.float64, val.float64)
	case PointValueTypeHistogram:
		return e.histogram.IsEqual(&val.histogram)
	case PointValueTypeExpHistogram:
		return e.expHistogram.IsEqual(&val.expHistogram)
	case PointValueTypeSummary:
		return e.summary.IsEqual(&val.summary)
	}

	return true
}

func PointValueEqual(left, right *PointValue) bool {
	return left.IsEqual(right)
}

// CmpPointValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpPointValue(left, right *PointValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	c := pkg.Uint64Compare(uint64(left.typ), uint64(right.typ))
	if c != 0 {
		return c
	}
	switch left.typ {
	case PointValueTypeInt64:
		return pkg.Int64Compare(left.int64, right.int64)
	case PointValueTypeFloat64:
		return pkg.Float64Compare(left.float64, right.float64)
	case PointValueTypeHistogram:
		return CmpHistogramValue(&left.histogram, &right.histogram)
	case PointValueTypeExpHistogram:
		return CmpExpHistogramValue(&left.expHistogram, &right.expHistogram)
	case PointValueTypeSummary:
		return CmpSummaryValue(&left.summary, &right.summary)
	}

	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schema are mutated, allowing to generate data for specified schema.
func (s *PointValue) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this oneof from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// the type of the oneof to the choices that are not in the schema.
	fieldCount, err := schem.FieldCount("PointValue")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "PointValue", err))
	}

	typeChanged := false
	if random.IntN(10) == 0 {
		s.SetType(PointValueType(random.IntN(fieldCount + 1)))
		typeChanged = true
	}

	switch s.typ {
	case PointValueTypeInt64:
		if typeChanged || random.IntN(2) == 0 {
			s.SetInt64(pkg.Int64Random(random))
		}
	case PointValueTypeFloat64:
		if typeChanged || random.IntN(2) == 0 {
			s.SetFloat64(pkg.Float64Random(random))
		}
	case PointValueTypeHistogram:
		if typeChanged || random.IntN(2) == 0 {
			s.histogram.mutateRandom(random, schem)
		}
	case PointValueTypeExpHistogram:
		if typeChanged || random.IntN(2) == 0 {
			s.expHistogram.mutateRandom(random, schem)
		}
	case PointValueTypeSummary:
		if typeChanged || random.IntN(2) == 0 {
			s.summary.mutateRandom(random, schem)
		}
	}
}

// PointValueEncoder implements encoding of PointValue
type PointValueEncoder struct {
	buf        pkg.BitsWriter
	limiter    *pkg.SizeLimiter
	prevType   PointValueType
	fieldCount uint

	// Field encoders.

	int64Encoder encoders.Int64Encoder

	float64Encoder encoders.Float64Encoder

	histogramEncoder     *HistogramValueEncoder
	isHistogramRecursive bool // Indicates Histogram field's type is recursive.

	expHistogramEncoder     *ExpHistogramValueEncoder
	isExpHistogramRecursive bool // Indicates ExpHistogram field's type is recursive.

	summaryEncoder     *SummaryValueEncoder
	isSummaryRecursive bool // Indicates Summary field's type is recursive.

}

func (e *PointValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.PointValueEncoder != nil {
		panic("cannot initialize PointValueEncoder: already initialized")
	}
	state.PointValueEncoder = e
	defer func() { state.PointValueEncoder = nil }()

	e.limiter = &state.limiter

	var err error
	e.fieldCount, err = state.StructFieldCounts.PointValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "PointValue", err)
	}

	// Init encoder for Int64 field.
	if e.fieldCount <= 0 {
		// Int64 and all subsequent fields are skipped.
		return nil
	}
	err = e.int64Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Float64 field.
	if e.fieldCount <= 1 {
		// Float64 and all subsequent fields are skipped.
		return nil
	}
	err = e.float64Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Histogram field.
	if e.fieldCount <= 2 {
		// Histogram and all subsequent fields are skipped.
		return nil
	}
	if state.HistogramValueEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.histogramEncoder = state.HistogramValueEncoder
		e.isHistogramRecursive = true
	} else {
		e.histogramEncoder = new(HistogramValueEncoder)
		err = e.histogramEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for ExpHistogram field.
	if e.fieldCount <= 3 {
		// ExpHistogram and all subsequent fields are skipped.
		return nil
	}
	if state.ExpHistogramValueEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.expHistogramEncoder = state.ExpHistogramValueEncoder
		e.isExpHistogramRecursive = true
	} else {
		e.expHistogramEncoder = new(ExpHistogramValueEncoder)
		err = e.expHistogramEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Summary field.
	if e.fieldCount <= 4 {
		// Summary and all subsequent fields are skipped.
		return nil
	}
	if state.SummaryValueEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.summaryEncoder = state.SummaryValueEncoder
		e.isSummaryRecursive = true
	} else {
		e.summaryEncoder = new(SummaryValueEncoder)
		err = e.summaryEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *PointValueEncoder) Reset() {
	e.prevType = 0

	if e.fieldCount <= 0 {
		return // Int64 and all subsequent fields are skipped.
	}
	e.int64Encoder.Reset()
	if e.fieldCount <= 1 {
		return // Float64 and all subsequent fields are skipped.
	}
	e.float64Encoder.Reset()
	if e.fieldCount <= 2 {
		return // Histogram and all subsequent fields are skipped.
	}

	if !e.isHistogramRecursive {
		e.histogramEncoder.Reset()
	}

	if e.fieldCount <= 3 {
		return // ExpHistogram and all subsequent fields are skipped.
	}

	if !e.isExpHistogramRecursive {
		e.expHistogramEncoder.Reset()
	}

	if e.fieldCount <= 4 {
		return // Summary and all subsequent fields are skipped.
	}

	if !e.isSummaryRecursive {
		e.summaryEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *PointValueEncoder) Encode(val *PointValue) {
	typ := val.typ
	if uint(typ) > e.fieldCount {
		// The current field type is not supported in target schema. Encode the type as None.
		typ = PointValueTypeNone
	}

	// Compute type delta. 0 means the type is the same as the last time.
	typDelta := int(typ) - int(e.prevType)
	e.prevType = typ
	bitCount := e.buf.WriteVarintCompact(int64(typDelta))

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Encode currently selected field.
	switch typ {
	case PointValueTypeInt64:
		// Encode Int64
		e.int64Encoder.Encode(val.int64)
	case PointValueTypeFloat64:
		// Encode Float64
		e.float64Encoder.Encode(val.float64)
	case PointValueTypeHistogram:
		// Encode Histogram
		e.histogramEncoder.Encode(&val.histogram)
	case PointValueTypeExpHistogram:
		// Encode ExpHistogram
		e.expHistogramEncoder.Encode(&val.expHistogram)
	case PointValueTypeSummary:
		// Encode Summary
		e.summaryEncoder.Encode(&val.summary)
	}
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *PointValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Int64 field.
	if e.fieldCount <= 0 {
		return // Int64 and subsequent fields are skipped.
	}

	e.int64Encoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Float64 field.
	if e.fieldCount <= 1 {
		return // Float64 and subsequent fields are skipped.
	}

	e.float64Encoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Histogram field.
	if e.fieldCount <= 2 {
		return // Histogram and subsequent fields are skipped.
	}
	if !e.isHistogramRecursive {
		e.histogramEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect ExpHistogram field.
	if e.fieldCount <= 3 {
		return // ExpHistogram and subsequent fields are skipped.
	}
	if !e.isExpHistogramRecursive {
		e.expHistogramEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Summary field.
	if e.fieldCount <= 4 {
		return // Summary and subsequent fields are skipped.
	}
	if !e.isSummaryRecursive {
		e.summaryEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// PointValueDecoder implements decoding of PointValue
type PointValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *PointValue
	lastVal    PointValue
	fieldCount uint

	prevType PointValueType

	// Field decoders.

	int64Decoder encoders.Int64Decoder

	float64Decoder encoders.Float64Decoder

	histogramDecoder     *HistogramValueDecoder
	isHistogramRecursive bool

	expHistogramDecoder     *ExpHistogramValueDecoder
	isExpHistogramRecursive bool

	summaryDecoder     *SummaryValueDecoder
	isSummaryRecursive bool

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *PointValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.PointValueDecoder != nil {
		panic("cannot initialize PointValueDecoder: already initialized")
	}
	state.PointValueDecoder = d
	defer func() { state.PointValueDecoder = nil }()

	d.allocators = &state.Allocators

	var err error
	d.fieldCount, err = state.StructFieldCounts.PointValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "PointValue", err)
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal
	if d.fieldCount <= 0 {
		return nil // Int64 and subsequent fields are skipped.
	}
	err = d.int64Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Float64 and subsequent fields are skipped.
	}
	err = d.float64Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Histogram and subsequent fields are skipped.
	}
	if state.HistogramValueDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.histogramDecoder = state.HistogramValueDecoder
		d.isHistogramRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.histogramDecoder = new(HistogramValueDecoder)
		err = d.histogramDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // ExpHistogram and subsequent fields are skipped.
	}
	if state.ExpHistogramValueDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.expHistogramDecoder = state.ExpHistogramValueDecoder
		d.isExpHistogramRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.expHistogramDecoder = new(ExpHistogramValueDecoder)
		err = d.expHistogramDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // Summary and subsequent fields are skipped.
	}
	if state.SummaryValueDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.summaryDecoder = state.SummaryValueDecoder
		d.isSummaryRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.summaryDecoder = new(SummaryValueDecoder)
		err = d.summaryDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *PointValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Int64 and subsequent fields are skipped.
	}
	d.int64Decoder.Continue()

	if d.fieldCount <= 1 {
		return // Float64 and subsequent fields are skipped.
	}
	d.float64Decoder.Continue()

	if d.fieldCount <= 2 {
		return // Histogram and subsequent fields are skipped.
	}

	if !d.isHistogramRecursive {
		d.histogramDecoder.Continue()
	}

	if d.fieldCount <= 3 {
		return // ExpHistogram and subsequent fields are skipped.
	}

	if !d.isExpHistogramRecursive {
		d.expHistogramDecoder.Continue()
	}

	if d.fieldCount <= 4 {
		return // Summary and subsequent fields are skipped.
	}

	if !d.isSummaryRecursive {
		d.summaryDecoder.Continue()
	}

}

func (d *PointValueDecoder) Reset() {
	d.prevType = 0

	if d.fieldCount <= 0 {
		return // Int64 and all subsequent fields are skipped.
	}
	d.int64Decoder.Reset()
	if d.fieldCount <= 1 {
		return // Float64 and all subsequent fields are skipped.
	}
	d.float64Decoder.Reset()
	if d.fieldCount <= 2 {
		return // Histogram and all subsequent fields are skipped.
	}

	if !d.isHistogramRecursive {
		d.histogramDecoder.Reset()
	}

	if d.fieldCount <= 3 {
		return // ExpHistogram and all subsequent fields are skipped.
	}

	if !d.isExpHistogramRecursive {
		d.expHistogramDecoder.Reset()
	}

	if d.fieldCount <= 4 {
		return // Summary and all subsequent fields are skipped.
	}

	if !d.isSummaryRecursive {
		d.summaryDecoder.Reset()
	}

}

func (d *PointValueDecoder) Decode(dstPtr *PointValue) error {
	// Read Type delta
	typeDelta := d.buf.ReadVarintCompact()

	// Calculate and validate the new Type
	typ := int(d.prevType) + int(typeDelta)
	if typ < 0 || typ >= int(PointValueTypeCount) {
		return pkg.ErrInvalidOneOfType
	}

	dst := dstPtr
	dst.typ = PointValueType(typ)
	d.prevType = PointValueType(dst.typ)

	// Decode selected field
	switch dst.typ {
	case PointValueTypeInt64:
		// Decode Int64
		err := d.int64Decoder.Decode(&dst.int64)
		if err != nil {
			return err
		}
	case PointValueTypeFloat64:
		// Decode Float64
		err := d.float64Decoder.Decode(&dst.float64)
		if err != nil {
			return err
		}
	case PointValueTypeHistogram:
		// Decode Histogram
		err := d.histogramDecoder.Decode(&dst.histogram)
		if err != nil {
			return err
		}
	case PointValueTypeExpHistogram:
		// Decode ExpHistogram
		err := d.expHistogramDecoder.Decode(&dst.expHistogram)
		if err != nil {
			return err
		}
	case PointValueTypeSummary:
		// Decode Summary
		err := d.summaryDecoder.Decode(&dst.summary)
		if err != nil {
			return err
		}
	}
	return nil
}

// PointValueAllocator implements a custom allocator for PointValue.
// It maintains a pool of pre-allocated PointValue and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type PointValueAllocator struct {
	pool []PointValue
	ofs  int
}

// Alloc returns the next available PointValue from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *PointValueAllocator) Alloc() *PointValue {
	if a.ofs < len(a.pool) {
		// Get the next available PointValue from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *PointValueAllocator) prealloc() *PointValue {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]PointValue, newLen)
	a.ofs = 1
	return &a.pool[0]
}
