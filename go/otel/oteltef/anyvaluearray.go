// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"math/rand/v2"

	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = (*encoders.StringEncoder)(nil)
var _ = (*strings.Builder)(nil)

// AnyValueArray is a variable size array.
type AnyValueArray struct {
	elems []*AnyValue

	parentModifiedFields *modifiedFields
	parentModifiedBit    uint64
}

func (e *AnyValueArray) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	e.parentModifiedFields = parentModifiedFields
	e.parentModifiedBit = parentModifiedBit
}

// Clone() creates a deep copy of AnyValueArray
func (e *AnyValueArray) Clone() AnyValueArray {
	var clone AnyValueArray
	copyAnyValueArray(&clone, e)
	return clone
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (e *AnyValueArray) byteSize() uint {
	if len(e.elems) == 0 {
		return 0
	}
	// TODO: add size of elements if they are clonable.
	size := uint(unsafe.Sizeof(e.elems[0]))*uint(len(e.elems)) + uint(unsafe.Sizeof(e))

	for i := range e.elems {
		size += e.elems[i].byteSize()
	}
	return size
}

// Append a new element at the end of the array.
func (e *AnyValueArray) Append(val *AnyValue) {
	e.elems = append(e.elems, val)
	e.markModified()
}

func (e *AnyValueArray) markModified() {
	e.parentModifiedFields.markModified(e.parentModifiedBit)
}

func (e *AnyValueArray) markUnmodified() {
	e.parentModifiedFields.markUnmodified()
}

func (e *AnyValueArray) markModifiedRecursively() {
	for i := 0; i < len(e.elems); i++ {
		e.elems[i].markModifiedRecursively()
	}

}

func (e *AnyValueArray) markUnmodifiedRecursively() {
	for i := 0; i < len(e.elems); i++ {
		e.elems[i].markUnmodifiedRecursively()
	}

}

// markDiffModified marks fields in each element of this array modified if they differ from
// the corresponding fields in v.
func (e *AnyValueArray) markDiffModified(v *AnyValueArray) (modified bool) {
	if len(e.elems) != len(v.elems) {
		// Array lengths are different, so they are definitely different.
		modified = true
	}

	// Scan the elements and mark them as modified if they are different.
	minLen := min(len(e.elems), len(v.elems))
	for i := 0; i < minLen; i++ {
		if e.elems[i].markDiffModified(v.elems[i]) {
			modified = true
		}
	}

	// Mark the rest of the elements as modified.
	for i := minLen; i < len(e.elems); i++ {
		e.elems[i].markModifiedRecursively()
	}

	if modified {
		e.markModified()
	}

	return modified
}

func copyAnyValueArray(dst *AnyValueArray, src *AnyValueArray) {
	isModified := false

	minLen := min(len(dst.elems), len(src.elems))
	if len(dst.elems) != len(src.elems) {
		dst.elems = pkg.EnsureLen(dst.elems, len(src.elems))
		isModified = true
	}

	i := 0

	// Copy elements in the part of the array that already had the necessary room.
	for ; i < minLen; i++ {
		copyAnyValue(dst.elems[i], src.elems[i])
		isModified = true
	}
	if minLen < len(dst.elems) {
		isModified = true
		// Need to allocate new elements for the part of the array that has grown.
		// Allocate all new elements at once.
		elems := make([]AnyValue, len(dst.elems)-minLen)
		for j := range elems {
			// Init the element.
			elems[j].init(dst.parentModifiedFields, dst.parentModifiedBit)
			// Point to the allocated element.
			dst.elems[i+j] = &elems[j]
			// Copy the element.
			copyAnyValue(dst.elems[i+j], src.elems[i+j])
		}
	}
	if isModified {
		dst.markModified()
	}
}

// Len returns the number of elements in the array.
func (e *AnyValueArray) Len() int {
	return len(e.elems)
}

// At returns element at index i.
func (m *AnyValueArray) At(i int) *AnyValue {
	return m.elems[i]
}

// EnsureLen ensures the length of the array is equal to newLen.
// It will grow or shrink the array if needed.
func (e *AnyValueArray) EnsureLen(newLen int) {
	oldLen := len(e.elems)
	if newLen > oldLen {
		// Grow the array
		e.elems = append(e.elems, make([]*AnyValue, newLen-oldLen)...)
		e.markModified()
		// Initialize newlly added elements.
		for ; oldLen < newLen; oldLen++ {
			e.elems[oldLen] = new(AnyValue)
			e.elems[oldLen].init(e.parentModifiedFields, e.parentModifiedBit)
		}
	} else if oldLen > newLen {
		// Shrink it
		e.elems = e.elems[:newLen]
		e.markModified()
	}
}

// IsEqual performs deep comparison and returns true if array is equal to val.
func (e *AnyValueArray) IsEqual(val *AnyValueArray) bool {
	if len(e.elems) != len(val.elems) {
		return false
	}
	for i := range e.elems {
		if !e.elems[i].IsEqual(val.elems[i]) {
			return false
		}
	}
	return true
}

// CmpAnyValueArray performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpAnyValueArray(left, right *AnyValueArray) int {
	c := len(left.elems) - len(right.elems)
	if c != 0 {
		return c
	}
	for i := range left.elems {
		fc := CmpAnyValue(left.elems[i], right.elems[i])
		if fc < 0 {
			return -1
		}
		if fc > 0 {
			return 1
		}
	}
	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. If array elements contain structs/oneofs
// only fields that exist in the schema are mutated, allowing to generate data for
// specified schema.
func (a *AnyValueArray) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	if random.IntN(20) == 0 {
		a.EnsureLen(a.Len() + 1)
	}
	if random.IntN(20) == 0 && a.Len() > 0 {
		a.EnsureLen(a.Len() - 1)
	}

	for i := range a.elems {
		_ = i
		if random.IntN(2*len(a.elems)) == 0 {
			a.elems[i].mutateRandom(random, schem)
		}
	}
}

type AnyValueArrayEncoder struct {
	buf         pkg.BitsWriter
	limiter     *pkg.SizeLimiter
	elemEncoder *AnyValueEncoder
	isRecursive bool
	state       *WriterState
	// lastValStack are last encoded values stacked by the level of recursion.
	lastValStack AnyValueArrayEncoderLastValStack
}
type AnyValueArrayEncoderLastValStack []*AnyValueArrayEncoderLastValElem

func (s *AnyValueArrayEncoderLastValStack) init() {
	// We need one top-level element in the stack to store the last value initially.
	s.addOnTop()
}

func (s *AnyValueArrayEncoderLastValStack) reset() {
	// Reset all elements in the stack.
	t := (*s)[:cap(*s)]
	for i := 0; i < len(t); i++ {
		t[i].reset()
	}
	// Reset the stack to have one element for top-level.
	*s = (*s)[:1]
}

func (s *AnyValueArrayEncoderLastValStack) top() *AnyValueArrayEncoderLastValElem {
	return (*s)[len(*s)-1]
}

func (s *AnyValueArrayEncoderLastValStack) addOnTopSlow() {
	elem := &AnyValueArrayEncoderLastValElem{}
	elem.init()
	*s = append(*s, elem)
	t := (*s)[0:cap(*s)]
	for i := len(*s); i < len(t); i++ {
		// Ensure that all elements in the stack are initialized.
		t[i] = &AnyValueArrayEncoderLastValElem{}
		t[i].init()
	}
}

func (s *AnyValueArrayEncoderLastValStack) addOnTop() {
	if len(*s) < cap(*s) {
		*s = (*s)[:len(*s)+1]
		return
	}
	s.addOnTopSlow()
}

func (s *AnyValueArrayEncoderLastValStack) removeFromTop() {
	*s = (*s)[:len(*s)-1]
}

type AnyValueArrayEncoderLastValElem struct {
	prevLen        int
	elem           AnyValue
	modifiedFields modifiedFields
}

func (e *AnyValueArrayEncoderLastValElem) init() {
	e.elem.init(&e.modifiedFields, 1)
}

func (e *AnyValueArrayEncoderLastValElem) reset() {
	e.elem = AnyValue{}
	e.prevLen = 0
}

func (e *AnyValueArrayEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	e.state = state
	e.limiter = &state.limiter

	// Remember this encoder in the state so that we can detect recursion.
	if state.AnyValueArrayEncoder != nil {
		panic("cannot initialize AnyValueArrayEncoder: already initialized")
	}
	state.AnyValueArrayEncoder = e
	defer func() { state.AnyValueArrayEncoder = nil }()

	if state.AnyValueEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.elemEncoder = state.AnyValueEncoder
		e.isRecursive = true
	} else {
		e.elemEncoder = new(AnyValueEncoder)
		if err := e.elemEncoder.Init(state, columns.AddSubColumn()); err != nil {
			return err
		}
	}
	e.lastValStack.init()

	return nil
}

func (e *AnyValueArrayEncoder) Reset() {
	if !e.isRecursive {
		e.elemEncoder.Reset()
	}

	e.lastValStack.reset()
}

func (e *AnyValueArrayEncoder) Encode(arr *AnyValueArray) {
	lastVal := e.lastValStack.top()
	e.lastValStack.addOnTop()
	defer func() { e.lastValStack.removeFromTop() }()

	newLen := len(arr.elems)
	oldBitLen := e.buf.BitCount()

	lenDelta := newLen - lastVal.prevLen
	lastVal.prevLen = newLen

	e.buf.WriteVarintCompact(int64(lenDelta))

	if newLen > 0 {
		for i := 0; i < newLen; i++ {
			if i == 0 {
				// Compute and mark fields that are modified compared to the last encoded value.
				arr.elems[i].markDiffModified(&lastVal.elem)
			} else {
				// Compute and mark fields that are modified compared to the previous element.
				arr.elems[i].markDiffModified(arr.elems[i-1])
			}

			// Encode the element.
			e.elemEncoder.Encode(arr.elems[i])
		}
		// Remember last encoded element.
		copyAnyValue(&lastVal.elem, arr.elems[len(arr.elems)-1])
	}

	// Account written bits in the limiter.
	newBitLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newBitLen - oldBitLen)
}

func (e *AnyValueArrayEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	if !e.isRecursive {
		e.elemEncoder.CollectColumns(columnSet.At(0))
	}
}

type AnyValueArrayDecoder struct {
	buf         pkg.BitsReader
	column      *pkg.ReadableColumn
	elemDecoder *AnyValueDecoder
	isRecursive bool
	// lastValStack are last decoded values stacked by the level of recursion.
	lastValStack AnyValueArrayDecoderLastValStack
}
type AnyValueArrayDecoderLastValStack []*AnyValueArrayDecoderLastValElem

func (s *AnyValueArrayDecoderLastValStack) init() {
	// We need one top-level element in the stack to store the last value initially.
	s.addOnTop()
}

func (s *AnyValueArrayDecoderLastValStack) reset() {
	// Reset all elements in the stack.
	t := (*s)[:cap(*s)]
	for i := 0; i < len(t); i++ {
		t[i].reset()
	}
	// Reset the stack to have one element for top-level.
	*s = (*s)[:1]
}

func (s *AnyValueArrayDecoderLastValStack) top() *AnyValueArrayDecoderLastValElem {
	return (*s)[len(*s)-1]
}

func (s *AnyValueArrayDecoderLastValStack) addOnTopSlow() {
	elem := &AnyValueArrayDecoderLastValElem{}
	elem.init()
	*s = append(*s, elem)
	t := (*s)[0:cap(*s)]
	for i := len(*s); i < len(t); i++ {
		// Ensure that all elements in the stack are initialized.
		t[i] = &AnyValueArrayDecoderLastValElem{}
		t[i].init()
	}
}

func (s *AnyValueArrayDecoderLastValStack) addOnTop() {
	if len(*s) < cap(*s) {
		*s = (*s)[:len(*s)+1]
		return
	}
	s.addOnTopSlow()
}

func (s *AnyValueArrayDecoderLastValStack) removeFromTop() {
	*s = (*s)[:len(*s)-1]
}

type AnyValueArrayDecoderLastValElem struct {
	prevLen     int
	elem        *AnyValue
	elemStorage AnyValue
}

func (e *AnyValueArrayDecoderLastValElem) init() {
	e.elem = &e.elemStorage

}

func (e *AnyValueArrayDecoderLastValElem) reset() {
	e.prevLen = 0
	*e.elem = AnyValue{}
}

// Init is called once in the lifetime of the stream.
func (d *AnyValueArrayDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	d.column = columns.Column()
	// Remember this encoder in the state so that we can detect recursion.
	if state.AnyValueArrayDecoder != nil {
		panic("cannot initialize AnyValueArrayDecoder: already initialized")
	}
	state.AnyValueArrayDecoder = d
	defer func() { state.AnyValueArrayDecoder = nil }()

	if state.AnyValueDecoder != nil {
		d.elemDecoder = state.AnyValueDecoder
		d.isRecursive = true
	} else {
		d.elemDecoder = new(AnyValueDecoder)
		if err := d.elemDecoder.Init(state, columns.AddSubColumn()); err != nil {
			return err
		}
	}
	d.lastValStack.init()

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *AnyValueArrayDecoder) Continue() {
	d.buf.Reset(d.column.Data())
	if !d.isRecursive {
		d.elemDecoder.Continue()
	}
}

func (d *AnyValueArrayDecoder) Reset() {
	if !d.isRecursive {
		d.elemDecoder.Reset()
	}
	d.lastValStack.reset()
}

func (d *AnyValueArrayDecoder) Decode(dst *AnyValueArray) error {
	lastVal := d.lastValStack.top()
	d.lastValStack.addOnTop()
	defer func() { d.lastValStack.removeFromTop() }()

	lenDelta := d.buf.ReadVarintCompact()

	newLen := lastVal.prevLen + int(lenDelta)
	lastVal.prevLen = newLen

	dst.EnsureLen(newLen)

	for i := 0; i < newLen; i++ {
		err := d.elemDecoder.Decode(lastVal.elem)
		if err != nil {
			return err
		}
		copyAnyValue(dst.elems[i], lastVal.elem)
	}

	return nil
}
