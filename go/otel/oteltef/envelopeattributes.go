// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"math/rand/v2"
	"slices"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

// EnvelopeAttributes is a multimap, (aka an associative array or a list) of key value
// pairs from string to Bytes.
type EnvelopeAttributes struct {
	elems       []EnvelopeAttributesElem
	initedCount int

	parentModifiedFields *modifiedFields
	parentModifiedBit    uint64
}

type EnvelopeAttributesElem struct {
	key   string
	value pkg.Bytes
}

func (e *EnvelopeAttributesElem) Key() string {
	return e.key
}

func (e *EnvelopeAttributesElem) Value() pkg.Bytes {
	return e.value
}

func (m *EnvelopeAttributes) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	m.parentModifiedFields = parentModifiedFields
	m.parentModifiedBit = parentModifiedBit
}

// Clone() creates a deep copy of EnvelopeAttributes
func (m *EnvelopeAttributes) Clone() EnvelopeAttributes {
	clone := EnvelopeAttributes{}
	copyEnvelopeAttributes(&clone, m)
	return clone
}

// Len returns the number of elements in the multimap.
func (m *EnvelopeAttributes) Len() int {
	return len(m.elems)
}

// At returns element at index i.
func (m *EnvelopeAttributes) At(i int) *EnvelopeAttributesElem {
	return &m.elems[i]
}

// EnsureLen ensures the length of the multimap is equal to newLen.
// It will grow or shrink the multimap if needed.
func (m *EnvelopeAttributes) EnsureLen(newLen int) {
	oldLen := len(m.elems)
	if newLen != oldLen {
		m.elems = pkg.EnsureLen(m.elems, newLen)
		// Init elements with pointers to the parent struct.
		for i := m.initedCount; i < newLen; i++ {
		}
		if m.initedCount < newLen {
			m.initedCount = newLen
		}
		m.markModified()
	}
}

func (m *EnvelopeAttributes) markModified() {
	m.parentModifiedFields.markModified(m.parentModifiedBit)
}

func (m *EnvelopeAttributes) isModified() bool {
	return m.parentModifiedFields.isModified(m.parentModifiedBit)
}

func (m *EnvelopeAttributes) markUnmodified() {
	m.parentModifiedFields.markUnmodified()
}

func (m *EnvelopeAttributes) markModifiedRecursively() {
	for i := 0; i < len(m.elems); i++ {
	}
}

func (m *EnvelopeAttributes) markUnmodifiedRecursively() {
	for i := 0; i < len(m.elems); i++ {
	}
}

// markDiffModified marks fields in each key and value of this multimap modified if they
// differ from the corresponding fields in v.
func (m *EnvelopeAttributes) markDiffModified(v *EnvelopeAttributes) (modified bool) {
	if len(m.elems) != len(v.elems) {
		// Array lengths are different, so they are definitely different.
		modified = true
	}

	// Scan the elements and mark them as modified if they are different.
	minLen := min(len(m.elems), len(v.elems))
	for i := 0; i < minLen; i++ {
		if !pkg.StringEqual(m.elems[i].key, v.elems[i].key) {
			modified = true
		}
		if !pkg.BytesEqual(m.elems[i].value, v.elems[i].value) {
			modified = true
		}

	}

	if modified {
		m.markModified()
	}

	return modified
}

// markDiffModified marks fields in each value of this multimap modified if they
// differ from the corresponding fields in v.
// This function assumes the keys are the same and the lengths of multimaps are the same.
func (m *EnvelopeAttributes) markValueDiffModified(v *EnvelopeAttributes) (modified bool) {
	// Scan the elements and mark them as modified if they are different.
	for i := 0; i < len(m.elems); i++ {
		if !pkg.BytesEqual(m.elems[i].value, v.elems[i].value) {
			modified = true
		}

	}

	if modified {
		m.markModified()
	}

	return modified
}

func (m *EnvelopeAttributes) Append(k string, v pkg.Bytes) {
	m.elems = append(m.elems, EnvelopeAttributesElem{key: k, value: v})
	m.markModified()
}

// SetKey sets the key of the element at index i.
func (m *EnvelopeAttributes) SetKey(i int, k string) {
	if m.elems[i].key != k {
		m.elems[i].key = k
		m.markModified()
	}
}

// SetValue sets the value of the element at index i.
func (m *EnvelopeAttributes) SetValue(i int, v pkg.Bytes) {
	if !pkg.BytesEqual(m.elems[i].value, v) {
		m.elems[i].value = v
		m.markModified()
	}
}

func (m *EnvelopeAttributes) Sort() {
	slices.SortFunc(m.elems, func(a, b EnvelopeAttributesElem) int {
		return strings.Compare(a.key, b.key)
	})
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (m *EnvelopeAttributes) byteSize() uint {
	return uint(unsafe.Sizeof(EnvelopeAttributesElem{}))*uint(len(m.elems)) + uint(unsafe.Sizeof(m.elems))
}

func copyEnvelopeAttributes(dst *EnvelopeAttributes, src *EnvelopeAttributes) {
	modified := false
	if len(dst.elems) != len(src.elems) {
		dst.EnsureLen(len(src.elems))
		modified = true
	}
	if !slices.Equal(dst.elems, src.elems) {
		copy(dst.elems, src.elems)
		modified = true
	}

	if modified {
		dst.markModified()
	}
}

func (m *EnvelopeAttributes) CopyFrom(src *EnvelopeAttributes) {
	copyEnvelopeAttributes(m, src)
}

func (e *EnvelopeAttributes) IsEqual(val *EnvelopeAttributes) bool {
	if len(e.elems) != len(val.elems) {
		return false
	}
	for i := range e.elems {
		if !pkg.StringEqual(e.elems[i].key, val.elems[i].key) {
			return false
		}
		if !pkg.BytesEqual(e.elems[i].value, val.elems[i].value) {
			return false
		}
	}
	return true
}

func EnvelopeAttributesEqual(left, right *EnvelopeAttributes) bool {
	return left.IsEqual(right)
}

func CmpEnvelopeAttributes(left, right *EnvelopeAttributes) int {
	l := min(len(left.elems), len(right.elems))
	for i := 0; i < l; i++ {
		c := strings.Compare(left.elems[i].key, right.elems[i].key)
		if c != 0 {
			return c
		}
	}
	lenDiff := len(left.elems) - len(right.elems)

	if lenDiff != 0 {
		return lenDiff
	}

	for i := 0; i < l; i++ {
		c := pkg.BytesCompare(
			left.elems[i].value,
			right.elems[i].value,
		)
		if c != 0 {
			return c
		}
	}
	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. If key or value contains structs/oneofs
// only fields that exist in the schema are mutated, allowing to generate data for
// specified schema.
func (m *EnvelopeAttributes) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	if random.IntN(20) == 0 {
		m.EnsureLen(m.Len() + 1)
	}
	if random.IntN(20) == 0 && m.Len() > 0 {
		m.EnsureLen(m.Len() - 1)
	}

	for i := range m.elems {
		_ = i
		if random.IntN(4*len(m.elems)) == 0 {
			m.SetKey(i, pkg.StringRandom(random))
		}
		if random.IntN(4*len(m.elems)) == 0 {
			m.SetValue(i, pkg.BytesRandom(random))
		}
	}
}

type EnvelopeAttributesEncoder struct {
	buf     pkg.BytesWriter
	columns pkg.WriteColumnSet
	limiter *pkg.SizeLimiter

	keyEncoder       *encoders.StringEncoder
	isKeyRecursive   bool
	valueEncoder     *encoders.BytesEncoder
	isValueRecursive bool
	lastVal          EnvelopeAttributes
}
type EnvelopeAttributesLastValStack []*EnvelopeAttributesLastValElem

func (s *EnvelopeAttributesLastValStack) init() {
	// We need one top-level element in the stack to store the last value initially.
	s.addOnTop()
}

func (s *EnvelopeAttributesLastValStack) reset() {
	// Reset all elements in the stack.
	t := (*s)[:cap(*s)]
	for i := 0; i < len(t); i++ {
		t[i].reset()
	}
	// Reset the stack to have one element for top-level.
	*s = (*s)[:1]
}

func (s *EnvelopeAttributesLastValStack) top() *EnvelopeAttributesLastValElem {
	return (*s)[len(*s)-1]
}

func (s *EnvelopeAttributesLastValStack) addOnTopSlow() {
	elem := &EnvelopeAttributesLastValElem{}
	elem.init()
	*s = append(*s, elem)
	t := (*s)[0:cap(*s)]
	for i := len(*s); i < len(t); i++ {
		// Ensure that all elements in the stack are initialized.
		t[i] = &EnvelopeAttributesLastValElem{}
		t[i].init()
	}
}

func (s *EnvelopeAttributesLastValStack) addOnTop() {
	if len(*s) < cap(*s) {
		*s = (*s)[:len(*s)+1]
		return
	}
	s.addOnTopSlow()
}

func (s *EnvelopeAttributesLastValStack) removeFromTop() {
	*s = (*s)[:len(*s)-1]
}

type EnvelopeAttributesLastValElem struct {
	val            EnvelopeAttributes
	modifiedFields modifiedFields
}

func (e *EnvelopeAttributesLastValElem) init() {
	e.val.init(&e.modifiedFields, 1)
}

func (e *EnvelopeAttributesLastValElem) reset() {
	e.val = EnvelopeAttributes{}
}

func (e *EnvelopeAttributesEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.EnvelopeAttributesEncoder != nil {
		panic("cannot initialize EnvelopeAttributesEncoder: already initialized")
	}
	state.EnvelopeAttributesEncoder = e
	defer func() { state.EnvelopeAttributesEncoder = nil }()

	e.limiter = &state.limiter

	var err error
	e.keyEncoder = new(encoders.StringEncoder)
	err = e.keyEncoder.Init(nil, e.limiter, columns.AddSubColumn())
	if err != nil {
		return nil
	}
	e.valueEncoder = new(encoders.BytesEncoder)
	err = e.valueEncoder.Init(nil, e.limiter, columns.AddSubColumn())

	return err
}

func (e *EnvelopeAttributesEncoder) Reset() {
	if !e.isKeyRecursive {
		e.keyEncoder.Reset()
	}
	if !e.isValueRecursive {
		e.valueEncoder.Reset()
	}
	e.lastVal = EnvelopeAttributes{}
}

func (e *EnvelopeAttributesEncoder) Encode(list *EnvelopeAttributes) (changed bool) {
	oldLen := len(e.buf.Bytes())
	lastVal := &e.lastVal

	if len(list.elems) == 0 {
		// Zero-length attr list.
		e.buf.WriteUvarint(0b1)

		changed = len(lastVal.elems) != 0
		lastVal.elems = pkg.EnsureLen(lastVal.elems, 0)

		newLen := len(e.buf.Bytes())
		e.limiter.AddFrameBytes(uint(newLen - oldLen))

		return changed
	}

	if list.isSameKeys(lastVal) && len(lastVal.elems) < 63 {
		list.markValueDiffModified(lastVal)
		changed = e.encodeValuesOnly(lastVal, list)
	} else {
		list.markDiffModified(lastVal)
		e.encodeFull(lastVal, list)
		changed = true
	}

	newLen := len(e.buf.Bytes())
	e.limiter.AddFrameBytes(uint(newLen - oldLen))

	return changed
}

func (e *EnvelopeAttributesEncoder) encodeValuesOnly(lastVal *EnvelopeAttributes, list *EnvelopeAttributes) (changed bool) {
	if len(list.elems) > 62 {
		// TODO: implement this case.
		panic("not implemented")
	}

	// Calculate changed values.
	changedValuesBits := uint64(0)
	for i := range list.elems {
		changedValuesBits <<= 1
		if lastVal.elems[i].value != list.elems[i].value {
			changedValuesBits |= 1
		}

	}

	e.buf.WriteUvarint(changedValuesBits << 1)

	// Encode changed values first.
	bitToRead := uint64(1) << (len(list.elems) - 1)
	for i := range list.elems {
		if (bitToRead & changedValuesBits) != 0 {
			e.valueEncoder.Encode(list.elems[i].value)
		}
		bitToRead >>= 1
		if bitToRead == 0 {
			break
		}
	}

	// Store changed values in lastVal after encoding.
	lastVal.EnsureLen(len(list.elems))
	bitToRead = uint64(1) << (len(list.elems) - 1)
	for i := range list.elems {
		if (bitToRead & changedValuesBits) != 0 {
			lastVal.elems[i].value = list.elems[i].value

		}
		bitToRead >>= 1
		if bitToRead == 0 {
			break
		}
	}

	return changedValuesBits != 0
}

func (e *EnvelopeAttributesEncoder) encodeFull(lastVal *EnvelopeAttributes, list *EnvelopeAttributes) {
	e.buf.WriteUvarint(uint64(len(list.elems))<<1 | 0b1)

	// Encode values first.
	for i := range list.elems {
		e.keyEncoder.Encode(list.elems[i].key)
		e.valueEncoder.Encode(list.elems[i].value)
	}

	// Store changed values in lastVal.
	lastVal.EnsureLen(len(list.elems))
	for i := range list.elems {
		lastVal.elems[i].key = list.elems[i].key
		lastVal.elems[i].value = list.elems[i].value
	}
}

func (val1 *EnvelopeAttributes) isSameKeys(val2 *EnvelopeAttributes) bool {
	if len(val1.elems) != len(val2.elems) {
		return false
	}

	for i := range val1.elems {
		// Attribute key.
		if val1.elems[i].key != val2.elems[i].key {
			return false
		}
	}

	return true
}

func (e *EnvelopeAttributesEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBytes(&e.buf)
	if !e.isKeyRecursive {
		e.keyEncoder.CollectColumns(columnSet.At(0))
	}
	if !e.isValueRecursive {
		e.valueEncoder.CollectColumns(columnSet.At(1))
	}
}

type EnvelopeAttributesDecoder struct {
	buf    pkg.BytesReader
	column *pkg.ReadableColumn

	keyDecoder       *encoders.StringDecoder
	isKeyRecursive   bool
	valueDecoder     *encoders.BytesDecoder
	isValueRecursive bool
	lastVal          EnvelopeAttributes
}

// Init is called once in the lifetime of the stream.
func (d *EnvelopeAttributesDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.EnvelopeAttributesDecoder != nil {
		panic("cannot initialize EnvelopeAttributesDecoder: already initialized")
	}
	state.EnvelopeAttributesDecoder = d
	defer func() { state.EnvelopeAttributesDecoder = nil }()

	d.column = columns.Column()

	var err error
	d.keyDecoder = new(encoders.StringDecoder)
	err = d.keyDecoder.Init(nil, columns.AddSubColumn())
	if err != nil {
		return nil
	}
	d.valueDecoder = new(encoders.BytesDecoder)
	err = d.valueDecoder.Init(nil, columns.AddSubColumn())

	return err
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *EnvelopeAttributesDecoder) Continue() {
	d.buf.Reset(d.column.Data())
	if !d.isKeyRecursive {
		d.keyDecoder.Continue()
	}
	if !d.isValueRecursive {
		d.valueDecoder.Continue()
	}
}

func (d *EnvelopeAttributesDecoder) Reset() {
	if !d.isKeyRecursive {
		d.keyDecoder.Reset()
	}
	if !d.isValueRecursive {
		d.valueDecoder.Reset()
	}
	d.lastVal = EnvelopeAttributes{}
}

func (d *EnvelopeAttributesDecoder) Decode(dst *EnvelopeAttributes) error {
	lastVal := &d.lastVal

	countOrChangedValues, err := d.buf.ReadUvarint()
	if err != nil {
		return err
	}
	if countOrChangedValues == 0 {
		// Nothing changed.
		return d.decodeCopyOfLast(lastVal, dst)
	}

	if countOrChangedValues&0b1 == 0 {
		return d.decodeValuesOnly(lastVal, countOrChangedValues>>1, dst)
	}

	if countOrChangedValues&0b1 == 0b1 {
		return d.decodeFull(lastVal, int(countOrChangedValues>>1), dst)
	}
	return pkg.ErrMultimap
}

func (d *EnvelopeAttributesDecoder) decodeCopyOfLast(lastVal *EnvelopeAttributes, dst *EnvelopeAttributes) error {
	dst.EnsureLen(len(lastVal.elems))
	for i := range dst.elems {
		dst.elems[i].key = lastVal.elems[i].key
		dst.elems[i].value = lastVal.elems[i].value
	}
	return nil
}

func (d *EnvelopeAttributesDecoder) decodeValuesOnly(lastVal *EnvelopeAttributes, changedValuesBits uint64, dst *EnvelopeAttributes) error {
	if len(lastVal.elems) == 0 {
		// The last attrs empty so value-only encoding does not make sense.
		return pkg.ErrMultimap
	}

	count := len(lastVal.elems)
	dst.EnsureLen(count)

	// Copy unchanged values from lastVal
	bitToRead := uint64(1) << (len(dst.elems) - 1)
	for i := range dst.elems {
		// Copy the key from lastVal. All keys are the same.
		dst.elems[i].key = lastVal.elems[i].key
		if (bitToRead & changedValuesBits) == 0 {
			// Value is not changed, copy from lastVal.
			dst.elems[i].value = lastVal.elems[i].value
		}
		bitToRead >>= 1
	}

	// Decode changed values
	var err error
	bitToRead = uint64(1) << (len(dst.elems) - 1)
	for i := range dst.elems {
		if (bitToRead & changedValuesBits) != 0 {
			// Value is changed, decode it.
			err = d.valueDecoder.Decode(&dst.elems[i].value)
			if err != nil {
				return err
			}
			// Store the values in lastVal
			lastVal.elems[i].value = dst.elems[i].value
		}
		bitToRead >>= 1
	}

	return nil
}

func (d *EnvelopeAttributesDecoder) decodeFull(lastVal *EnvelopeAttributes, count int, dst *EnvelopeAttributes) error {
	if count < 0 || count >= pkg.MultimapElemCountLimit {
		return pkg.ErrMultimapCountLimit
	}

	dst.EnsureLen(count)
	lastVal.EnsureLen(count)

	// Decode values first.
	var err error
	for i := 0; i < count; i++ {
		err = d.keyDecoder.Decode(&dst.elems[i].key)
		if err != nil {
			return err
		}
		err = d.valueDecoder.Decode(&dst.elems[i].value)
		if err != nil {
			return err
		}

		// Store decoded values in lastVal.
		lastVal.elems[i].key = dst.elems[i].key
		lastVal.elems[i].value = dst.elems[i].value
	}

	return nil
}
