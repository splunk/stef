// Code generated by stefc. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"math"

	"github.com/splunk/stef/go/pkg/schema"
)

// The STEF IDL string. Used for testing.
const allSchemaContent = "// This is Otel/STEF schema: a representation of OpenTelemetry data model\n// as STEF records. Data model is virtually a direct mapping from OpenTelemetry\n// Protobuf IDL for metrics and traces, see: https://github.com/open-telemetry/opentelemetry-proto/tree/main/opentelemetry/proto\n// TODO: add Logs and Profiles.\n\npackage com.example.oteltef\n\nmultimap Attributes {\n  key string dict(AttributeKey)\n  value AnyValue\n}\n\nmultimap EnvelopeAttributes {\n  key string\n  value bytes\n}\n\nmultimap KeyValueList {\n  key string\n  value AnyValue\n}\n\nstruct Resource dict(Resource) {\n  // All SchemaURL fields use the same (shared) dict.\n  SchemaURL string dict(SchemaURL)\n  Attributes Attributes\n  DroppedAttributesCount uint64\n}\n\n// Point represents a metric data point.\nstruct Point {\n  StartTimestamp uint64\n  Timestamp uint64\n  Value PointValue\n  Exemplars []Exemplar\n}\n\nstruct Span {\n  TraceID bytes\n  SpanID bytes\n  TraceState string\n  ParentSpanID bytes\n  Flags uint64\n  Name string dict(SpanName)\n  Kind SpanKind\n  StartTimeUnixNano uint64\n  EndTimeUnixNano uint64\n  Attributes Attributes\n  DroppedAttributesCount uint64\n  Events []Event\n  Links []Link\n  Status SpanStatus\n}\n\nenum SpanKind {\n  Unspecified = 0\n  Internal = 1\n  Server = 2\n  Client = 3\n  Producer = 4\n  Consumer = 5\n}\n\noneof PointValue {\n  Int64 int64\n  Float64 float64\n  Histogram HistogramValue\n  ExpHistogram ExpHistogramValue\n  Summary SummaryValue\n}\n\nstruct Metric dict(Metric) {\n  Name string dict(MetricName)\n  Description string dict(MetricDescription)\n  Unit string dict(MetricUnit)\n  Type MetricType\n  Metadata Attributes\n  HistogramBounds []float64\n  AggregationTemporality AggregationTemporality\n  Monotonic bool\n}\n\nenum MetricType {\n\tGauge = 0\n\tSum = 1\n\tHistogram = 2\n\tExpHistogram = 3\n\tSummary = 4\n}\n\nenum AggregationTemporality {\n    Unspecified = 0\n    Delta = 1\n    Cumulative = 2\n}\n\nstruct Metrics root {\n  Envelope Envelope\n  Metric Metric\n  Resource Resource\n  Scope Scope\n  Attributes Attributes\n  Point Point\n}\n\nstruct Scope dict(Scope) {\n  Name string dict(ScopeName)\n  Version string dict(ScopeVersion)\n  SchemaURL string dict(SchemaURL)\n  Attributes Attributes\n  DroppedAttributesCount uint64\n}\n\nstruct Link {\n  TraceID bytes\n  SpanID bytes\n  TraceState string\n  Flags uint64\n  Attributes Attributes\n  DroppedAttributesCount uint64\n}\n\nstruct HistogramValue {\n  Count int64\n  Sum float64 optional\n  Min float64 optional\n  Max float64 optional\n  BucketCounts []uint64\n}\n\nstruct ExpHistogramValue {\n  Count uint64\n  Sum float64 optional\n  Min float64 optional\n  Max float64 optional\n  Scale int64\n  ZeroCount uint64\n  PositiveBuckets ExpHistogramBuckets\n  NegativeBuckets ExpHistogramBuckets\n  ZeroThreshold float64\n}\n\nstruct ExpHistogramBuckets {\n  Offset int64\n  BucketCounts []uint64\n}\n\nstruct SummaryValue {\n  Count uint64\n  Sum float64\n  QuantileValues []QuantileValue\n}\n\nstruct QuantileValue {\n  Quantile float64\n  Value float64\n}\n\noneof AnyValue {\n  String string dict(AnyValueString)\n  Bool bool\n  Int64 int64\n  Float64 float64\n  Array []AnyValue\n  KVList KeyValueList\n  Bytes bytes\n}\n\nstruct Event {\n  Name string dict(SpanEventName)\n  TimeUnixNano uint64\n  Attributes Attributes\n  DroppedAttributesCount uint64\n}\n\nstruct SpanStatus {\n  Message string\n  Code uint64\n}\n\nstruct Spans root {\n  Envelope Envelope\n  Resource Resource\n  Scope Scope\n  Span Span\n}\n\nstruct Envelope {\n  Attributes EnvelopeAttributes\n}\n\nstruct Exemplar {\n  Timestamp uint64\n  Value ExemplarValue\n  SpanID bytes\n  TraceID bytes\n  FilteredAttributes Attributes\n}\n\noneof ExemplarValue {\n  Int64 int64\n  Float64 float64\n}\n"

// StructFieldCounts is used to keep track of the number of fields in each struct
// of an associated schema and to iterate over the fields.
// Field counts will be fetched from the iterator if the struct is encountered
// for the first time and then remembered for subsequent calls (for the case when
// the same struct is used multiple times in the schema).
type StructFieldCounts struct {
	countAnyValue            uint // Number of fields in AnyValue struct.
	countEnvelope            uint // Number of fields in Envelope struct.
	countEvent               uint // Number of fields in Event struct.
	countExemplar            uint // Number of fields in Exemplar struct.
	countExemplarValue       uint // Number of fields in ExemplarValue struct.
	countExpHistogramBuckets uint // Number of fields in ExpHistogramBuckets struct.
	countExpHistogramValue   uint // Number of fields in ExpHistogramValue struct.
	countHistogramValue      uint // Number of fields in HistogramValue struct.
	countLink                uint // Number of fields in Link struct.
	countMetric              uint // Number of fields in Metric struct.
	countMetrics             uint // Number of fields in Metrics struct.
	countPoint               uint // Number of fields in Point struct.
	countPointValue          uint // Number of fields in PointValue struct.
	countQuantileValue       uint // Number of fields in QuantileValue struct.
	countResource            uint // Number of fields in Resource struct.
	countScope               uint // Number of fields in Scope struct.
	countSpan                uint // Number of fields in Span struct.
	countSpanStatus          uint // Number of fields in SpanStatus struct.
	countSpans               uint // Number of fields in Spans struct.
	countSummaryValue        uint // Number of fields in SummaryValue struct.

	// OverrideSchema is set if codec should perform a translation from specified schema.
	overrideSchema     bool
	overrideSchemaIter schema.WireSchemaIter
}

func (s *StructFieldCounts) Init(overrideSchema *schema.WireSchema) {
	if overrideSchema != nil {
		s.overrideSchema = true
		s.overrideSchemaIter = schema.NewWireSchemaIter(overrideSchema)
	}

	// Initialize all struct field counts to math.MaxUint, indicating that the field count
	// is not known.
	s.countAnyValue = math.MaxUint
	s.countEnvelope = math.MaxUint
	s.countEvent = math.MaxUint
	s.countExemplar = math.MaxUint
	s.countExemplarValue = math.MaxUint
	s.countExpHistogramBuckets = math.MaxUint
	s.countExpHistogramValue = math.MaxUint
	s.countHistogramValue = math.MaxUint
	s.countLink = math.MaxUint
	s.countMetric = math.MaxUint
	s.countMetrics = math.MaxUint
	s.countPoint = math.MaxUint
	s.countPointValue = math.MaxUint
	s.countQuantileValue = math.MaxUint
	s.countResource = math.MaxUint
	s.countScope = math.MaxUint
	s.countSpan = math.MaxUint
	s.countSpanStatus = math.MaxUint
	s.countSpans = math.MaxUint
	s.countSummaryValue = math.MaxUint

}

// Get the field count for a specific struct/oneof.
// It is expected that the order in which this function is called matches
// the order in which the WireSchemaIter iterates over the structs (see WireSchema).
func getFieldCount(fieldCount *uint, fieldName string, overrideSchema bool, overrideSchemaIter *schema.WireSchemaIter, defaultCount uint) (uint, error) {
	if *fieldCount == math.MaxUint {
		// Field count is not known, we need to determine it.
		if overrideSchema {
			// Get the field count from the override schema.
			var err error
			*fieldCount, err = overrideSchemaIter.NextFieldCount()
			if err != nil {
				return 0, fmt.Errorf("cannot find struct %s in override schema: %v", fieldName, err)
			}
		} else {
			// Schema is not overridden. Use the compile-time struct field count.
			*fieldCount = defaultCount
		}
	} else {
		// Field count is already known, return it.
	}
	return *fieldCount, nil
}

func (s *StructFieldCounts) AnyValueFieldCount() (uint, error) {
	return getFieldCount(&s.countAnyValue, "AnyValue", s.overrideSchema, &s.overrideSchemaIter, 7)
}

func (s *StructFieldCounts) EnvelopeFieldCount() (uint, error) {
	return getFieldCount(&s.countEnvelope, "Envelope", s.overrideSchema, &s.overrideSchemaIter, 1)
}

func (s *StructFieldCounts) EventFieldCount() (uint, error) {
	return getFieldCount(&s.countEvent, "Event", s.overrideSchema, &s.overrideSchemaIter, 4)
}

func (s *StructFieldCounts) ExemplarFieldCount() (uint, error) {
	return getFieldCount(&s.countExemplar, "Exemplar", s.overrideSchema, &s.overrideSchemaIter, 5)
}

func (s *StructFieldCounts) ExemplarValueFieldCount() (uint, error) {
	return getFieldCount(&s.countExemplarValue, "ExemplarValue", s.overrideSchema, &s.overrideSchemaIter, 2)
}

func (s *StructFieldCounts) ExpHistogramBucketsFieldCount() (uint, error) {
	return getFieldCount(&s.countExpHistogramBuckets, "ExpHistogramBuckets", s.overrideSchema, &s.overrideSchemaIter, 2)
}

func (s *StructFieldCounts) ExpHistogramValueFieldCount() (uint, error) {
	return getFieldCount(&s.countExpHistogramValue, "ExpHistogramValue", s.overrideSchema, &s.overrideSchemaIter, 9)
}

func (s *StructFieldCounts) HistogramValueFieldCount() (uint, error) {
	return getFieldCount(&s.countHistogramValue, "HistogramValue", s.overrideSchema, &s.overrideSchemaIter, 5)
}

func (s *StructFieldCounts) LinkFieldCount() (uint, error) {
	return getFieldCount(&s.countLink, "Link", s.overrideSchema, &s.overrideSchemaIter, 6)
}

func (s *StructFieldCounts) MetricFieldCount() (uint, error) {
	return getFieldCount(&s.countMetric, "Metric", s.overrideSchema, &s.overrideSchemaIter, 8)
}

func (s *StructFieldCounts) MetricsFieldCount() (uint, error) {
	return getFieldCount(&s.countMetrics, "Metrics", s.overrideSchema, &s.overrideSchemaIter, 6)
}

func (s *StructFieldCounts) PointFieldCount() (uint, error) {
	return getFieldCount(&s.countPoint, "Point", s.overrideSchema, &s.overrideSchemaIter, 4)
}

func (s *StructFieldCounts) PointValueFieldCount() (uint, error) {
	return getFieldCount(&s.countPointValue, "PointValue", s.overrideSchema, &s.overrideSchemaIter, 5)
}

func (s *StructFieldCounts) QuantileValueFieldCount() (uint, error) {
	return getFieldCount(&s.countQuantileValue, "QuantileValue", s.overrideSchema, &s.overrideSchemaIter, 2)
}

func (s *StructFieldCounts) ResourceFieldCount() (uint, error) {
	return getFieldCount(&s.countResource, "Resource", s.overrideSchema, &s.overrideSchemaIter, 3)
}

func (s *StructFieldCounts) ScopeFieldCount() (uint, error) {
	return getFieldCount(&s.countScope, "Scope", s.overrideSchema, &s.overrideSchemaIter, 5)
}

func (s *StructFieldCounts) SpanFieldCount() (uint, error) {
	return getFieldCount(&s.countSpan, "Span", s.overrideSchema, &s.overrideSchemaIter, 14)
}

func (s *StructFieldCounts) SpanStatusFieldCount() (uint, error) {
	return getFieldCount(&s.countSpanStatus, "SpanStatus", s.overrideSchema, &s.overrideSchemaIter, 2)
}

func (s *StructFieldCounts) SpansFieldCount() (uint, error) {
	return getFieldCount(&s.countSpans, "Spans", s.overrideSchema, &s.overrideSchemaIter, 4)
}

func (s *StructFieldCounts) SummaryValueFieldCount() (uint, error) {
	return getFieldCount(&s.countSummaryValue, "SummaryValue", s.overrideSchema, &s.overrideSchemaIter, 3)
}

func (s *StructFieldCounts) AllFetched() bool {
	return s.overrideSchema == false || s.overrideSchemaIter.Done()
}

type Allocators struct {
	AnyValue            AnyValueAllocator
	Envelope            EnvelopeAllocator
	Event               EventAllocator
	Exemplar            ExemplarAllocator
	ExemplarValue       ExemplarValueAllocator
	ExpHistogramBuckets ExpHistogramBucketsAllocator
	ExpHistogramValue   ExpHistogramValueAllocator
	HistogramValue      HistogramValueAllocator
	Link                LinkAllocator
	Metric              MetricAllocator
	Metrics             MetricsAllocator
	Point               PointAllocator
	PointValue          PointValueAllocator
	QuantileValue       QuantileValueAllocator
	Resource            ResourceAllocator
	Scope               ScopeAllocator
	Span                SpanAllocator
	SpanStatus          SpanStatusAllocator
	Spans               SpansAllocator
	SummaryValue        SummaryValueAllocator
}
