// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type ExpHistogramValue struct {
	count           uint64
	sum             float64
	min             float64
	max             float64
	scale           int64
	zeroCount       uint64
	positiveBuckets ExpHistogramBuckets
	negativeBuckets ExpHistogramBuckets
	zeroThreshold   float64

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields

	// Field presence bits.
	// Fields which are present have the corresponding bit set, see fieldPresentExpHistogramValue* consts below.
	optionalFieldsPresent uint64
}

const ExpHistogramValueStructName = "ExpHistogramValue"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedExpHistogramValueCount = uint64(1 << iota)
	fieldModifiedExpHistogramValueSum
	fieldModifiedExpHistogramValueMin
	fieldModifiedExpHistogramValueMax
	fieldModifiedExpHistogramValueScale
	fieldModifiedExpHistogramValueZeroCount
	fieldModifiedExpHistogramValuePositiveBuckets
	fieldModifiedExpHistogramValueNegativeBuckets
	fieldModifiedExpHistogramValueZeroThreshold
)

// Bitmasks for "present" flags for optional fields.
const (
	fieldPresentExpHistogramValueSum = uint64(1 << iota)
	fieldPresentExpHistogramValueMin
	fieldPresentExpHistogramValueMax
)

// Init must be called once, before the ExpHistogramValue is used.
func (s *ExpHistogramValue) Init() {
	s.init(nil, 0)
}

func NewExpHistogramValue() *ExpHistogramValue {
	var s ExpHistogramValue
	s.init(nil, 0)
	return &s
}

func (s *ExpHistogramValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.positiveBuckets.init(&s.modifiedFields, fieldModifiedExpHistogramValuePositiveBuckets)
	s.negativeBuckets.init(&s.modifiedFields, fieldModifiedExpHistogramValueNegativeBuckets)
}

func (s *ExpHistogramValue) Count() uint64 {
	return s.count
}

// SetCount sets the value of Count field.
func (s *ExpHistogramValue) SetCount(v uint64) {
	if !pkg.Uint64Equal(s.count, v) {
		s.count = v
		s.markCountModified()
	}
}

func (s *ExpHistogramValue) markCountModified() {
	s.modifiedFields.markModified(fieldModifiedExpHistogramValueCount)
}

// IsCountModified returns true the value of Count field was modified since
// ExpHistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramValue) IsCountModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramValueCount != 0
}

func (s *ExpHistogramValue) Sum() float64 {
	return s.sum
}

// SetSum sets the value of Sum field.
func (s *ExpHistogramValue) SetSum(v float64) {
	if !pkg.Float64Equal(s.sum, v) || s.optionalFieldsPresent&fieldPresentExpHistogramValueSum == 0 {
		s.sum = v
		s.markSumModified()
		s.optionalFieldsPresent |= fieldPresentExpHistogramValueSum
	}
}

// UnsetSum unsets the precense flag of Sum field. A subsequent HasSum() will return false.
func (s *ExpHistogramValue) UnsetSum() {
	if s.optionalFieldsPresent&fieldPresentExpHistogramValueSum != 0 {
		s.optionalFieldsPresent &= ^fieldPresentExpHistogramValueSum
		s.markSumModified()
	}
}

// HasSum returns true if the presence flag Sum field is set and false if it is unset.
func (s *ExpHistogramValue) HasSum() bool {
	return s.optionalFieldsPresent&fieldPresentExpHistogramValueSum != 0
}

func (s *ExpHistogramValue) markSumModified() {
	s.modifiedFields.markModified(fieldModifiedExpHistogramValueSum)
}

// IsSumModified returns true the value of Sum field was modified since
// ExpHistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramValue) IsSumModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramValueSum != 0
}

func (s *ExpHistogramValue) Min() float64 {
	return s.min
}

// SetMin sets the value of Min field.
func (s *ExpHistogramValue) SetMin(v float64) {
	if !pkg.Float64Equal(s.min, v) || s.optionalFieldsPresent&fieldPresentExpHistogramValueMin == 0 {
		s.min = v
		s.markMinModified()
		s.optionalFieldsPresent |= fieldPresentExpHistogramValueMin
	}
}

// UnsetMin unsets the precense flag of Min field. A subsequent HasMin() will return false.
func (s *ExpHistogramValue) UnsetMin() {
	if s.optionalFieldsPresent&fieldPresentExpHistogramValueMin != 0 {
		s.optionalFieldsPresent &= ^fieldPresentExpHistogramValueMin
		s.markMinModified()
	}
}

// HasMin returns true if the presence flag Min field is set and false if it is unset.
func (s *ExpHistogramValue) HasMin() bool {
	return s.optionalFieldsPresent&fieldPresentExpHistogramValueMin != 0
}

func (s *ExpHistogramValue) markMinModified() {
	s.modifiedFields.markModified(fieldModifiedExpHistogramValueMin)
}

// IsMinModified returns true the value of Min field was modified since
// ExpHistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramValue) IsMinModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramValueMin != 0
}

func (s *ExpHistogramValue) Max() float64 {
	return s.max
}

// SetMax sets the value of Max field.
func (s *ExpHistogramValue) SetMax(v float64) {
	if !pkg.Float64Equal(s.max, v) || s.optionalFieldsPresent&fieldPresentExpHistogramValueMax == 0 {
		s.max = v
		s.markMaxModified()
		s.optionalFieldsPresent |= fieldPresentExpHistogramValueMax
	}
}

// UnsetMax unsets the precense flag of Max field. A subsequent HasMax() will return false.
func (s *ExpHistogramValue) UnsetMax() {
	if s.optionalFieldsPresent&fieldPresentExpHistogramValueMax != 0 {
		s.optionalFieldsPresent &= ^fieldPresentExpHistogramValueMax
		s.markMaxModified()
	}
}

// HasMax returns true if the presence flag Max field is set and false if it is unset.
func (s *ExpHistogramValue) HasMax() bool {
	return s.optionalFieldsPresent&fieldPresentExpHistogramValueMax != 0
}

func (s *ExpHistogramValue) markMaxModified() {
	s.modifiedFields.markModified(fieldModifiedExpHistogramValueMax)
}

// IsMaxModified returns true the value of Max field was modified since
// ExpHistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramValue) IsMaxModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramValueMax != 0
}

func (s *ExpHistogramValue) Scale() int64 {
	return s.scale
}

// SetScale sets the value of Scale field.
func (s *ExpHistogramValue) SetScale(v int64) {
	if !pkg.Int64Equal(s.scale, v) {
		s.scale = v
		s.markScaleModified()
	}
}

func (s *ExpHistogramValue) markScaleModified() {
	s.modifiedFields.markModified(fieldModifiedExpHistogramValueScale)
}

// IsScaleModified returns true the value of Scale field was modified since
// ExpHistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramValue) IsScaleModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramValueScale != 0
}

func (s *ExpHistogramValue) ZeroCount() uint64 {
	return s.zeroCount
}

// SetZeroCount sets the value of ZeroCount field.
func (s *ExpHistogramValue) SetZeroCount(v uint64) {
	if !pkg.Uint64Equal(s.zeroCount, v) {
		s.zeroCount = v
		s.markZeroCountModified()
	}
}

func (s *ExpHistogramValue) markZeroCountModified() {
	s.modifiedFields.markModified(fieldModifiedExpHistogramValueZeroCount)
}

// IsZeroCountModified returns true the value of ZeroCount field was modified since
// ExpHistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramValue) IsZeroCountModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramValueZeroCount != 0
}

func (s *ExpHistogramValue) PositiveBuckets() *ExpHistogramBuckets {
	return &s.positiveBuckets
}

// IsPositiveBucketsModified returns true the value of PositiveBuckets field was modified since
// ExpHistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramValue) IsPositiveBucketsModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramValuePositiveBuckets != 0
}

func (s *ExpHistogramValue) NegativeBuckets() *ExpHistogramBuckets {
	return &s.negativeBuckets
}

// IsNegativeBucketsModified returns true the value of NegativeBuckets field was modified since
// ExpHistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramValue) IsNegativeBucketsModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramValueNegativeBuckets != 0
}

func (s *ExpHistogramValue) ZeroThreshold() float64 {
	return s.zeroThreshold
}

// SetZeroThreshold sets the value of ZeroThreshold field.
func (s *ExpHistogramValue) SetZeroThreshold(v float64) {
	if !pkg.Float64Equal(s.zeroThreshold, v) {
		s.zeroThreshold = v
		s.markZeroThresholdModified()
	}
}

func (s *ExpHistogramValue) markZeroThresholdModified() {
	s.modifiedFields.markModified(fieldModifiedExpHistogramValueZeroThreshold)
}

// IsZeroThresholdModified returns true the value of ZeroThreshold field was modified since
// ExpHistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramValue) IsZeroThresholdModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramValueZeroThreshold != 0
}

func (s *ExpHistogramValue) markModifiedRecursively() {

	s.positiveBuckets.markModifiedRecursively()

	s.negativeBuckets.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedExpHistogramValueCount |
			fieldModifiedExpHistogramValueSum |
			fieldModifiedExpHistogramValueMin |
			fieldModifiedExpHistogramValueMax |
			fieldModifiedExpHistogramValueScale |
			fieldModifiedExpHistogramValueZeroCount |
			fieldModifiedExpHistogramValuePositiveBuckets |
			fieldModifiedExpHistogramValueNegativeBuckets |
			fieldModifiedExpHistogramValueZeroThreshold | 0
}

func (s *ExpHistogramValue) markUnmodifiedRecursively() {

	if s.IsCountModified() {
	}

	if s.IsSumModified() {
	}

	if s.IsMinModified() {
	}

	if s.IsMaxModified() {
	}

	if s.IsScaleModified() {
	}

	if s.IsZeroCountModified() {
	}

	if s.IsPositiveBucketsModified() {
		s.positiveBuckets.markUnmodifiedRecursively()
	}

	if s.IsNegativeBucketsModified() {
		s.negativeBuckets.markUnmodifiedRecursively()
	}

	if s.IsZeroThresholdModified() {
	}

	s.modifiedFields.mask = 0
}

// markDiffModified marks fields in this struct modified if they differ from
// the corresponding fields in v.
func (s *ExpHistogramValue) markDiffModified(v *ExpHistogramValue) (modified bool) {
	if !pkg.Uint64Equal(s.count, v.count) {
		s.markCountModified()
		modified = true
	}

	if !pkg.Float64Equal(s.sum, v.sum) || s.optionalFieldsPresent&fieldPresentExpHistogramValueSum == 0 {
		s.markSumModified()
		s.optionalFieldsPresent |= fieldPresentExpHistogramValueSum
		modified = true
	}

	if !pkg.Float64Equal(s.min, v.min) || s.optionalFieldsPresent&fieldPresentExpHistogramValueMin == 0 {
		s.markMinModified()
		s.optionalFieldsPresent |= fieldPresentExpHistogramValueMin
		modified = true
	}

	if !pkg.Float64Equal(s.max, v.max) || s.optionalFieldsPresent&fieldPresentExpHistogramValueMax == 0 {
		s.markMaxModified()
		s.optionalFieldsPresent |= fieldPresentExpHistogramValueMax
		modified = true
	}

	if !pkg.Int64Equal(s.scale, v.scale) {
		s.markScaleModified()
		modified = true
	}

	if !pkg.Uint64Equal(s.zeroCount, v.zeroCount) {
		s.markZeroCountModified()
		modified = true
	}

	if s.positiveBuckets.markDiffModified(&v.positiveBuckets) {
		s.modifiedFields.markModified(fieldModifiedExpHistogramValuePositiveBuckets)
		modified = true
	}

	if s.negativeBuckets.markDiffModified(&v.negativeBuckets) {
		s.modifiedFields.markModified(fieldModifiedExpHistogramValueNegativeBuckets)
		modified = true
	}

	if !pkg.Float64Equal(s.zeroThreshold, v.zeroThreshold) {
		s.markZeroThresholdModified()
		modified = true
	}

	return modified
}

func (s *ExpHistogramValue) Clone() ExpHistogramValue {
	return ExpHistogramValue{
		count:           s.count,
		sum:             s.sum,
		min:             s.min,
		max:             s.max,
		scale:           s.scale,
		zeroCount:       s.zeroCount,
		positiveBuckets: s.positiveBuckets.Clone(),
		negativeBuckets: s.negativeBuckets.Clone(),
		zeroThreshold:   s.zeroThreshold,
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *ExpHistogramValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.positiveBuckets.byteSize() + s.negativeBuckets.byteSize() + 0
}

func copyExpHistogramValue(dst *ExpHistogramValue, src *ExpHistogramValue) {
	dst.SetCount(src.count)
	if src.HasSum() {
		dst.SetSum(src.sum)
	} else {
		dst.UnsetSum()
	}

	if src.HasMin() {
		dst.SetMin(src.min)
	} else {
		dst.UnsetMin()
	}

	if src.HasMax() {
		dst.SetMax(src.max)
	} else {
		dst.UnsetMax()
	}

	dst.SetScale(src.scale)
	dst.SetZeroCount(src.zeroCount)
	copyExpHistogramBuckets(&dst.positiveBuckets, &src.positiveBuckets)
	copyExpHistogramBuckets(&dst.negativeBuckets, &src.negativeBuckets)
	dst.SetZeroThreshold(src.zeroThreshold)
}

// CopyFrom() performs a deep copy from src.
func (s *ExpHistogramValue) CopyFrom(src *ExpHistogramValue) {
	copyExpHistogramValue(s, src)
}

func (s *ExpHistogramValue) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *ExpHistogramValue) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.positiveBuckets.markUnmodified()
	s.negativeBuckets.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *ExpHistogramValue) mutateRandom(random *rand.Rand) {
	const fieldCount = max(9, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
	if random.IntN(fieldCount) == 0 {
		s.SetCount(pkg.Uint64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetSum(pkg.Float64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetMin(pkg.Float64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetMax(pkg.Float64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetScale(pkg.Int64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetZeroCount(pkg.Uint64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.positiveBuckets.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.negativeBuckets.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.SetZeroThreshold(pkg.Float64Random(random))
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *ExpHistogramValue) IsEqual(right *ExpHistogramValue) bool {
	// Compare Count field.
	if !pkg.Uint64Equal(s.count, right.count) {
		return false
	}
	// Compare Sum field.
	sSumPresent := s.optionalFieldsPresent&fieldPresentExpHistogramValueSum != 0
	rightSumPresent := right.optionalFieldsPresent&fieldPresentExpHistogramValueSum != 0
	if sSumPresent != rightSumPresent {
		return false
	}
	if sSumPresent { // Compare only if Sum field is present
		if !pkg.Float64Equal(s.sum, right.sum) {
			return false
		}
	}

	// Compare Min field.
	sMinPresent := s.optionalFieldsPresent&fieldPresentExpHistogramValueMin != 0
	rightMinPresent := right.optionalFieldsPresent&fieldPresentExpHistogramValueMin != 0
	if sMinPresent != rightMinPresent {
		return false
	}
	if sMinPresent { // Compare only if Min field is present
		if !pkg.Float64Equal(s.min, right.min) {
			return false
		}
	}

	// Compare Max field.
	sMaxPresent := s.optionalFieldsPresent&fieldPresentExpHistogramValueMax != 0
	rightMaxPresent := right.optionalFieldsPresent&fieldPresentExpHistogramValueMax != 0
	if sMaxPresent != rightMaxPresent {
		return false
	}
	if sMaxPresent { // Compare only if Max field is present
		if !pkg.Float64Equal(s.max, right.max) {
			return false
		}
	}

	// Compare Scale field.
	if !pkg.Int64Equal(s.scale, right.scale) {
		return false
	}
	// Compare ZeroCount field.
	if !pkg.Uint64Equal(s.zeroCount, right.zeroCount) {
		return false
	}
	// Compare PositiveBuckets field.
	if !s.positiveBuckets.IsEqual(&right.positiveBuckets) {
		return false
	}
	// Compare NegativeBuckets field.
	if !s.negativeBuckets.IsEqual(&right.negativeBuckets) {
		return false
	}
	// Compare ZeroThreshold field.
	if !pkg.Float64Equal(s.zeroThreshold, right.zeroThreshold) {
		return false
	}

	return true
}

func ExpHistogramValueEqual(left, right *ExpHistogramValue) bool {
	return left.IsEqual(right)
}

// CmpExpHistogramValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpExpHistogramValue(left, right *ExpHistogramValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Count field.
	if c := pkg.Uint64Compare(left.count, right.count); c != 0 {
		return c
	}

	// Compare Sum field.
	leftSumPresent := left.optionalFieldsPresent&fieldPresentExpHistogramValueSum != 0
	rightSumPresent := right.optionalFieldsPresent&fieldPresentExpHistogramValueSum != 0
	if leftSumPresent != rightSumPresent {
		if leftSumPresent {
			return 1
		}
		return -1
	}
	if c := pkg.Float64Compare(left.sum, right.sum); c != 0 {
		return c
	}

	// Compare Min field.
	leftMinPresent := left.optionalFieldsPresent&fieldPresentExpHistogramValueMin != 0
	rightMinPresent := right.optionalFieldsPresent&fieldPresentExpHistogramValueMin != 0
	if leftMinPresent != rightMinPresent {
		if leftMinPresent {
			return 1
		}
		return -1
	}
	if c := pkg.Float64Compare(left.min, right.min); c != 0 {
		return c
	}

	// Compare Max field.
	leftMaxPresent := left.optionalFieldsPresent&fieldPresentExpHistogramValueMax != 0
	rightMaxPresent := right.optionalFieldsPresent&fieldPresentExpHistogramValueMax != 0
	if leftMaxPresent != rightMaxPresent {
		if leftMaxPresent {
			return 1
		}
		return -1
	}
	if c := pkg.Float64Compare(left.max, right.max); c != 0 {
		return c
	}

	// Compare Scale field.
	if c := pkg.Int64Compare(left.scale, right.scale); c != 0 {
		return c
	}

	// Compare ZeroCount field.
	if c := pkg.Uint64Compare(left.zeroCount, right.zeroCount); c != 0 {
		return c
	}

	// Compare PositiveBuckets field.
	if c := CmpExpHistogramBuckets(&left.positiveBuckets, &right.positiveBuckets); c != 0 {
		return c
	}

	// Compare NegativeBuckets field.
	if c := CmpExpHistogramBuckets(&left.negativeBuckets, &right.negativeBuckets); c != 0 {
		return c
	}

	// Compare ZeroThreshold field.
	if c := pkg.Float64Compare(left.zeroThreshold, right.zeroThreshold); c != 0 {
		return c
	}

	return 0
}

// ExpHistogramValueEncoder implements encoding of ExpHistogramValue
type ExpHistogramValueEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	countEncoder encoders.Uint64Encoder

	sumEncoder encoders.Float64Encoder

	minEncoder encoders.Float64Encoder

	maxEncoder encoders.Float64Encoder

	scaleEncoder encoders.Int64Encoder

	zeroCountEncoder encoders.Uint64Encoder

	positiveBucketsEncoder     *ExpHistogramBucketsEncoder
	isPositiveBucketsRecursive bool // Indicates PositiveBuckets field's type is recursive.

	negativeBucketsEncoder     *ExpHistogramBucketsEncoder
	isNegativeBucketsRecursive bool // Indicates NegativeBuckets field's type is recursive.

	zeroThresholdEncoder encoders.Float64Encoder

	keepFieldMask uint64
	fieldCount    uint
}

func (e *ExpHistogramValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.ExpHistogramValueEncoder != nil {
		panic("cannot initialize ExpHistogramValueEncoder: already initialized")
	}
	state.ExpHistogramValueEncoder = e
	defer func() { state.ExpHistogramValueEncoder = nil }()

	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("ExpHistogramValue")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "ExpHistogramValue")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 9
		e.keepFieldMask = ^uint64(0)
	}

	var err error

	// Init encoder for Count field.
	if e.fieldCount <= 0 {
		// Count and all subsequent fields are skipped.
		return nil
	}
	err = e.countEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Sum field.
	if e.fieldCount <= 1 {
		// Sum and all subsequent fields are skipped.
		return nil
	}
	err = e.sumEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Min field.
	if e.fieldCount <= 2 {
		// Min and all subsequent fields are skipped.
		return nil
	}
	err = e.minEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Max field.
	if e.fieldCount <= 3 {
		// Max and all subsequent fields are skipped.
		return nil
	}
	err = e.maxEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Scale field.
	if e.fieldCount <= 4 {
		// Scale and all subsequent fields are skipped.
		return nil
	}
	err = e.scaleEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for ZeroCount field.
	if e.fieldCount <= 5 {
		// ZeroCount and all subsequent fields are skipped.
		return nil
	}
	err = e.zeroCountEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for PositiveBuckets field.
	if e.fieldCount <= 6 {
		// PositiveBuckets and all subsequent fields are skipped.
		return nil
	}
	if state.ExpHistogramBucketsEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.positiveBucketsEncoder = state.ExpHistogramBucketsEncoder
		e.isPositiveBucketsRecursive = true
	} else {
		e.positiveBucketsEncoder = new(ExpHistogramBucketsEncoder)
		err = e.positiveBucketsEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for NegativeBuckets field.
	if e.fieldCount <= 7 {
		// NegativeBuckets and all subsequent fields are skipped.
		return nil
	}
	if state.ExpHistogramBucketsEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.negativeBucketsEncoder = state.ExpHistogramBucketsEncoder
		e.isNegativeBucketsRecursive = true
	} else {
		e.negativeBucketsEncoder = new(ExpHistogramBucketsEncoder)
		err = e.negativeBucketsEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for ZeroThreshold field.
	if e.fieldCount <= 8 {
		// ZeroThreshold and all subsequent fields are skipped.
		return nil
	}
	err = e.zeroThresholdEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *ExpHistogramValueEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.countEncoder.Reset()
	e.sumEncoder.Reset()
	e.minEncoder.Reset()
	e.maxEncoder.Reset()
	e.scaleEncoder.Reset()
	e.zeroCountEncoder.Reset()

	if !e.isPositiveBucketsRecursive {
		e.positiveBucketsEncoder.Reset()
	}

	if !e.isNegativeBucketsRecursive {
		e.negativeBucketsEncoder.Reset()
	}

	e.zeroThresholdEncoder.Reset()
}

// Encode encodes val into buf
func (e *ExpHistogramValueEncoder) Encode(val *ExpHistogramValue) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedExpHistogramValueCount |
				fieldModifiedExpHistogramValueSum |
				fieldModifiedExpHistogramValueMin |
				fieldModifiedExpHistogramValueMax |
				fieldModifiedExpHistogramValueScale |
				fieldModifiedExpHistogramValueZeroCount |
				fieldModifiedExpHistogramValuePositiveBuckets |
				fieldModifiedExpHistogramValueNegativeBuckets |
				fieldModifiedExpHistogramValueZeroThreshold | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Write bits to indicate which optional fields are set.
	e.buf.WriteBits(val.optionalFieldsPresent, 3)
	bitCount += 3

	// Encode modified, present fields.

	if fieldMask&fieldModifiedExpHistogramValueCount != 0 {
		// Encode Count
		e.countEncoder.Encode(val.count)
	}

	if fieldMask&fieldModifiedExpHistogramValueSum != 0 &&
		val.optionalFieldsPresent&fieldPresentExpHistogramValueSum != 0 {
		// Encode Sum
		e.sumEncoder.Encode(val.sum)
	}

	if fieldMask&fieldModifiedExpHistogramValueMin != 0 &&
		val.optionalFieldsPresent&fieldPresentExpHistogramValueMin != 0 {
		// Encode Min
		e.minEncoder.Encode(val.min)
	}

	if fieldMask&fieldModifiedExpHistogramValueMax != 0 &&
		val.optionalFieldsPresent&fieldPresentExpHistogramValueMax != 0 {
		// Encode Max
		e.maxEncoder.Encode(val.max)
	}

	if fieldMask&fieldModifiedExpHistogramValueScale != 0 {
		// Encode Scale
		e.scaleEncoder.Encode(val.scale)
	}

	if fieldMask&fieldModifiedExpHistogramValueZeroCount != 0 {
		// Encode ZeroCount
		e.zeroCountEncoder.Encode(val.zeroCount)
	}

	if fieldMask&fieldModifiedExpHistogramValuePositiveBuckets != 0 {
		// Encode PositiveBuckets
		e.positiveBucketsEncoder.Encode(&val.positiveBuckets)
	}

	if fieldMask&fieldModifiedExpHistogramValueNegativeBuckets != 0 {
		// Encode NegativeBuckets
		e.negativeBucketsEncoder.Encode(&val.negativeBuckets)
	}

	if fieldMask&fieldModifiedExpHistogramValueZeroThreshold != 0 {
		// Encode ZeroThreshold
		e.zeroThresholdEncoder.Encode(val.zeroThreshold)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *ExpHistogramValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Count field.
	if e.fieldCount <= 0 {
		return // Count and subsequent fields are skipped.
	}

	e.countEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Sum field.
	if e.fieldCount <= 1 {
		return // Sum and subsequent fields are skipped.
	}

	e.sumEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Min field.
	if e.fieldCount <= 2 {
		return // Min and subsequent fields are skipped.
	}

	e.minEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Max field.
	if e.fieldCount <= 3 {
		return // Max and subsequent fields are skipped.
	}

	e.maxEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Scale field.
	if e.fieldCount <= 4 {
		return // Scale and subsequent fields are skipped.
	}

	e.scaleEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect ZeroCount field.
	if e.fieldCount <= 5 {
		return // ZeroCount and subsequent fields are skipped.
	}

	e.zeroCountEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect PositiveBuckets field.
	if e.fieldCount <= 6 {
		return // PositiveBuckets and subsequent fields are skipped.
	}
	if !e.isPositiveBucketsRecursive {
		e.positiveBucketsEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect NegativeBuckets field.
	if e.fieldCount <= 7 {
		return // NegativeBuckets and subsequent fields are skipped.
	}
	if !e.isNegativeBucketsRecursive {
		e.negativeBucketsEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect ZeroThreshold field.
	if e.fieldCount <= 8 {
		return // ZeroThreshold and subsequent fields are skipped.
	}

	e.zeroThresholdEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// ExpHistogramValueDecoder implements decoding of ExpHistogramValue
type ExpHistogramValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *ExpHistogramValue
	lastVal    ExpHistogramValue
	fieldCount uint

	countDecoder encoders.Uint64Decoder

	sumDecoder encoders.Float64Decoder

	minDecoder encoders.Float64Decoder

	maxDecoder encoders.Float64Decoder

	scaleDecoder encoders.Int64Decoder

	zeroCountDecoder encoders.Uint64Decoder

	positiveBucketsDecoder     *ExpHistogramBucketsDecoder
	isPositiveBucketsRecursive bool

	negativeBucketsDecoder     *ExpHistogramBucketsDecoder
	isNegativeBucketsRecursive bool

	zeroThresholdDecoder encoders.Float64Decoder
}

// Init is called once in the lifetime of the stream.
func (d *ExpHistogramValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.ExpHistogramValueDecoder != nil {
		panic("cannot initialize ExpHistogramValueDecoder: already initialized")
	}
	state.ExpHistogramValueDecoder = d
	defer func() { state.ExpHistogramValueDecoder = nil }()

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("ExpHistogramValue")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "ExpHistogramValue")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 9
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // Count and subsequent fields are skipped.
	}
	err = d.countDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Sum and subsequent fields are skipped.
	}
	err = d.sumDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Min and subsequent fields are skipped.
	}
	err = d.minDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Max and subsequent fields are skipped.
	}
	err = d.maxDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // Scale and subsequent fields are skipped.
	}
	err = d.scaleDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 5 {
		return nil // ZeroCount and subsequent fields are skipped.
	}
	err = d.zeroCountDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 6 {
		return nil // PositiveBuckets and subsequent fields are skipped.
	}
	if state.ExpHistogramBucketsDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.positiveBucketsDecoder = state.ExpHistogramBucketsDecoder
		d.isPositiveBucketsRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.positiveBucketsDecoder = new(ExpHistogramBucketsDecoder)
		err = d.positiveBucketsDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 7 {
		return nil // NegativeBuckets and subsequent fields are skipped.
	}
	if state.ExpHistogramBucketsDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.negativeBucketsDecoder = state.ExpHistogramBucketsDecoder
		d.isNegativeBucketsRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.negativeBucketsDecoder = new(ExpHistogramBucketsDecoder)
		err = d.negativeBucketsDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 8 {
		return nil // ZeroThreshold and subsequent fields are skipped.
	}
	err = d.zeroThresholdDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *ExpHistogramValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Count and subsequent fields are skipped.
	}
	d.countDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Sum and subsequent fields are skipped.
	}
	d.sumDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Min and subsequent fields are skipped.
	}
	d.minDecoder.Continue()
	if d.fieldCount <= 3 {
		return // Max and subsequent fields are skipped.
	}
	d.maxDecoder.Continue()
	if d.fieldCount <= 4 {
		return // Scale and subsequent fields are skipped.
	}
	d.scaleDecoder.Continue()
	if d.fieldCount <= 5 {
		return // ZeroCount and subsequent fields are skipped.
	}
	d.zeroCountDecoder.Continue()
	if d.fieldCount <= 6 {
		return // PositiveBuckets and subsequent fields are skipped.
	}

	if !d.isPositiveBucketsRecursive {
		d.positiveBucketsDecoder.Continue()
	}

	if d.fieldCount <= 7 {
		return // NegativeBuckets and subsequent fields are skipped.
	}

	if !d.isNegativeBucketsRecursive {
		d.negativeBucketsDecoder.Continue()
	}

	if d.fieldCount <= 8 {
		return // ZeroThreshold and subsequent fields are skipped.
	}
	d.zeroThresholdDecoder.Continue()
}

func (d *ExpHistogramValueDecoder) Reset() {
	d.countDecoder.Reset()
	d.sumDecoder.Reset()
	d.minDecoder.Reset()
	d.maxDecoder.Reset()
	d.scaleDecoder.Reset()
	d.zeroCountDecoder.Reset()

	if !d.isPositiveBucketsRecursive {
		d.positiveBucketsDecoder.Reset()
	}

	if !d.isNegativeBucketsRecursive {
		d.negativeBucketsDecoder.Reset()
	}

	d.zeroThresholdDecoder.Reset()
}

func (d *ExpHistogramValueDecoder) Decode(dstPtr *ExpHistogramValue) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	// Write bits to indicate which optional fields are set.
	val.optionalFieldsPresent = d.buf.ReadBits(3)

	if val.modifiedFields.mask&fieldModifiedExpHistogramValueCount != 0 {
		// Field is changed and is present, decode it.
		err = d.countDecoder.Decode(&val.count)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExpHistogramValueSum != 0 &&
		val.optionalFieldsPresent&fieldPresentExpHistogramValueSum != 0 {
		// Field is changed and is present, decode it.
		err = d.sumDecoder.Decode(&val.sum)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExpHistogramValueMin != 0 &&
		val.optionalFieldsPresent&fieldPresentExpHistogramValueMin != 0 {
		// Field is changed and is present, decode it.
		err = d.minDecoder.Decode(&val.min)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExpHistogramValueMax != 0 &&
		val.optionalFieldsPresent&fieldPresentExpHistogramValueMax != 0 {
		// Field is changed and is present, decode it.
		err = d.maxDecoder.Decode(&val.max)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExpHistogramValueScale != 0 {
		// Field is changed and is present, decode it.
		err = d.scaleDecoder.Decode(&val.scale)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExpHistogramValueZeroCount != 0 {
		// Field is changed and is present, decode it.
		err = d.zeroCountDecoder.Decode(&val.zeroCount)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExpHistogramValuePositiveBuckets != 0 {
		// Field is changed and is present, decode it.
		err = d.positiveBucketsDecoder.Decode(&val.positiveBuckets)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExpHistogramValueNegativeBuckets != 0 {
		// Field is changed and is present, decode it.
		err = d.negativeBucketsDecoder.Decode(&val.negativeBuckets)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExpHistogramValueZeroThreshold != 0 {
		// Field is changed and is present, decode it.
		err = d.zeroThresholdDecoder.Decode(&val.zeroThreshold)
		if err != nil {
			return err
		}
	}

	return nil
}
