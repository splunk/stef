// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

// AnyValue is a oneof struct.
type AnyValue struct {
	// The current type of the oneof.
	typ AnyValueType

	string  string
	bool    bool
	int64   int64
	float64 float64
	array   AnyValueArray
	kVList  KeyValueList
	bytes   pkg.Bytes

	// Pointer to parent's modifiedFields
	parentModifiedFields *modifiedFields
	// Bit to set in parent's modifiedFields when this oneof is modified.
	parentModifiedBit uint64
}

// Init must be called once, before the AnyValue is used.
func (s *AnyValue) Init() {
	s.init(nil, 0)
}

func (s *AnyValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.array.init(parentModifiedFields, parentModifiedBit)
	s.kVList.init(parentModifiedFields, parentModifiedBit)
}

func (s *AnyValue) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.array.initAlloc(parentModifiedFields, parentModifiedBit, allocators)
	s.kVList.initAlloc(parentModifiedFields, parentModifiedBit, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *AnyValue) reset() {
	s.typ = AnyValueTypeNone
	// We don't need to reset the state of the field since that will be done
	// when the type is changed, see SetType().
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *AnyValue) fixParent(parentModifiedFields *modifiedFields) {
	s.parentModifiedFields = parentModifiedFields

	s.array.fixParent(parentModifiedFields)
	s.kVList.fixParent(parentModifiedFields)
}

type AnyValueType byte

const (
	AnyValueTypeNone = AnyValueType(iota)
	AnyValueTypeString
	AnyValueTypeBool
	AnyValueTypeInt64
	AnyValueTypeFloat64
	AnyValueTypeArray
	AnyValueTypeKVList
	AnyValueTypeBytes
	AnyValueTypeCount
)

// Type returns the type of the value currently contained in AnyValue.
func (s *AnyValue) Type() AnyValueType {
	return s.typ
}

// resetContained resets the currently contained value, if any.
// Normally used after switching to a different type to make sure
// the value contained is in blank state.
func (s *AnyValue) resetContained() {
	switch s.typ {
	case AnyValueTypeArray:
		s.array.reset()
	case AnyValueTypeKVList:
		s.kVList.reset()
	}
}

// SetType sets the type of the value currently contained in AnyValue.
func (s *AnyValue) SetType(typ AnyValueType) {
	if s.typ != typ {
		s.typ = typ
		s.resetContained()
		switch typ {
		}
		s.markParentModified()
	}
}

// String returns the value if the contained type is currently AnyValueTypeString.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) String() string {
	return s.string
}

// SetString sets the value to the specified value and sets the type to AnyValueTypeString.
func (s *AnyValue) SetString(v string) {
	if s.typ != AnyValueTypeString || s.string != v {
		s.string = v
		s.typ = AnyValueTypeString
		s.parentModifiedFields.markModified(s.parentModifiedBit)
	}
}

// Bool returns the value if the contained type is currently AnyValueTypeBool.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) Bool() bool {
	return s.bool
}

// SetBool sets the value to the specified value and sets the type to AnyValueTypeBool.
func (s *AnyValue) SetBool(v bool) {
	if s.typ != AnyValueTypeBool || s.bool != v {
		s.bool = v
		s.typ = AnyValueTypeBool
		s.parentModifiedFields.markModified(s.parentModifiedBit)
	}
}

// Int64 returns the value if the contained type is currently AnyValueTypeInt64.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) Int64() int64 {
	return s.int64
}

// SetInt64 sets the value to the specified value and sets the type to AnyValueTypeInt64.
func (s *AnyValue) SetInt64(v int64) {
	if s.typ != AnyValueTypeInt64 || s.int64 != v {
		s.int64 = v
		s.typ = AnyValueTypeInt64
		s.parentModifiedFields.markModified(s.parentModifiedBit)
	}
}

// Float64 returns the value if the contained type is currently AnyValueTypeFloat64.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) Float64() float64 {
	return s.float64
}

// SetFloat64 sets the value to the specified value and sets the type to AnyValueTypeFloat64.
func (s *AnyValue) SetFloat64(v float64) {
	if s.typ != AnyValueTypeFloat64 || s.float64 != v {
		s.float64 = v
		s.typ = AnyValueTypeFloat64
		s.parentModifiedFields.markModified(s.parentModifiedBit)
	}
}

// Array returns the value if the contained type is currently AnyValueTypeArray.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) Array() *AnyValueArray {
	return &s.array
}

// KVList returns the value if the contained type is currently AnyValueTypeKVList.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) KVList() *KeyValueList {
	return &s.kVList
}

// Bytes returns the value if the contained type is currently AnyValueTypeBytes.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) Bytes() pkg.Bytes {
	return s.bytes
}

// SetBytes sets the value to the specified value and sets the type to AnyValueTypeBytes.
func (s *AnyValue) SetBytes(v pkg.Bytes) {
	if s.typ != AnyValueTypeBytes || s.bytes != v {
		s.bytes = v
		s.typ = AnyValueTypeBytes
		s.parentModifiedFields.markModified(s.parentModifiedBit)
	}
}

func (s *AnyValue) canBeShared() bool {
	// Oneof can never be shared.
	return false
}

func (s *AnyValue) CloneShared(allocators *Allocators) *AnyValue {
	// Oneof is not shareable, so CloneShared is just a Clone.
	return s.Clone(allocators)
}

func (s *AnyValue) Clone(allocators *Allocators) *AnyValue {
	c := allocators.AnyValue.Alloc()
	c.typ = s.typ
	switch s.typ {
	case AnyValueTypeString:
		c.string = s.string
	case AnyValueTypeBool:
		c.bool = s.bool
	case AnyValueTypeInt64:
		c.int64 = s.int64
	case AnyValueTypeFloat64:
		c.float64 = s.float64
	case AnyValueTypeArray:
		copyToNewAnyValueArray(&c.array, &s.array, allocators)
	case AnyValueTypeKVList:
		copyToNewKeyValueList(&c.kVList, &s.kVList, allocators)
	case AnyValueTypeBytes:
		c.bytes = s.bytes
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *AnyValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.array.byteSize() + s.kVList.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copyAnyValue(dst *AnyValue, src *AnyValue) {
	switch src.typ {
	case AnyValueTypeString:
		dst.SetString(src.string)
	case AnyValueTypeBool:
		dst.SetBool(src.bool)
	case AnyValueTypeInt64:
		dst.SetInt64(src.int64)
	case AnyValueTypeFloat64:
		dst.SetFloat64(src.float64)
	case AnyValueTypeArray:
		dst.SetType(src.typ)
		copyAnyValueArray(&dst.array, &src.array)
	case AnyValueTypeKVList:
		dst.SetType(src.typ)
		copyKeyValueList(&dst.kVList, &src.kVList)
	case AnyValueTypeBytes:
		dst.SetBytes(src.bytes)
	case AnyValueTypeNone:
		if dst.typ != AnyValueTypeNone {
			dst.typ = AnyValueTypeNone
			dst.markParentModified()
		}
	default:
		panic("copyAnyValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewAnyValue(dst *AnyValue, src *AnyValue, allocators *Allocators) {
	dst.typ = src.typ
	switch src.typ {
	case AnyValueTypeString:
		if dst.string != src.string {
			dst.string = src.string
			dst.parentModifiedFields.markModified(dst.parentModifiedBit)
		}
	case AnyValueTypeBool:
		if dst.bool != src.bool {
			dst.bool = src.bool
			dst.parentModifiedFields.markModified(dst.parentModifiedBit)
		}
	case AnyValueTypeInt64:
		if dst.int64 != src.int64 {
			dst.int64 = src.int64
			dst.parentModifiedFields.markModified(dst.parentModifiedBit)
		}
	case AnyValueTypeFloat64:
		if dst.float64 != src.float64 {
			dst.float64 = src.float64
			dst.parentModifiedFields.markModified(dst.parentModifiedBit)
		}
	case AnyValueTypeArray:
		copyToNewAnyValueArray(&dst.array, &src.array, allocators)
	case AnyValueTypeKVList:
		copyToNewKeyValueList(&dst.kVList, &src.kVList, allocators)
	case AnyValueTypeBytes:
		if dst.bytes != src.bytes {
			dst.bytes = src.bytes
			dst.parentModifiedFields.markModified(dst.parentModifiedBit)
		}
	case AnyValueTypeNone:
	default:
		panic("copyAnyValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// CopyFrom() performs a deep copy from src.
func (s *AnyValue) CopyFrom(src *AnyValue) {
	copyAnyValue(s, src)
}

func (s *AnyValue) markParentModified() {
	s.parentModifiedFields.markModified(s.parentModifiedBit)
}

func (s *AnyValue) setModifiedRecursively() {
	switch s.typ {
	case AnyValueTypeArray:
		s.array.setModifiedRecursively()
	case AnyValueTypeKVList:
		s.kVList.setModifiedRecursively()
	}
}

func (s *AnyValue) setUnmodifiedRecursively() {
	switch s.typ {
	case AnyValueTypeArray:
		s.array.setUnmodifiedRecursively()
	case AnyValueTypeKVList:
		s.kVList.setUnmodifiedRecursively()
	}
}

// computeDiff compares s and val and returns true if they differ.
// All fields that are different in s will be marked as modified.
func (s *AnyValue) computeDiff(val *AnyValue) (ret bool) {
	if s.typ == val.typ {
		switch s.typ {
		case AnyValueTypeString:
			ret = s.string != val.string
		case AnyValueTypeBool:
			ret = s.bool != val.bool
		case AnyValueTypeInt64:
			ret = s.int64 != val.int64
		case AnyValueTypeFloat64:
			ret = s.float64 != val.float64
		case AnyValueTypeArray:
			ret = s.array.computeDiff(&val.array)
		case AnyValueTypeKVList:
			ret = s.kVList.computeDiff(&val.kVList)
		case AnyValueTypeBytes:
			ret = s.bytes != val.bytes
		}
	} else {
		ret = true
		switch s.typ {
		case AnyValueTypeArray:
			// val.array doesn't exist at all so mark the whole s.array subtree as modified.
			s.array.setModifiedRecursively()
		case AnyValueTypeKVList:
			// val.kVList doesn't exist at all so mark the whole s.kVList subtree as modified.
			s.kVList.setModifiedRecursively()
		}
	}
	return ret
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *AnyValue) IsEqual(val *AnyValue) bool {
	if e.typ != val.typ {
		return false
	}
	switch e.typ {
	case AnyValueTypeString:
		return pkg.StringEqual(e.string, val.string)
	case AnyValueTypeBool:
		return pkg.BoolEqual(e.bool, val.bool)
	case AnyValueTypeInt64:
		return pkg.Int64Equal(e.int64, val.int64)
	case AnyValueTypeFloat64:
		return pkg.Float64Equal(e.float64, val.float64)
	case AnyValueTypeArray:
		return e.array.IsEqual(&val.array)
	case AnyValueTypeKVList:
		return e.kVList.IsEqual(&val.kVList)
	case AnyValueTypeBytes:
		return pkg.BytesEqual(e.bytes, val.bytes)
	}

	return true
}

func AnyValueEqual(left, right *AnyValue) bool {
	return left.IsEqual(right)
}

// CmpAnyValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpAnyValue(left, right *AnyValue) int {
	c := pkg.Uint64Compare(uint64(left.typ), uint64(right.typ))
	if c != 0 {
		return c
	}
	switch left.typ {
	case AnyValueTypeString:
		return strings.Compare(left.string, right.string)
	case AnyValueTypeBool:
		return pkg.BoolCompare(left.bool, right.bool)
	case AnyValueTypeInt64:
		return pkg.Int64Compare(left.int64, right.int64)
	case AnyValueTypeFloat64:
		return pkg.Float64Compare(left.float64, right.float64)
	case AnyValueTypeArray:
		return CmpAnyValueArray(&left.array, &right.array)
	case AnyValueTypeKVList:
		return CmpKeyValueList(&left.kVList, &right.kVList)
	case AnyValueTypeBytes:
		return pkg.BytesCompare(left.bytes, right.bytes)
	}

	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schema are mutated, allowing to generate data for specified schema.
func (s *AnyValue) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this oneof from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// the type of the oneof to the choices that are not in the schema.
	fieldCount, err := schem.FieldCount("AnyValue")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "AnyValue", err))
	}

	typeChanged := false
	if random.IntN(10) == 0 {
		s.SetType(AnyValueType(random.IntN(fieldCount + 1)))
		typeChanged = true
	}

	switch s.typ {
	case AnyValueTypeString:
		if typeChanged || random.IntN(2) == 0 {
			s.SetString(pkg.StringRandom(random))
		}
	case AnyValueTypeBool:
		if typeChanged || random.IntN(2) == 0 {
			s.SetBool(pkg.BoolRandom(random))
		}
	case AnyValueTypeInt64:
		if typeChanged || random.IntN(2) == 0 {
			s.SetInt64(pkg.Int64Random(random))
		}
	case AnyValueTypeFloat64:
		if typeChanged || random.IntN(2) == 0 {
			s.SetFloat64(pkg.Float64Random(random))
		}
	case AnyValueTypeArray:
		if typeChanged || random.IntN(2) == 0 {
			s.array.mutateRandom(random, schem)
		}
	case AnyValueTypeKVList:
		if typeChanged || random.IntN(2) == 0 {
			s.kVList.mutateRandom(random, schem)
		}
	case AnyValueTypeBytes:
		if typeChanged || random.IntN(2) == 0 {
			s.SetBytes(pkg.BytesRandom(random))
		}
	}
}

// AnyValueEncoder implements encoding of AnyValue
type AnyValueEncoder struct {
	buf        pkg.BitsWriter
	limiter    *pkg.SizeLimiter
	prevType   AnyValueType
	fieldCount uint

	// Field encoders.
	stringEncoder encoders.StringDictEncoder

	boolEncoder encoders.BoolEncoder

	int64Encoder encoders.Int64Encoder

	float64Encoder encoders.Float64Encoder

	arrayEncoder     *AnyValueArrayEncoder
	isArrayRecursive bool // Indicates Array field's type is recursive.

	kVListEncoder     *KeyValueListEncoder
	isKVListRecursive bool // Indicates KVList field's type is recursive.

	bytesEncoder encoders.BytesEncoder
}

func (e *AnyValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.AnyValueEncoder != nil {
		panic("cannot initialize AnyValueEncoder: already initialized")
	}
	state.AnyValueEncoder = e
	defer func() { state.AnyValueEncoder = nil }()

	e.limiter = &state.limiter

	var err error
	e.fieldCount, err = state.StructFieldCounts.AnyValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "AnyValue", err)
	}

	// Init encoder for String field.
	if e.fieldCount <= 0 {
		// String and all subsequent fields are skipped.
		return nil
	}
	err = e.stringEncoder.Init(&state.AnyValueString, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Bool field.
	if e.fieldCount <= 1 {
		// Bool and all subsequent fields are skipped.
		return nil
	}
	err = e.boolEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Int64 field.
	if e.fieldCount <= 2 {
		// Int64 and all subsequent fields are skipped.
		return nil
	}
	err = e.int64Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Float64 field.
	if e.fieldCount <= 3 {
		// Float64 and all subsequent fields are skipped.
		return nil
	}
	err = e.float64Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Array field.
	if e.fieldCount <= 4 {
		// Array and all subsequent fields are skipped.
		return nil
	}
	if state.AnyValueArrayEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.arrayEncoder = state.AnyValueArrayEncoder
		e.isArrayRecursive = true
	} else {
		e.arrayEncoder = new(AnyValueArrayEncoder)
		err = e.arrayEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for KVList field.
	if e.fieldCount <= 5 {
		// KVList and all subsequent fields are skipped.
		return nil
	}
	if state.KeyValueListEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.kVListEncoder = state.KeyValueListEncoder
		e.isKVListRecursive = true
	} else {
		e.kVListEncoder = new(KeyValueListEncoder)
		err = e.kVListEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Bytes field.
	if e.fieldCount <= 6 {
		// Bytes and all subsequent fields are skipped.
		return nil
	}
	err = e.bytesEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *AnyValueEncoder) Reset() {
	e.prevType = 0

	if e.fieldCount <= 0 {
		return // String and all subsequent fields are skipped.
	}
	e.stringEncoder.Reset()
	if e.fieldCount <= 1 {
		return // Bool and all subsequent fields are skipped.
	}
	e.boolEncoder.Reset()
	if e.fieldCount <= 2 {
		return // Int64 and all subsequent fields are skipped.
	}
	e.int64Encoder.Reset()
	if e.fieldCount <= 3 {
		return // Float64 and all subsequent fields are skipped.
	}
	e.float64Encoder.Reset()
	if e.fieldCount <= 4 {
		return // Array and all subsequent fields are skipped.
	}

	if !e.isArrayRecursive {
		e.arrayEncoder.Reset()
	}

	if e.fieldCount <= 5 {
		return // KVList and all subsequent fields are skipped.
	}

	if !e.isKVListRecursive {
		e.kVListEncoder.Reset()
	}

	if e.fieldCount <= 6 {
		return // Bytes and all subsequent fields are skipped.
	}
	e.bytesEncoder.Reset()
}

// Encode encodes val into buf
func (e *AnyValueEncoder) Encode(val *AnyValue) {
	typ := val.typ
	if uint(typ) > e.fieldCount {
		// The current field type is not supported in target schema. Encode the type as None.
		typ = AnyValueTypeNone
	}

	// Compute type delta. 0 means the type is the same as the last time.
	typDelta := int(typ) - int(e.prevType)
	e.prevType = typ
	bitCount := e.buf.WriteVarintCompact(int64(typDelta))

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Encode currently selected field.
	switch typ {
	case AnyValueTypeString:
		// Encode String
		e.stringEncoder.Encode(val.string)
	case AnyValueTypeBool:
		// Encode Bool
		e.boolEncoder.Encode(val.bool)
	case AnyValueTypeInt64:
		// Encode Int64
		e.int64Encoder.Encode(val.int64)
	case AnyValueTypeFloat64:
		// Encode Float64
		e.float64Encoder.Encode(val.float64)
	case AnyValueTypeArray:
		// Encode Array
		e.arrayEncoder.Encode(&val.array)
	case AnyValueTypeKVList:
		// Encode KVList
		e.kVListEncoder.Encode(&val.kVList)
	case AnyValueTypeBytes:
		// Encode Bytes
		e.bytesEncoder.Encode(val.bytes)
	}
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *AnyValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect String field.
	if e.fieldCount <= 0 {
		return // String and subsequent fields are skipped.
	}

	e.stringEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Bool field.
	if e.fieldCount <= 1 {
		return // Bool and subsequent fields are skipped.
	}

	e.boolEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Int64 field.
	if e.fieldCount <= 2 {
		return // Int64 and subsequent fields are skipped.
	}

	e.int64Encoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Float64 field.
	if e.fieldCount <= 3 {
		return // Float64 and subsequent fields are skipped.
	}

	e.float64Encoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Array field.
	if e.fieldCount <= 4 {
		return // Array and subsequent fields are skipped.
	}
	if !e.isArrayRecursive {
		e.arrayEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect KVList field.
	if e.fieldCount <= 5 {
		return // KVList and subsequent fields are skipped.
	}
	if !e.isKVListRecursive {
		e.kVListEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Bytes field.
	if e.fieldCount <= 6 {
		return // Bytes and subsequent fields are skipped.
	}

	e.bytesEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// AnyValueDecoder implements decoding of AnyValue
type AnyValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *AnyValue
	lastVal    AnyValue
	fieldCount uint

	prevType AnyValueType

	// Field decoders.

	stringDecoder encoders.StringDictDecoder

	boolDecoder encoders.BoolDecoder

	int64Decoder encoders.Int64Decoder

	float64Decoder encoders.Float64Decoder

	arrayDecoder     *AnyValueArrayDecoder
	isArrayRecursive bool

	kVListDecoder     *KeyValueListDecoder
	isKVListRecursive bool

	bytesDecoder encoders.BytesDecoder

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *AnyValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.AnyValueDecoder != nil {
		panic("cannot initialize AnyValueDecoder: already initialized")
	}
	state.AnyValueDecoder = d
	defer func() { state.AnyValueDecoder = nil }()

	d.allocators = &state.Allocators

	var err error
	d.fieldCount, err = state.StructFieldCounts.AnyValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "AnyValue", err)
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal
	if d.fieldCount <= 0 {
		return nil // String and subsequent fields are skipped.
	}
	err = d.stringDecoder.Init(&state.AnyValueString, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Bool and subsequent fields are skipped.
	}
	err = d.boolDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Int64 and subsequent fields are skipped.
	}
	err = d.int64Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Float64 and subsequent fields are skipped.
	}
	err = d.float64Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // Array and subsequent fields are skipped.
	}
	if state.AnyValueArrayDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.arrayDecoder = state.AnyValueArrayDecoder
		d.isArrayRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.arrayDecoder = new(AnyValueArrayDecoder)
		err = d.arrayDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 5 {
		return nil // KVList and subsequent fields are skipped.
	}
	if state.KeyValueListDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.kVListDecoder = state.KeyValueListDecoder
		d.isKVListRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.kVListDecoder = new(KeyValueListDecoder)
		err = d.kVListDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 6 {
		return nil // Bytes and subsequent fields are skipped.
	}
	err = d.bytesDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *AnyValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // String and subsequent fields are skipped.
	}
	d.stringDecoder.Continue()

	if d.fieldCount <= 1 {
		return // Bool and subsequent fields are skipped.
	}
	d.boolDecoder.Continue()

	if d.fieldCount <= 2 {
		return // Int64 and subsequent fields are skipped.
	}
	d.int64Decoder.Continue()

	if d.fieldCount <= 3 {
		return // Float64 and subsequent fields are skipped.
	}
	d.float64Decoder.Continue()

	if d.fieldCount <= 4 {
		return // Array and subsequent fields are skipped.
	}

	if !d.isArrayRecursive {
		d.arrayDecoder.Continue()
	}

	if d.fieldCount <= 5 {
		return // KVList and subsequent fields are skipped.
	}

	if !d.isKVListRecursive {
		d.kVListDecoder.Continue()
	}

	if d.fieldCount <= 6 {
		return // Bytes and subsequent fields are skipped.
	}
	d.bytesDecoder.Continue()

}

func (d *AnyValueDecoder) Reset() {
	d.prevType = 0

	if d.fieldCount <= 0 {
		return // String and all subsequent fields are skipped.
	}
	d.stringDecoder.Reset()
	if d.fieldCount <= 1 {
		return // Bool and all subsequent fields are skipped.
	}
	d.boolDecoder.Reset()
	if d.fieldCount <= 2 {
		return // Int64 and all subsequent fields are skipped.
	}
	d.int64Decoder.Reset()
	if d.fieldCount <= 3 {
		return // Float64 and all subsequent fields are skipped.
	}
	d.float64Decoder.Reset()
	if d.fieldCount <= 4 {
		return // Array and all subsequent fields are skipped.
	}

	if !d.isArrayRecursive {
		d.arrayDecoder.Reset()
	}

	if d.fieldCount <= 5 {
		return // KVList and all subsequent fields are skipped.
	}

	if !d.isKVListRecursive {
		d.kVListDecoder.Reset()
	}

	if d.fieldCount <= 6 {
		return // Bytes and all subsequent fields are skipped.
	}
	d.bytesDecoder.Reset()
}

func (d *AnyValueDecoder) Decode(dstPtr *AnyValue) error {
	// Read Type delta
	typeDelta := d.buf.ReadVarintCompact()

	// Calculate and validate the new Type
	typ := int(d.prevType) + int(typeDelta)
	if typ < 0 || typ >= int(AnyValueTypeCount) {
		return pkg.ErrInvalidOneOfType
	}

	dst := dstPtr
	if dst.typ != AnyValueType(typ) {
		dst.typ = AnyValueType(typ)
		dst.resetContained()
	}
	d.prevType = AnyValueType(dst.typ)

	// Decode selected field
	switch dst.typ {
	case AnyValueTypeString:
		// Decode String
		return d.stringDecoder.Decode(&dst.string)
	case AnyValueTypeBool:
		// Decode Bool
		return d.boolDecoder.Decode(&dst.bool)
	case AnyValueTypeInt64:
		// Decode Int64
		return d.int64Decoder.Decode(&dst.int64)
	case AnyValueTypeFloat64:
		// Decode Float64
		return d.float64Decoder.Decode(&dst.float64)
	case AnyValueTypeArray:
		// Decode Array
		return d.arrayDecoder.Decode(&dst.array)
	case AnyValueTypeKVList:
		// Decode KVList
		return d.kVListDecoder.Decode(&dst.kVList)
	case AnyValueTypeBytes:
		// Decode Bytes
		return d.bytesDecoder.Decode(&dst.bytes)
	}
	return nil
}

// AnyValueAllocator implements a custom allocator for AnyValue.
// It maintains a pool of pre-allocated AnyValue and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type AnyValueAllocator struct {
	pool []AnyValue
	ofs  int
}

// Alloc returns the next available AnyValue from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *AnyValueAllocator) Alloc() *AnyValue {
	if a.ofs < len(a.pool) {
		// Get the next available AnyValue from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *AnyValueAllocator) prealloc() *AnyValue {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]AnyValue, newLen)
	a.ofs = 1
	return &a.pool[0]
}
