// Code generated by stefc. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type QuantileValue struct {
	quantile float64
	value    float64

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const QuantileValueStructName = "QuantileValue"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedQuantileValueQuantile = uint64(1 << iota)
	fieldModifiedQuantileValueValue
)

// Init must be called once, before the QuantileValue is used.
func (s *QuantileValue) Init() {
	s.init(nil, 0)
}

func NewQuantileValue() *QuantileValue {
	var s QuantileValue
	s.init(nil, 0)
	return &s
}

func (s *QuantileValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

}

func (s *QuantileValue) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *QuantileValue) reset() {
	s.quantile = 0.0
	s.value = 0.0
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *QuantileValue) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing by pointer without cloning,
// which can improve encoding performance.
func (s *QuantileValue) Freeze() {
	s.modifiedFields.freeze()
}

func (s *QuantileValue) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *QuantileValue) Quantile() float64 {
	return s.quantile
}

// SetQuantile sets the value of Quantile field.
func (s *QuantileValue) SetQuantile(v float64) {
	if s.quantile != v {
		s.quantile = v
		s.modifiedFields.markModified(fieldModifiedQuantileValueQuantile)
	}
}

func (s *QuantileValue) markQuantileModified() {
	s.modifiedFields.markModified(fieldModifiedQuantileValueQuantile)
}

// IsQuantileModified returns true the value of Quantile field was modified since
// QuantileValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *QuantileValue) IsQuantileModified() bool {
	return s.modifiedFields.mask&fieldModifiedQuantileValueQuantile != 0
}

func (s *QuantileValue) Value() float64 {
	return s.value
}

// SetValue sets the value of Value field.
func (s *QuantileValue) SetValue(v float64) {
	if s.value != v {
		s.value = v
		s.modifiedFields.markModified(fieldModifiedQuantileValueValue)
	}
}

func (s *QuantileValue) markValueModified() {
	s.modifiedFields.markModified(fieldModifiedQuantileValueValue)
}

// IsValueModified returns true the value of Value field was modified since
// QuantileValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *QuantileValue) IsValueModified() bool {
	return s.modifiedFields.mask&fieldModifiedQuantileValueValue != 0
}

func (s *QuantileValue) setModifiedRecursively() {
	s.modifiedFields.mask =
		fieldModifiedQuantileValueQuantile |
			fieldModifiedQuantileValueValue | 0
}

func (s *QuantileValue) setUnmodifiedRecursively() {
	s.modifiedFields.mask = 0
}

// computeDiff compares s and val and returns true if they differ.
// All fields that are different in s will be marked as modified.
func (s *QuantileValue) computeDiff(val *QuantileValue) (ret bool) {
	// Compare Quantile field.
	if s.quantile != val.quantile {
		s.modifiedFields.setModified(fieldModifiedQuantileValueQuantile)
		ret = true
	}
	// Compare Value field.
	if s.value != val.value {
		s.modifiedFields.setModified(fieldModifiedQuantileValueValue)
		ret = true
	}
	return ret
}

// canBeShared returns true if s is safe to share by pointer without cloning (for example if s is frozen).
func (s *QuantileValue) canBeShared() bool {
	return false
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *QuantileValue) CloneShared(allocators *Allocators) QuantileValue {
	return s.Clone(allocators)
}

func (s *QuantileValue) Clone(allocators *Allocators) QuantileValue {
	c := QuantileValue{
		quantile: s.quantile,
		value:    s.value,
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *QuantileValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		0
}

// Copy from src to dst, overwriting existing data in dst.
func copyQuantileValue(dst *QuantileValue, src *QuantileValue) {
	dst.SetQuantile(src.quantile)
	dst.SetValue(src.value)
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewQuantileValue(dst *QuantileValue, src *QuantileValue, allocators *Allocators) {
	dst.SetQuantile(src.quantile)
	dst.SetValue(src.value)
}

// CopyFrom() performs a deep copy from src.
func (s *QuantileValue) CopyFrom(src *QuantileValue) {
	copyQuantileValue(s, src)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *QuantileValue) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("QuantileValue")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "QuantileValue", err))
	}

	const randRange = max(2, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Quantile and all subsequent fields are skipped.
	}
	// Maybe mutate Quantile
	if random.IntN(randRange) == 0 {
		s.SetQuantile(pkg.Float64Random(random))
	}
	if fieldCount <= 1 {
		return // Value and all subsequent fields are skipped.
	}
	// Maybe mutate Value
	if random.IntN(randRange) == 0 {
		s.SetValue(pkg.Float64Random(random))
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *QuantileValue) IsEqual(right *QuantileValue) bool {
	// Compare Quantile field.
	if !pkg.Float64Equal(s.quantile, right.quantile) {
		return false
	}
	// Compare Value field.
	if !pkg.Float64Equal(s.value, right.value) {
		return false
	}

	return true
}

func QuantileValueEqual(left, right *QuantileValue) bool {
	return left.IsEqual(right)
}

// CmpQuantileValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpQuantileValue(left, right *QuantileValue) int {
	// Compare Quantile field.
	if c := pkg.Float64Compare(left.quantile, right.quantile); c != 0 {
		return c
	}
	// Compare Value field.
	if c := pkg.Float64Compare(left.value, right.value); c != 0 {
		return c
	}
	return 0
}

// QuantileValueEncoder implements encoding of QuantileValue
type QuantileValueEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to a mask to force the next encoding operation
	// write the fields, whether they are modified or no. This is used after frame
	// restarts so that the data can be decoded from the frame start.
	forceModifiedFields uint64

	quantileEncoder encoders.Float64Encoder
	valueEncoder    encoders.Float64Encoder

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *QuantileValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.QuantileValueEncoder != nil {
		panic("cannot initialize QuantileValueEncoder: already initialized")
	}
	state.QuantileValueEncoder = e
	defer func() { state.QuantileValueEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.QuantileValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "QuantileValue", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Quantile field.
	if e.fieldCount <= 0 {
		return nil // Quantile and all subsequent fields are skipped.
	}
	err = e.quantileEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Value field.
	if e.fieldCount <= 1 {
		return nil // Value and all subsequent fields are skipped.
	}
	err = e.valueEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *QuantileValueEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = e.keepFieldMask

	if e.fieldCount <= 0 {
		return // Quantile and all subsequent fields are skipped.
	}
	e.quantileEncoder.Reset()
	if e.fieldCount <= 1 {
		return // Value and all subsequent fields are skipped.
	}
	e.valueEncoder.Reset()
}

// Encode encodes val into buf
func (e *QuantileValueEncoder) Encode(val *QuantileValue) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	fieldMask |= e.forceModifiedFields
	e.forceModifiedFields = 0

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedQuantileValueQuantile != 0 {
		// Encode Quantile
		e.quantileEncoder.Encode(val.quantile)
	}

	if fieldMask&fieldModifiedQuantileValueValue != 0 {
		// Encode Value
		e.valueEncoder.Encode(val.value)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *QuantileValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0
	// Collect Quantile field.
	if e.fieldCount <= 0 {
		return // Quantile and subsequent fields are skipped.
	}
	e.quantileEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
	// Collect Value field.
	if e.fieldCount <= 1 {
		return // Value and subsequent fields are skipped.
	}
	e.valueEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// QuantileValueDecoder implements decoding of QuantileValue
type QuantileValueDecoder struct {
	buf             pkg.BitsReader
	column          *pkg.ReadableColumn
	fieldCount      uint
	quantileDecoder encoders.Float64Decoder

	valueDecoder encoders.Float64Decoder

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *QuantileValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.QuantileValueDecoder != nil {
		panic("cannot initialize QuantileValueDecoder: already initialized")
	}
	state.QuantileValueDecoder = d
	defer func() { state.QuantileValueDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.QuantileValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "QuantileValue", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Quantile and subsequent fields are skipped.
	}
	err = d.quantileDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Value and subsequent fields are skipped.
	}
	err = d.valueDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *QuantileValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Quantile and subsequent fields are skipped.
	}
	d.quantileDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Value and subsequent fields are skipped.
	}
	d.valueDecoder.Continue()
}

func (d *QuantileValueDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Quantile and all subsequent fields are skipped.
	}
	d.quantileDecoder.Reset()
	if d.fieldCount <= 1 {
		return // Value and all subsequent fields are skipped.
	}
	d.valueDecoder.Reset()
}

func (d *QuantileValueDecoder) Decode(dstPtr *QuantileValue) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedQuantileValueQuantile != 0 {
		// Field is changed and is present, decode it.
		err = d.quantileDecoder.Decode(&val.quantile)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedQuantileValueValue != 0 {
		// Field is changed and is present, decode it.
		err = d.valueDecoder.Decode(&val.value)
		if err != nil {
			return err
		}
	}

	return nil
}

// QuantileValueAllocator implements a custom allocator for QuantileValue.
// It maintains a pool of pre-allocated QuantileValue and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type QuantileValueAllocator struct {
	pool []QuantileValue
	ofs  int
}

// Alloc returns the next available QuantileValue from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *QuantileValueAllocator) Alloc() *QuantileValue {
	if a.ofs < len(a.pool) {
		// Get the next available QuantileValue from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *QuantileValueAllocator) prealloc() *QuantileValue {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]QuantileValue, newLen)
	a.ofs = 1
	return &a.pool[0]
}
