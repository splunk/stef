// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type HistogramValue struct {
	count        int64
	sum          float64
	min          float64
	max          float64
	bucketCounts Int64Array

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields

	// Field presence bits.
	// Fields which are present have the corresponding bit set, see fieldPresentHistogramValue* consts below.
	optionalFieldsPresent uint64
}

const HistogramValueStructName = "HistogramValue"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedHistogramValueCount = uint64(1 << iota)
	fieldModifiedHistogramValueSum
	fieldModifiedHistogramValueMin
	fieldModifiedHistogramValueMax
	fieldModifiedHistogramValueBucketCounts
)

// Bitmasks for "present" flags for optional fields.
const (
	fieldPresentHistogramValueSum = uint64(1 << iota)
	fieldPresentHistogramValueMin
	fieldPresentHistogramValueMax
)

// Init must be called once, before the HistogramValue is used.
func (s *HistogramValue) Init() {
	s.init(nil, 0)
}

func NewHistogramValue() *HistogramValue {
	var s HistogramValue
	s.init(nil, 0)
	return &s
}

func (s *HistogramValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.bucketCounts.init(&s.modifiedFields, fieldModifiedHistogramValueBucketCounts)
}

func (s *HistogramValue) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.bucketCounts.initAlloc(&s.modifiedFields, fieldModifiedHistogramValueBucketCounts, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *HistogramValue) reset() {

	s.count = 0
	s.sum = 0.0
	s.min = 0.0
	s.max = 0.0
	s.bucketCounts.reset()
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *HistogramValue) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields

	s.bucketCounts.fixParent(&s.modifiedFields)
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing without cloning
// which can improve performance.
func (s *HistogramValue) Freeze() {
	s.modifiedFields.freeze()
}

func (s *HistogramValue) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *HistogramValue) Count() int64 {
	return s.count
}

// SetCount sets the value of Count field.
func (s *HistogramValue) SetCount(v int64) {
	if s.count != v {
		s.count = v
		s.markCountModified()
	}
}

func (s *HistogramValue) markCountModified() {
	s.modifiedFields.markModified(fieldModifiedHistogramValueCount)
}

// IsCountModified returns true the value of Count field was modified since
// HistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *HistogramValue) IsCountModified() bool {
	return s.modifiedFields.mask&fieldModifiedHistogramValueCount != 0
}

func (s *HistogramValue) Sum() float64 {
	return s.sum
}

// SetSum sets the value of Sum field.
func (s *HistogramValue) SetSum(v float64) {
	if s.sum != v || s.optionalFieldsPresent&fieldPresentHistogramValueSum == 0 {
		s.sum = v
		s.markSumModified()
		s.optionalFieldsPresent |= fieldPresentHistogramValueSum
	}
}

func (s *HistogramValue) markSumModified() {
	s.modifiedFields.markModified(fieldModifiedHistogramValueSum)
}

// UnsetSum unsets the precense flag of Sum field. A subsequent HasSum() will return false.
func (s *HistogramValue) UnsetSum() {
	if s.optionalFieldsPresent&fieldPresentHistogramValueSum != 0 {
		s.optionalFieldsPresent &= ^fieldPresentHistogramValueSum
		s.markSumModified()
	}
}

// HasSum returns true if the presence flag Sum field is set and false if it is unset.
func (s *HistogramValue) HasSum() bool {
	return s.optionalFieldsPresent&fieldPresentHistogramValueSum != 0
}

// IsSumModified returns true the value of Sum field was modified since
// HistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *HistogramValue) IsSumModified() bool {
	return s.modifiedFields.mask&fieldModifiedHistogramValueSum != 0
}

func (s *HistogramValue) Min() float64 {
	return s.min
}

// SetMin sets the value of Min field.
func (s *HistogramValue) SetMin(v float64) {
	if s.min != v || s.optionalFieldsPresent&fieldPresentHistogramValueMin == 0 {
		s.min = v
		s.markMinModified()
		s.optionalFieldsPresent |= fieldPresentHistogramValueMin
	}
}

func (s *HistogramValue) markMinModified() {
	s.modifiedFields.markModified(fieldModifiedHistogramValueMin)
}

// UnsetMin unsets the precense flag of Min field. A subsequent HasMin() will return false.
func (s *HistogramValue) UnsetMin() {
	if s.optionalFieldsPresent&fieldPresentHistogramValueMin != 0 {
		s.optionalFieldsPresent &= ^fieldPresentHistogramValueMin
		s.markMinModified()
	}
}

// HasMin returns true if the presence flag Min field is set and false if it is unset.
func (s *HistogramValue) HasMin() bool {
	return s.optionalFieldsPresent&fieldPresentHistogramValueMin != 0
}

// IsMinModified returns true the value of Min field was modified since
// HistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *HistogramValue) IsMinModified() bool {
	return s.modifiedFields.mask&fieldModifiedHistogramValueMin != 0
}

func (s *HistogramValue) Max() float64 {
	return s.max
}

// SetMax sets the value of Max field.
func (s *HistogramValue) SetMax(v float64) {
	if s.max != v || s.optionalFieldsPresent&fieldPresentHistogramValueMax == 0 {
		s.max = v
		s.markMaxModified()
		s.optionalFieldsPresent |= fieldPresentHistogramValueMax
	}
}

func (s *HistogramValue) markMaxModified() {
	s.modifiedFields.markModified(fieldModifiedHistogramValueMax)
}

// UnsetMax unsets the precense flag of Max field. A subsequent HasMax() will return false.
func (s *HistogramValue) UnsetMax() {
	if s.optionalFieldsPresent&fieldPresentHistogramValueMax != 0 {
		s.optionalFieldsPresent &= ^fieldPresentHistogramValueMax
		s.markMaxModified()
	}
}

// HasMax returns true if the presence flag Max field is set and false if it is unset.
func (s *HistogramValue) HasMax() bool {
	return s.optionalFieldsPresent&fieldPresentHistogramValueMax != 0
}

// IsMaxModified returns true the value of Max field was modified since
// HistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *HistogramValue) IsMaxModified() bool {
	return s.modifiedFields.mask&fieldModifiedHistogramValueMax != 0
}

func (s *HistogramValue) BucketCounts() *Int64Array {
	return &s.bucketCounts
}

func (s *HistogramValue) markBucketCountsModified() {
	s.modifiedFields.markModified(fieldModifiedHistogramValueBucketCounts)
}

// IsBucketCountsModified returns true the value of BucketCounts field was modified since
// HistogramValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *HistogramValue) IsBucketCountsModified() bool {
	return s.modifiedFields.mask&fieldModifiedHistogramValueBucketCounts != 0
}

func (s *HistogramValue) markModifiedRecursively() {

	s.bucketCounts.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedHistogramValueCount |
			fieldModifiedHistogramValueSum |
			fieldModifiedHistogramValueMin |
			fieldModifiedHistogramValueMax |
			fieldModifiedHistogramValueBucketCounts | 0
}

func (s *HistogramValue) markUnmodifiedRecursively() {

	if s.IsCountModified() {
	}

	if s.IsSumModified() {
	}

	if s.IsMinModified() {
	}

	if s.IsMaxModified() {
	}

	if s.IsBucketCountsModified() {
		s.bucketCounts.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// canBeShared returns true if s is safe to share without cloning (for example if s is frozen).
func (s *HistogramValue) canBeShared() bool {
	return s.isFrozen()
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *HistogramValue) CloneShared(allocators *Allocators) HistogramValue {

	return s.Clone(allocators)
}

func (s *HistogramValue) Clone(allocators *Allocators) HistogramValue {

	c := HistogramValue{

		//modifiedFields: s.modifiedFields,
		count:        s.count,
		sum:          s.sum,
		min:          s.min,
		max:          s.max,
		bucketCounts: s.bucketCounts.CloneShared(allocators),
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *HistogramValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.bucketCounts.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copyHistogramValue(dst *HistogramValue, src *HistogramValue) {

	dst.SetCount(src.count)
	if src.HasSum() {
		dst.SetSum(src.sum)
	} else {
		dst.UnsetSum()
	}

	if src.HasMin() {
		dst.SetMin(src.min)
	} else {
		dst.UnsetMin()
	}

	if src.HasMax() {
		dst.SetMax(src.max)
	} else {
		dst.UnsetMax()
	}

	copyInt64Array(&dst.bucketCounts, &src.bucketCounts)
	dst.optionalFieldsPresent = src.optionalFieldsPresent
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewHistogramValue(dst *HistogramValue, src *HistogramValue, allocators *Allocators) {

	dst.SetCount(src.count)
	if src.HasSum() {
		dst.SetSum(src.sum)
	}

	if src.HasMin() {
		dst.SetMin(src.min)
	}

	if src.HasMax() {
		dst.SetMax(src.max)
	}

	copyToNewInt64Array(&dst.bucketCounts, &src.bucketCounts, allocators)
	dst.optionalFieldsPresent = src.optionalFieldsPresent
}

// CopyFrom() performs a deep copy from src.
func (s *HistogramValue) CopyFrom(src *HistogramValue) {
	copyHistogramValue(s, src)
}

func (s *HistogramValue) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *HistogramValue) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("HistogramValue")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "HistogramValue", err))
	}

	const randRange = max(5, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Count and all subsequent fields are skipped.
	}
	// Maybe mutate Count
	if random.IntN(randRange) == 0 {
		s.SetCount(pkg.Int64Random(random))
	}
	if fieldCount <= 1 {
		return // Sum and all subsequent fields are skipped.
	}
	// Maybe mutate Sum
	if random.IntN(randRange) == 0 {
		s.SetSum(pkg.Float64Random(random))
	}
	if fieldCount <= 2 {
		return // Min and all subsequent fields are skipped.
	}
	// Maybe mutate Min
	if random.IntN(randRange) == 0 {
		s.SetMin(pkg.Float64Random(random))
	}
	if fieldCount <= 3 {
		return // Max and all subsequent fields are skipped.
	}
	// Maybe mutate Max
	if random.IntN(randRange) == 0 {
		s.SetMax(pkg.Float64Random(random))
	}
	if fieldCount <= 4 {
		return // BucketCounts and all subsequent fields are skipped.
	}
	// Maybe mutate BucketCounts
	if random.IntN(randRange) == 0 {
		s.bucketCounts.mutateRandom(random, schem)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *HistogramValue) IsEqual(right *HistogramValue) bool {
	// Compare Count field.
	if !pkg.Int64Equal(s.count, right.count) {
		return false
	}
	// Compare Sum field.
	sSumPresent := s.optionalFieldsPresent&fieldPresentHistogramValueSum != 0
	rightSumPresent := right.optionalFieldsPresent&fieldPresentHistogramValueSum != 0
	if sSumPresent != rightSumPresent {
		return false
	}
	if sSumPresent { // Compare only if Sum field is present
		if !pkg.Float64Equal(s.sum, right.sum) {
			return false
		}
	}

	// Compare Min field.
	sMinPresent := s.optionalFieldsPresent&fieldPresentHistogramValueMin != 0
	rightMinPresent := right.optionalFieldsPresent&fieldPresentHistogramValueMin != 0
	if sMinPresent != rightMinPresent {
		return false
	}
	if sMinPresent { // Compare only if Min field is present
		if !pkg.Float64Equal(s.min, right.min) {
			return false
		}
	}

	// Compare Max field.
	sMaxPresent := s.optionalFieldsPresent&fieldPresentHistogramValueMax != 0
	rightMaxPresent := right.optionalFieldsPresent&fieldPresentHistogramValueMax != 0
	if sMaxPresent != rightMaxPresent {
		return false
	}
	if sMaxPresent { // Compare only if Max field is present
		if !pkg.Float64Equal(s.max, right.max) {
			return false
		}
	}

	// Compare BucketCounts field.
	if !s.bucketCounts.IsEqual(&right.bucketCounts) {
		return false
	}

	return true
}

func HistogramValueEqual(left, right *HistogramValue) bool {
	return left.IsEqual(right)
}

// CmpHistogramValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpHistogramValue(left, right *HistogramValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Count field.
	if c := pkg.Int64Compare(left.count, right.count); c != 0 {
		return c
	}

	// Compare Sum field.
	leftSumPresent := left.optionalFieldsPresent&fieldPresentHistogramValueSum != 0
	rightSumPresent := right.optionalFieldsPresent&fieldPresentHistogramValueSum != 0
	if leftSumPresent != rightSumPresent {
		if leftSumPresent {
			return 1
		}
		return -1
	}
	if c := pkg.Float64Compare(left.sum, right.sum); c != 0 {
		return c
	}

	// Compare Min field.
	leftMinPresent := left.optionalFieldsPresent&fieldPresentHistogramValueMin != 0
	rightMinPresent := right.optionalFieldsPresent&fieldPresentHistogramValueMin != 0
	if leftMinPresent != rightMinPresent {
		if leftMinPresent {
			return 1
		}
		return -1
	}
	if c := pkg.Float64Compare(left.min, right.min); c != 0 {
		return c
	}

	// Compare Max field.
	leftMaxPresent := left.optionalFieldsPresent&fieldPresentHistogramValueMax != 0
	rightMaxPresent := right.optionalFieldsPresent&fieldPresentHistogramValueMax != 0
	if leftMaxPresent != rightMaxPresent {
		if leftMaxPresent {
			return 1
		}
		return -1
	}
	if c := pkg.Float64Compare(left.max, right.max); c != 0 {
		return c
	}

	// Compare BucketCounts field.
	if c := CmpInt64Array(&left.bucketCounts, &right.bucketCounts); c != 0 {
		return c
	}

	return 0
}

// HistogramValueEncoder implements encoding of HistogramValue
type HistogramValueEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	countEncoder encoders.Int64Encoder

	sumEncoder encoders.Float64Encoder

	minEncoder encoders.Float64Encoder

	maxEncoder encoders.Float64Encoder

	bucketCountsEncoder     *Int64ArrayEncoder
	isBucketCountsRecursive bool // Indicates BucketCounts field's type is recursive.

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *HistogramValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.HistogramValueEncoder != nil {
		panic("cannot initialize HistogramValueEncoder: already initialized")
	}
	state.HistogramValueEncoder = e
	defer func() { state.HistogramValueEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.HistogramValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "HistogramValue", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Count field.
	if e.fieldCount <= 0 {
		return nil // Count and all subsequent fields are skipped.
	}
	err = e.countEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Sum field.
	if e.fieldCount <= 1 {
		return nil // Sum and all subsequent fields are skipped.
	}
	err = e.sumEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Min field.
	if e.fieldCount <= 2 {
		return nil // Min and all subsequent fields are skipped.
	}
	err = e.minEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Max field.
	if e.fieldCount <= 3 {
		return nil // Max and all subsequent fields are skipped.
	}
	err = e.maxEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for BucketCounts field.
	if e.fieldCount <= 4 {
		return nil // BucketCounts and all subsequent fields are skipped.
	}
	if state.Int64ArrayEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.bucketCountsEncoder = state.Int64ArrayEncoder
		e.isBucketCountsRecursive = true
	} else {
		e.bucketCountsEncoder = new(Int64ArrayEncoder)
		err = e.bucketCountsEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *HistogramValueEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if e.fieldCount <= 0 {
		return // Count and all subsequent fields are skipped.
	}
	e.countEncoder.Reset()
	if e.fieldCount <= 1 {
		return // Sum and all subsequent fields are skipped.
	}
	e.sumEncoder.Reset()
	if e.fieldCount <= 2 {
		return // Min and all subsequent fields are skipped.
	}
	e.minEncoder.Reset()
	if e.fieldCount <= 3 {
		return // Max and all subsequent fields are skipped.
	}
	e.maxEncoder.Reset()
	if e.fieldCount <= 4 {
		return // BucketCounts and all subsequent fields are skipped.
	}

	if !e.isBucketCountsRecursive {
		e.bucketCountsEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *HistogramValueEncoder) Encode(val *HistogramValue) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedHistogramValueCount |
				fieldModifiedHistogramValueSum |
				fieldModifiedHistogramValueMin |
				fieldModifiedHistogramValueMax |
				fieldModifiedHistogramValueBucketCounts | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Write bits to indicate which optional fields are set.
	e.buf.WriteBits(val.optionalFieldsPresent, 3)
	bitCount += 3

	// Encode modified, present fields.

	if fieldMask&fieldModifiedHistogramValueCount != 0 {
		// Encode Count
		e.countEncoder.Encode(val.count)
	}

	if fieldMask&fieldModifiedHistogramValueSum != 0 &&
		val.optionalFieldsPresent&fieldPresentHistogramValueSum != 0 {
		// Encode Sum
		e.sumEncoder.Encode(val.sum)
	}

	if fieldMask&fieldModifiedHistogramValueMin != 0 &&
		val.optionalFieldsPresent&fieldPresentHistogramValueMin != 0 {
		// Encode Min
		e.minEncoder.Encode(val.min)
	}

	if fieldMask&fieldModifiedHistogramValueMax != 0 &&
		val.optionalFieldsPresent&fieldPresentHistogramValueMax != 0 {
		// Encode Max
		e.maxEncoder.Encode(val.max)
	}

	if fieldMask&fieldModifiedHistogramValueBucketCounts != 0 {
		// Encode BucketCounts
		e.bucketCountsEncoder.Encode(&val.bucketCounts)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *HistogramValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Count field.
	if e.fieldCount <= 0 {
		return // Count and subsequent fields are skipped.
	}

	e.countEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Sum field.
	if e.fieldCount <= 1 {
		return // Sum and subsequent fields are skipped.
	}

	e.sumEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Min field.
	if e.fieldCount <= 2 {
		return // Min and subsequent fields are skipped.
	}

	e.minEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Max field.
	if e.fieldCount <= 3 {
		return // Max and subsequent fields are skipped.
	}

	e.maxEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect BucketCounts field.
	if e.fieldCount <= 4 {
		return // BucketCounts and subsequent fields are skipped.
	}
	if !e.isBucketCountsRecursive {
		e.bucketCountsEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// HistogramValueDecoder implements decoding of HistogramValue
type HistogramValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	fieldCount uint

	countDecoder encoders.Int64Decoder

	sumDecoder encoders.Float64Decoder

	minDecoder encoders.Float64Decoder

	maxDecoder encoders.Float64Decoder

	bucketCountsDecoder     *Int64ArrayDecoder
	isBucketCountsRecursive bool

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *HistogramValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.HistogramValueDecoder != nil {
		panic("cannot initialize HistogramValueDecoder: already initialized")
	}
	state.HistogramValueDecoder = d
	defer func() { state.HistogramValueDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.HistogramValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "HistogramValue", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Count and subsequent fields are skipped.
	}
	err = d.countDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Sum and subsequent fields are skipped.
	}
	err = d.sumDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Min and subsequent fields are skipped.
	}
	err = d.minDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Max and subsequent fields are skipped.
	}
	err = d.maxDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // BucketCounts and subsequent fields are skipped.
	}
	if state.Int64ArrayDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.bucketCountsDecoder = state.Int64ArrayDecoder
		d.isBucketCountsRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.bucketCountsDecoder = new(Int64ArrayDecoder)
		err = d.bucketCountsDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *HistogramValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Count and subsequent fields are skipped.
	}
	d.countDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Sum and subsequent fields are skipped.
	}
	d.sumDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Min and subsequent fields are skipped.
	}
	d.minDecoder.Continue()
	if d.fieldCount <= 3 {
		return // Max and subsequent fields are skipped.
	}
	d.maxDecoder.Continue()
	if d.fieldCount <= 4 {
		return // BucketCounts and subsequent fields are skipped.
	}

	if !d.isBucketCountsRecursive {
		d.bucketCountsDecoder.Continue()
	}

}

func (d *HistogramValueDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Count and all subsequent fields are skipped.
	}
	d.countDecoder.Reset()
	if d.fieldCount <= 1 {
		return // Sum and all subsequent fields are skipped.
	}
	d.sumDecoder.Reset()
	if d.fieldCount <= 2 {
		return // Min and all subsequent fields are skipped.
	}
	d.minDecoder.Reset()
	if d.fieldCount <= 3 {
		return // Max and all subsequent fields are skipped.
	}
	d.maxDecoder.Reset()
	if d.fieldCount <= 4 {
		return // BucketCounts and all subsequent fields are skipped.
	}

	if !d.isBucketCountsRecursive {
		d.bucketCountsDecoder.Reset()
	}

}

func (d *HistogramValueDecoder) Decode(dstPtr *HistogramValue) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	// Write bits to indicate which optional fields are set.
	val.optionalFieldsPresent = d.buf.ReadBits(3)

	if val.modifiedFields.mask&fieldModifiedHistogramValueCount != 0 {
		// Field is changed and is present, decode it.
		err = d.countDecoder.Decode(&val.count)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedHistogramValueSum != 0 &&
		val.optionalFieldsPresent&fieldPresentHistogramValueSum != 0 {
		// Field is changed and is present, decode it.
		err = d.sumDecoder.Decode(&val.sum)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedHistogramValueMin != 0 &&
		val.optionalFieldsPresent&fieldPresentHistogramValueMin != 0 {
		// Field is changed and is present, decode it.
		err = d.minDecoder.Decode(&val.min)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedHistogramValueMax != 0 &&
		val.optionalFieldsPresent&fieldPresentHistogramValueMax != 0 {
		// Field is changed and is present, decode it.
		err = d.maxDecoder.Decode(&val.max)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedHistogramValueBucketCounts != 0 {
		// Field is changed and is present, decode it.
		err = d.bucketCountsDecoder.Decode(&val.bucketCounts)
		if err != nil {
			return err
		}
	}

	return nil
}

// HistogramValueAllocator implements a custom allocator for HistogramValue.
// It maintains a pool of pre-allocated HistogramValue and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type HistogramValueAllocator struct {
	pool []HistogramValue
	ofs  int
}

// Alloc returns the next available HistogramValue from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *HistogramValueAllocator) Alloc() *HistogramValue {
	if a.ofs < len(a.pool) {
		// Get the next available HistogramValue from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *HistogramValueAllocator) prealloc() *HistogramValue {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]HistogramValue, newLen)
	a.ofs = 1
	return &a.pool[0]
}
