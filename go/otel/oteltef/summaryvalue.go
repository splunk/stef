// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type SummaryValue struct {
	count          uint64
	sum            float64
	quantileValues QuantileValueArray

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const SummaryValueStructName = "SummaryValue"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedSummaryValueCount = uint64(1 << iota)
	fieldModifiedSummaryValueSum
	fieldModifiedSummaryValueQuantileValues
)

// Init must be called once, before the SummaryValue is used.
func (s *SummaryValue) Init() {
	s.init(nil, 0)
}

func NewSummaryValue() *SummaryValue {
	var s SummaryValue
	s.init(nil, 0)
	return &s
}

func (s *SummaryValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.quantileValues.init(&s.modifiedFields, fieldModifiedSummaryValueQuantileValues)
}

func (s *SummaryValue) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.quantileValues.initAlloc(&s.modifiedFields, fieldModifiedSummaryValueQuantileValues, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *SummaryValue) reset() {

	s.count = 0
	s.sum = 0.0
	s.quantileValues.reset()
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *SummaryValue) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields

	s.quantileValues.fixParent(&s.modifiedFields)
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing without cloning
// which can improve performance.
func (s *SummaryValue) Freeze() {
	s.modifiedFields.freeze()
}

func (s *SummaryValue) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *SummaryValue) Count() uint64 {
	return s.count
}

// SetCount sets the value of Count field.
func (s *SummaryValue) SetCount(v uint64) {
	if s.count != v {
		s.count = v
		s.markCountModified()
	}
}

func (s *SummaryValue) markCountModified() {
	s.modifiedFields.markModified(fieldModifiedSummaryValueCount)
}

// IsCountModified returns true the value of Count field was modified since
// SummaryValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *SummaryValue) IsCountModified() bool {
	return s.modifiedFields.mask&fieldModifiedSummaryValueCount != 0
}

func (s *SummaryValue) Sum() float64 {
	return s.sum
}

// SetSum sets the value of Sum field.
func (s *SummaryValue) SetSum(v float64) {
	if s.sum != v {
		s.sum = v
		s.markSumModified()
	}
}

func (s *SummaryValue) markSumModified() {
	s.modifiedFields.markModified(fieldModifiedSummaryValueSum)
}

// IsSumModified returns true the value of Sum field was modified since
// SummaryValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *SummaryValue) IsSumModified() bool {
	return s.modifiedFields.mask&fieldModifiedSummaryValueSum != 0
}

func (s *SummaryValue) QuantileValues() *QuantileValueArray {
	return &s.quantileValues
}

func (s *SummaryValue) markQuantileValuesModified() {
	s.modifiedFields.markModified(fieldModifiedSummaryValueQuantileValues)
}

// IsQuantileValuesModified returns true the value of QuantileValues field was modified since
// SummaryValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *SummaryValue) IsQuantileValuesModified() bool {
	return s.modifiedFields.mask&fieldModifiedSummaryValueQuantileValues != 0
}

func (s *SummaryValue) markModifiedRecursively() {

	s.quantileValues.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedSummaryValueCount |
			fieldModifiedSummaryValueSum |
			fieldModifiedSummaryValueQuantileValues | 0
}

func (s *SummaryValue) markUnmodifiedRecursively() {

	if s.IsCountModified() {
	}

	if s.IsSumModified() {
	}

	if s.IsQuantileValuesModified() {
		s.quantileValues.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// canBeShared returns true if s is safe to share without cloning (for example if s is frozen).
func (s *SummaryValue) canBeShared() bool {
	return s.isFrozen()
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *SummaryValue) CloneShared(allocators *Allocators) SummaryValue {

	return s.Clone(allocators)
}

func (s *SummaryValue) Clone(allocators *Allocators) SummaryValue {

	c := SummaryValue{

		//modifiedFields: s.modifiedFields,
		count:          s.count,
		sum:            s.sum,
		quantileValues: s.quantileValues.CloneShared(allocators),
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *SummaryValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.quantileValues.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copySummaryValue(dst *SummaryValue, src *SummaryValue) {
	dst.SetCount(src.count)
	dst.SetSum(src.sum)
	copyQuantileValueArray(&dst.quantileValues, &src.quantileValues)
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewSummaryValue(dst *SummaryValue, src *SummaryValue, allocators *Allocators) {

	dst.SetCount(src.count)
	dst.SetSum(src.sum)
	copyToNewQuantileValueArray(&dst.quantileValues, &src.quantileValues, allocators)
}

// CopyFrom() performs a deep copy from src.
func (s *SummaryValue) CopyFrom(src *SummaryValue) {
	copySummaryValue(s, src)
}

func (s *SummaryValue) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *SummaryValue) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("SummaryValue")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "SummaryValue", err))
	}

	const randRange = max(3, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Count and all subsequent fields are skipped.
	}
	// Maybe mutate Count
	if random.IntN(randRange) == 0 {
		s.SetCount(pkg.Uint64Random(random))
	}
	if fieldCount <= 1 {
		return // Sum and all subsequent fields are skipped.
	}
	// Maybe mutate Sum
	if random.IntN(randRange) == 0 {
		s.SetSum(pkg.Float64Random(random))
	}
	if fieldCount <= 2 {
		return // QuantileValues and all subsequent fields are skipped.
	}
	// Maybe mutate QuantileValues
	if random.IntN(randRange) == 0 {
		s.quantileValues.mutateRandom(random, schem)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *SummaryValue) IsEqual(right *SummaryValue) bool {
	// Compare Count field.
	if !pkg.Uint64Equal(s.count, right.count) {
		return false
	}
	// Compare Sum field.
	if !pkg.Float64Equal(s.sum, right.sum) {
		return false
	}
	// Compare QuantileValues field.
	if !s.quantileValues.IsEqual(&right.quantileValues) {
		return false
	}

	return true
}

func SummaryValueEqual(left, right *SummaryValue) bool {
	return left.IsEqual(right)
}

// CmpSummaryValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpSummaryValue(left, right *SummaryValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Count field.
	if c := pkg.Uint64Compare(left.count, right.count); c != 0 {
		return c
	}

	// Compare Sum field.
	if c := pkg.Float64Compare(left.sum, right.sum); c != 0 {
		return c
	}

	// Compare QuantileValues field.
	if c := CmpQuantileValueArray(&left.quantileValues, &right.quantileValues); c != 0 {
		return c
	}

	return 0
}

// SummaryValueEncoder implements encoding of SummaryValue
type SummaryValueEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	countEncoder encoders.Uint64Encoder

	sumEncoder encoders.Float64Encoder

	quantileValuesEncoder     *QuantileValueArrayEncoder
	isQuantileValuesRecursive bool // Indicates QuantileValues field's type is recursive.

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *SummaryValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.SummaryValueEncoder != nil {
		panic("cannot initialize SummaryValueEncoder: already initialized")
	}
	state.SummaryValueEncoder = e
	defer func() { state.SummaryValueEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.SummaryValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "SummaryValue", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Count field.
	if e.fieldCount <= 0 {
		return nil // Count and all subsequent fields are skipped.
	}
	err = e.countEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Sum field.
	if e.fieldCount <= 1 {
		return nil // Sum and all subsequent fields are skipped.
	}
	err = e.sumEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for QuantileValues field.
	if e.fieldCount <= 2 {
		return nil // QuantileValues and all subsequent fields are skipped.
	}
	if state.QuantileValueArrayEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.quantileValuesEncoder = state.QuantileValueArrayEncoder
		e.isQuantileValuesRecursive = true
	} else {
		e.quantileValuesEncoder = new(QuantileValueArrayEncoder)
		err = e.quantileValuesEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *SummaryValueEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if e.fieldCount <= 0 {
		return // Count and all subsequent fields are skipped.
	}
	e.countEncoder.Reset()
	if e.fieldCount <= 1 {
		return // Sum and all subsequent fields are skipped.
	}
	e.sumEncoder.Reset()
	if e.fieldCount <= 2 {
		return // QuantileValues and all subsequent fields are skipped.
	}

	if !e.isQuantileValuesRecursive {
		e.quantileValuesEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *SummaryValueEncoder) Encode(val *SummaryValue) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedSummaryValueCount |
				fieldModifiedSummaryValueSum |
				fieldModifiedSummaryValueQuantileValues | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedSummaryValueCount != 0 {
		// Encode Count
		e.countEncoder.Encode(val.count)
	}

	if fieldMask&fieldModifiedSummaryValueSum != 0 {
		// Encode Sum
		e.sumEncoder.Encode(val.sum)
	}

	if fieldMask&fieldModifiedSummaryValueQuantileValues != 0 {
		// Encode QuantileValues
		e.quantileValuesEncoder.Encode(&val.quantileValues)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *SummaryValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Count field.
	if e.fieldCount <= 0 {
		return // Count and subsequent fields are skipped.
	}

	e.countEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Sum field.
	if e.fieldCount <= 1 {
		return // Sum and subsequent fields are skipped.
	}

	e.sumEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect QuantileValues field.
	if e.fieldCount <= 2 {
		return // QuantileValues and subsequent fields are skipped.
	}
	if !e.isQuantileValuesRecursive {
		e.quantileValuesEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// SummaryValueDecoder implements decoding of SummaryValue
type SummaryValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	fieldCount uint

	countDecoder encoders.Uint64Decoder

	sumDecoder encoders.Float64Decoder

	quantileValuesDecoder     *QuantileValueArrayDecoder
	isQuantileValuesRecursive bool

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *SummaryValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.SummaryValueDecoder != nil {
		panic("cannot initialize SummaryValueDecoder: already initialized")
	}
	state.SummaryValueDecoder = d
	defer func() { state.SummaryValueDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.SummaryValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "SummaryValue", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Count and subsequent fields are skipped.
	}
	err = d.countDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Sum and subsequent fields are skipped.
	}
	err = d.sumDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // QuantileValues and subsequent fields are skipped.
	}
	if state.QuantileValueArrayDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.quantileValuesDecoder = state.QuantileValueArrayDecoder
		d.isQuantileValuesRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.quantileValuesDecoder = new(QuantileValueArrayDecoder)
		err = d.quantileValuesDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *SummaryValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Count and subsequent fields are skipped.
	}
	d.countDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Sum and subsequent fields are skipped.
	}
	d.sumDecoder.Continue()
	if d.fieldCount <= 2 {
		return // QuantileValues and subsequent fields are skipped.
	}

	if !d.isQuantileValuesRecursive {
		d.quantileValuesDecoder.Continue()
	}

}

func (d *SummaryValueDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Count and all subsequent fields are skipped.
	}
	d.countDecoder.Reset()
	if d.fieldCount <= 1 {
		return // Sum and all subsequent fields are skipped.
	}
	d.sumDecoder.Reset()
	if d.fieldCount <= 2 {
		return // QuantileValues and all subsequent fields are skipped.
	}

	if !d.isQuantileValuesRecursive {
		d.quantileValuesDecoder.Reset()
	}

}

func (d *SummaryValueDecoder) Decode(dstPtr *SummaryValue) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedSummaryValueCount != 0 {
		// Field is changed and is present, decode it.
		err = d.countDecoder.Decode(&val.count)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSummaryValueSum != 0 {
		// Field is changed and is present, decode it.
		err = d.sumDecoder.Decode(&val.sum)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSummaryValueQuantileValues != 0 {
		// Field is changed and is present, decode it.
		err = d.quantileValuesDecoder.Decode(&val.quantileValues)
		if err != nil {
			return err
		}
	}

	return nil
}

// SummaryValueAllocator implements a custom allocator for SummaryValue.
// It maintains a pool of pre-allocated SummaryValue and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type SummaryValueAllocator struct {
	pool []SummaryValue
	ofs  int
}

// Alloc returns the next available SummaryValue from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *SummaryValueAllocator) Alloc() *SummaryValue {
	if a.ofs < len(a.pool) {
		// Get the next available SummaryValue from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *SummaryValueAllocator) prealloc() *SummaryValue {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]SummaryValue, newLen)
	a.ofs = 1
	return &a.pool[0]
}
