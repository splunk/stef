// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Spans struct {
	envelope Envelope
	resource *Resource
	scope    *Scope
	span     Span

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const SpansStructName = "Spans"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedSpansEnvelope = uint64(1 << iota)
	fieldModifiedSpansResource
	fieldModifiedSpansScope
	fieldModifiedSpansSpan
)

// Init must be called once, before the Spans is used.
func (s *Spans) Init() {
	s.init(nil, 0)
}

func NewSpans() *Spans {
	var s Spans
	s.init(nil, 0)
	return &s
}

func (s *Spans) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.envelope.init(&s.modifiedFields, fieldModifiedSpansEnvelope)
	s.resource = &Resource{}
	s.resource.init(&s.modifiedFields, fieldModifiedSpansResource)
	s.scope = &Scope{}
	s.scope.init(&s.modifiedFields, fieldModifiedSpansScope)
	s.span.init(&s.modifiedFields, fieldModifiedSpansSpan)
}

func (s *Spans) Envelope() *Envelope {
	return &s.envelope
}

// IsEnvelopeModified returns true the value of Envelope field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsEnvelopeModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansEnvelope != 0
}

func (s *Spans) Resource() *Resource {
	return s.resource
}

// IsResourceModified returns true the value of Resource field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsResourceModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansResource != 0
}

func (s *Spans) Scope() *Scope {
	return s.scope
}

// IsScopeModified returns true the value of Scope field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsScopeModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansScope != 0
}

func (s *Spans) Span() *Span {
	return &s.span
}

// IsSpanModified returns true the value of Span field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsSpanModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansSpan != 0
}

func (s *Spans) markModifiedRecursively() {

	s.envelope.markModifiedRecursively()

	s.resource.markModifiedRecursively()

	s.scope.markModifiedRecursively()

	s.span.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedSpansEnvelope |
			fieldModifiedSpansResource |
			fieldModifiedSpansScope |
			fieldModifiedSpansSpan | 0
}

func (s *Spans) markUnmodifiedRecursively() {

	if s.IsEnvelopeModified() {
		s.envelope.markUnmodifiedRecursively()
	}

	if s.IsResourceModified() {
		s.resource.markUnmodifiedRecursively()
	}

	if s.IsScopeModified() {
		s.scope.markUnmodifiedRecursively()
	}

	if s.IsSpanModified() {
		s.span.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// markDiffModified marks fields in this struct modified if they differ from
// the corresponding fields in v.
func (s *Spans) markDiffModified(v *Spans) (modified bool) {
	if s.envelope.markDiffModified(&v.envelope) {
		s.modifiedFields.markModified(fieldModifiedSpansEnvelope)
		modified = true
	}

	if s.resource.markDiffModified(v.resource) {
		s.modifiedFields.markModified(fieldModifiedSpansResource)
		modified = true
	}

	if s.scope.markDiffModified(v.scope) {
		s.modifiedFields.markModified(fieldModifiedSpansScope)
		modified = true
	}

	if s.span.markDiffModified(&v.span) {
		s.modifiedFields.markModified(fieldModifiedSpansSpan)
		modified = true
	}

	return modified
}

func (s *Spans) Clone() Spans {
	return Spans{
		envelope: s.envelope.Clone(),
		resource: s.resource.Clone(),
		scope:    s.scope.Clone(),
		span:     s.span.Clone(),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Spans) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.envelope.byteSize() + s.resource.byteSize() + s.scope.byteSize() + s.span.byteSize() + 0
}

func copySpans(dst *Spans, src *Spans) {
	copyEnvelope(&dst.envelope, &src.envelope)
	if src.resource != nil {
		if dst.resource == nil {
			dst.resource = &Resource{}
			dst.resource.init(&dst.modifiedFields, fieldModifiedSpansResource)
		}
		copyResource(dst.resource, src.resource)
	}
	if src.scope != nil {
		if dst.scope == nil {
			dst.scope = &Scope{}
			dst.scope.init(&dst.modifiedFields, fieldModifiedSpansScope)
		}
		copyScope(dst.scope, src.scope)
	}
	copySpan(&dst.span, &src.span)
}

// CopyFrom() performs a deep copy from src.
func (s *Spans) CopyFrom(src *Spans) {
	copySpans(s, src)
}

func (s *Spans) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Spans) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.envelope.markUnmodified()
	s.resource.markUnmodified()
	s.scope.markUnmodified()
	s.span.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *Spans) mutateRandom(random *rand.Rand) {
	const fieldCount = max(4, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
	if random.IntN(fieldCount) == 0 {
		s.envelope.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.resource.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.scope.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.span.mutateRandom(random)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *Spans) IsEqual(right *Spans) bool {
	// Compare Envelope field.
	if !s.envelope.IsEqual(&right.envelope) {
		return false
	}
	// Compare Resource field.
	if !s.resource.IsEqual(right.resource) {
		return false
	}
	// Compare Scope field.
	if !s.scope.IsEqual(right.scope) {
		return false
	}
	// Compare Span field.
	if !s.span.IsEqual(&right.span) {
		return false
	}

	return true
}

func SpansEqual(left, right *Spans) bool {
	return left.IsEqual(right)
}

// CmpSpans performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpSpans(left, right *Spans) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Envelope field.
	if c := CmpEnvelope(&left.envelope, &right.envelope); c != 0 {
		return c
	}

	// Compare Resource field.
	if c := CmpResource(left.resource, right.resource); c != 0 {
		return c
	}

	// Compare Scope field.
	if c := CmpScope(left.scope, right.scope); c != 0 {
		return c
	}

	// Compare Span field.
	if c := CmpSpan(&left.span, &right.span); c != 0 {
		return c
	}

	return 0
}

// SpansEncoder implements encoding of Spans
type SpansEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	envelopeEncoder     *EnvelopeEncoder
	isEnvelopeRecursive bool // Indicates Envelope field's type is recursive.

	resourceEncoder     *ResourceEncoder
	isResourceRecursive bool // Indicates Resource field's type is recursive.

	scopeEncoder     *ScopeEncoder
	isScopeRecursive bool // Indicates Scope field's type is recursive.

	spanEncoder     *SpanEncoder
	isSpanRecursive bool // Indicates Span field's type is recursive.

	keepFieldMask uint64
	fieldCount    uint
}

func (e *SpansEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.SpansEncoder != nil {
		panic("cannot initialize SpansEncoder: already initialized")
	}
	state.SpansEncoder = e
	defer func() { state.SpansEncoder = nil }()

	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Spans")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Spans")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 4
		e.keepFieldMask = ^uint64(0)
	}

	var err error

	// Init encoder for Envelope field.
	if e.fieldCount <= 0 {
		// Envelope and all subsequent fields are skipped.
		return nil
	}
	if state.EnvelopeEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.envelopeEncoder = state.EnvelopeEncoder
		e.isEnvelopeRecursive = true
	} else {
		e.envelopeEncoder = new(EnvelopeEncoder)
		err = e.envelopeEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Resource field.
	if e.fieldCount <= 1 {
		// Resource and all subsequent fields are skipped.
		return nil
	}
	if state.ResourceEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.resourceEncoder = state.ResourceEncoder
		e.isResourceRecursive = true
	} else {
		e.resourceEncoder = new(ResourceEncoder)
		err = e.resourceEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Scope field.
	if e.fieldCount <= 2 {
		// Scope and all subsequent fields are skipped.
		return nil
	}
	if state.ScopeEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.scopeEncoder = state.ScopeEncoder
		e.isScopeRecursive = true
	} else {
		e.scopeEncoder = new(ScopeEncoder)
		err = e.scopeEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Span field.
	if e.fieldCount <= 3 {
		// Span and all subsequent fields are skipped.
		return nil
	}
	if state.SpanEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.spanEncoder = state.SpanEncoder
		e.isSpanRecursive = true
	} else {
		e.spanEncoder = new(SpanEncoder)
		err = e.spanEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *SpansEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if !e.isEnvelopeRecursive {
		e.envelopeEncoder.Reset()
	}

	if !e.isResourceRecursive {
		e.resourceEncoder.Reset()
	}

	if !e.isScopeRecursive {
		e.scopeEncoder.Reset()
	}

	if !e.isSpanRecursive {
		e.spanEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *SpansEncoder) Encode(val *Spans) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedSpansEnvelope |
				fieldModifiedSpansResource |
				fieldModifiedSpansScope |
				fieldModifiedSpansSpan | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedSpansEnvelope != 0 {
		// Encode Envelope
		e.envelopeEncoder.Encode(&val.envelope)
	}

	if fieldMask&fieldModifiedSpansResource != 0 {
		// Encode Resource
		e.resourceEncoder.Encode(val.resource)
	}

	if fieldMask&fieldModifiedSpansScope != 0 {
		// Encode Scope
		e.scopeEncoder.Encode(val.scope)
	}

	if fieldMask&fieldModifiedSpansSpan != 0 {
		// Encode Span
		e.spanEncoder.Encode(&val.span)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *SpansEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Envelope field.
	if e.fieldCount <= 0 {
		return // Envelope and subsequent fields are skipped.
	}
	if !e.isEnvelopeRecursive {
		e.envelopeEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Resource field.
	if e.fieldCount <= 1 {
		return // Resource and subsequent fields are skipped.
	}
	if !e.isResourceRecursive {
		e.resourceEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Scope field.
	if e.fieldCount <= 2 {
		return // Scope and subsequent fields are skipped.
	}
	if !e.isScopeRecursive {
		e.scopeEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Span field.
	if e.fieldCount <= 3 {
		return // Span and subsequent fields are skipped.
	}
	if !e.isSpanRecursive {
		e.spanEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// SpansDecoder implements decoding of Spans
type SpansDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Spans
	lastVal    Spans
	fieldCount uint

	envelopeDecoder     *EnvelopeDecoder
	isEnvelopeRecursive bool

	resourceDecoder     *ResourceDecoder
	isResourceRecursive bool

	scopeDecoder     *ScopeDecoder
	isScopeRecursive bool

	spanDecoder     *SpanDecoder
	isSpanRecursive bool
}

// Init is called once in the lifetime of the stream.
func (d *SpansDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.SpansDecoder != nil {
		panic("cannot initialize SpansDecoder: already initialized")
	}
	state.SpansDecoder = d
	defer func() { state.SpansDecoder = nil }()

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Spans")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Spans")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 4
	}

	d.column = columns.Column()

	d.lastVal.Init()
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // Envelope and subsequent fields are skipped.
	}
	if state.EnvelopeDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.envelopeDecoder = state.EnvelopeDecoder
		d.isEnvelopeRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.envelopeDecoder = new(EnvelopeDecoder)
		err = d.envelopeDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Resource and subsequent fields are skipped.
	}
	if state.ResourceDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.resourceDecoder = state.ResourceDecoder
		d.isResourceRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.resourceDecoder = new(ResourceDecoder)
		err = d.resourceDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Scope and subsequent fields are skipped.
	}
	if state.ScopeDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.scopeDecoder = state.ScopeDecoder
		d.isScopeRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.scopeDecoder = new(ScopeDecoder)
		err = d.scopeDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Span and subsequent fields are skipped.
	}
	if state.SpanDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.spanDecoder = state.SpanDecoder
		d.isSpanRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.spanDecoder = new(SpanDecoder)
		err = d.spanDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *SpansDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Envelope and subsequent fields are skipped.
	}

	if !d.isEnvelopeRecursive {
		d.envelopeDecoder.Continue()
	}

	if d.fieldCount <= 1 {
		return // Resource and subsequent fields are skipped.
	}

	if !d.isResourceRecursive {
		d.resourceDecoder.Continue()
	}

	if d.fieldCount <= 2 {
		return // Scope and subsequent fields are skipped.
	}

	if !d.isScopeRecursive {
		d.scopeDecoder.Continue()
	}

	if d.fieldCount <= 3 {
		return // Span and subsequent fields are skipped.
	}

	if !d.isSpanRecursive {
		d.spanDecoder.Continue()
	}

}

func (d *SpansDecoder) Reset() {

	if !d.isEnvelopeRecursive {
		d.envelopeDecoder.Reset()
	}

	if !d.isResourceRecursive {
		d.resourceDecoder.Reset()
	}

	if !d.isScopeRecursive {
		d.scopeDecoder.Reset()
	}

	if !d.isSpanRecursive {
		d.spanDecoder.Reset()
	}

}

func (d *SpansDecoder) Decode(dstPtr *Spans) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedSpansEnvelope != 0 {
		// Field is changed and is present, decode it.
		err = d.envelopeDecoder.Decode(&val.envelope)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSpansResource != 0 {
		// Field is changed and is present, decode it.
		if val.resource == nil {
			val.resource = &Resource{}
			val.resource.init(&val.modifiedFields, fieldModifiedSpansResource)
		}

		err = d.resourceDecoder.Decode(&val.resource)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSpansScope != 0 {
		// Field is changed and is present, decode it.
		if val.scope == nil {
			val.scope = &Scope{}
			val.scope.init(&val.modifiedFields, fieldModifiedSpansScope)
		}

		err = d.scopeDecoder.Decode(&val.scope)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSpansSpan != 0 {
		// Field is changed and is present, decode it.
		err = d.spanDecoder.Decode(&val.span)
		if err != nil {
			return err
		}
	}

	return nil
}

var wireSchemaSpans = []byte{0x09, 0x08, 0x41, 0x6E, 0x79, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x07, 0x08, 0x45, 0x6E, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x65, 0x01, 0x05, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x04, 0x04, 0x4C, 0x69, 0x6E, 0x6B, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x03, 0x05, 0x53, 0x63, 0x6F, 0x70, 0x65, 0x05, 0x04, 0x53, 0x70, 0x61, 0x6E, 0x0E, 0x0A, 0x53, 0x70, 0x61, 0x6E, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x02, 0x05, 0x53, 0x70, 0x61, 0x6E, 0x73, 0x04}

func SpansWireSchema() (schema.WireSchema, error) {
	var w schema.WireSchema
	if err := w.Deserialize(bytes.NewBuffer([]byte(wireSchemaSpans))); err != nil {
		return w, err
	}
	return w, nil
}
