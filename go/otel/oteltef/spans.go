// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Spans struct {
	envelope Envelope
	resource *Resource
	scope    *Scope
	span     Span

	allocators *Allocators

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const SpansStructName = "Spans"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedSpansEnvelope = uint64(1 << iota)
	fieldModifiedSpansResource
	fieldModifiedSpansScope
	fieldModifiedSpansSpan
)

// Init must be called once, before the Spans is used.
func (s *Spans) Init(allocators *Allocators) {
	s.init(nil, 0, allocators)
}

func NewSpans(allocators *Allocators) *Spans {
	var s Spans
	s.init(nil, 0, allocators)
	return &s
}

func (s *Spans) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit
	s.allocators = allocators

	s.envelope.init(&s.modifiedFields, fieldModifiedSpansEnvelope, allocators)
	s.resource = allocators.Resource.Alloc()
	s.resource.init(&s.modifiedFields, fieldModifiedSpansResource, allocators)
	s.scope = allocators.Scope.Alloc()
	s.scope.init(&s.modifiedFields, fieldModifiedSpansScope, allocators)
	s.span.init(&s.modifiedFields, fieldModifiedSpansSpan, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *Spans) reset() {

	s.envelope.reset()
	if s.resource != nil {
		s.resource.reset()
	}
	if s.scope != nil {
		s.scope.reset()
	}
	s.span.reset()
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *Spans) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields

	s.envelope.fixParent(&s.modifiedFields)
	s.resource.fixParent(&s.modifiedFields)
	s.scope.fixParent(&s.modifiedFields)
	s.span.fixParent(&s.modifiedFields)
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing without cloning
// which can improve performance.
func (s *Spans) Freeze() {
	s.modifiedFields.freeze()
}

func (s *Spans) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *Spans) Envelope() *Envelope {
	return &s.envelope
}

func (s *Spans) markEnvelopeModified() {
	s.modifiedFields.markModified(fieldModifiedSpansEnvelope)
}

// IsEnvelopeModified returns true the value of Envelope field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsEnvelopeModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansEnvelope != 0
}

func (s *Spans) Resource() *Resource {
	return s.resource
}

// SetResource sets the value of Resource field.
func (s *Spans) SetResource(v *Resource) {
	if !s.resource.IsEqual(v) {
		s.resource = v
		s.markResourceModified()
	}
}

func (s *Spans) markResourceModified() {
	s.modifiedFields.markModified(fieldModifiedSpansResource)
}

// IsResourceModified returns true the value of Resource field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsResourceModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansResource != 0
}

func (s *Spans) Scope() *Scope {
	return s.scope
}

// SetScope sets the value of Scope field.
func (s *Spans) SetScope(v *Scope) {
	if !s.scope.IsEqual(v) {
		s.scope = v
		s.markScopeModified()
	}
}

func (s *Spans) markScopeModified() {
	s.modifiedFields.markModified(fieldModifiedSpansScope)
}

// IsScopeModified returns true the value of Scope field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsScopeModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansScope != 0
}

func (s *Spans) Span() *Span {
	return &s.span
}

func (s *Spans) markSpanModified() {
	s.modifiedFields.markModified(fieldModifiedSpansSpan)
}

// IsSpanModified returns true the value of Span field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsSpanModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansSpan != 0
}

func (s *Spans) markModifiedRecursively() {

	s.envelope.markModifiedRecursively()

	s.resource.markModifiedRecursively()

	s.scope.markModifiedRecursively()

	s.span.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedSpansEnvelope |
			fieldModifiedSpansResource |
			fieldModifiedSpansScope |
			fieldModifiedSpansSpan | 0
}

func (s *Spans) markUnmodifiedRecursively() {

	if s.IsEnvelopeModified() {
		s.envelope.markUnmodifiedRecursively()
	}

	if s.IsResourceModified() {
		s.resource.markUnmodifiedRecursively()
	}

	if s.IsScopeModified() {
		s.scope.markUnmodifiedRecursively()
	}

	if s.IsSpanModified() {
		s.span.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// canBeShared returns true if s is safe to share without cloning (for example if s is frozen).
func (s *Spans) canBeShared() bool {
	return s.isFrozen()
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *Spans) CloneShared() Spans {

	return s.Clone()
}

func (s *Spans) Clone() Spans {

	c := Spans{

		allocators: s.allocators,
		envelope:   s.envelope.CloneShared(),
		resource:   s.resource.CloneShared(),
		scope:      s.scope.CloneShared(),
		span:       s.span.CloneShared(),
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Spans) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.envelope.byteSize() + s.resource.byteSize() + s.scope.byteSize() + s.span.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copySpans(dst *Spans, src *Spans) {

	copyEnvelope(&dst.envelope, &src.envelope)
	if src.resource != nil {
		if src.resource.canBeShared() {
			dst.resource = src.resource
		} else {
			if dst.resource == nil {
				dst.resource = dst.allocators.Resource.Alloc()
				dst.resource.init(&dst.modifiedFields, fieldModifiedSpansResource, dst.allocators)
			}
			copyResource(dst.resource, src.resource)
		}
	} else {
		dst.resource = nil
	}
	if src.scope != nil {
		if src.scope.canBeShared() {
			dst.scope = src.scope
		} else {
			if dst.scope == nil {
				dst.scope = dst.allocators.Scope.Alloc()
				dst.scope.init(&dst.modifiedFields, fieldModifiedSpansScope, dst.allocators)
			}
			copyScope(dst.scope, src.scope)
		}
	} else {
		dst.scope = nil
	}
	copySpan(&dst.span, &src.span)
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewSpans(dst *Spans, src *Spans) {

	copyToNewEnvelope(&dst.envelope, &src.envelope)

	if src.resource != nil {
		if src.resource.canBeShared() {
			dst.resource = src.resource
		} else {
			dst.resource = dst.allocators.Resource.Alloc()
			dst.resource.init(&dst.modifiedFields, fieldModifiedSpansResource, dst.allocators)
			copyToNewResource(dst.resource, src.resource)
		}
	}

	if src.scope != nil {
		if src.scope.canBeShared() {
			dst.scope = src.scope
		} else {
			dst.scope = dst.allocators.Scope.Alloc()
			dst.scope.init(&dst.modifiedFields, fieldModifiedSpansScope, dst.allocators)
			copyToNewScope(dst.scope, src.scope)
		}
	}
	copyToNewSpan(&dst.span, &src.span)
}

// CopyFrom() performs a deep copy from src.
func (s *Spans) CopyFrom(src *Spans) {
	copySpans(s, src)
}

func (s *Spans) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *Spans) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("Spans")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "Spans", err))
	}

	const randRange = max(4, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Envelope and all subsequent fields are skipped.
	}
	// Maybe mutate Envelope
	if random.IntN(randRange) == 0 {
		s.envelope.mutateRandom(random, schem)
	}
	if fieldCount <= 1 {
		return // Resource and all subsequent fields are skipped.
	}
	// Maybe mutate Resource
	if random.IntN(randRange) == 0 {
		s.resource.mutateRandom(random, schem)
	}
	if fieldCount <= 2 {
		return // Scope and all subsequent fields are skipped.
	}
	// Maybe mutate Scope
	if random.IntN(randRange) == 0 {
		s.scope.mutateRandom(random, schem)
	}
	if fieldCount <= 3 {
		return // Span and all subsequent fields are skipped.
	}
	// Maybe mutate Span
	if random.IntN(randRange) == 0 {
		s.span.mutateRandom(random, schem)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *Spans) IsEqual(right *Spans) bool {
	// Compare Envelope field.
	if !s.envelope.IsEqual(&right.envelope) {
		return false
	}
	// Compare Resource field.
	if !s.resource.IsEqual(right.resource) {
		return false
	}
	// Compare Scope field.
	if !s.scope.IsEqual(right.scope) {
		return false
	}
	// Compare Span field.
	if !s.span.IsEqual(&right.span) {
		return false
	}

	return true
}

func SpansEqual(left, right *Spans) bool {
	return left.IsEqual(right)
}

// CmpSpans performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpSpans(left, right *Spans) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Envelope field.
	if c := CmpEnvelope(&left.envelope, &right.envelope); c != 0 {
		return c
	}

	// Compare Resource field.
	if c := CmpResource(left.resource, right.resource); c != 0 {
		return c
	}

	// Compare Scope field.
	if c := CmpScope(left.scope, right.scope); c != 0 {
		return c
	}

	// Compare Span field.
	if c := CmpSpan(&left.span, &right.span); c != 0 {
		return c
	}

	return 0
}

// SpansEncoder implements encoding of Spans
type SpansEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	envelopeEncoder     *EnvelopeEncoder
	isEnvelopeRecursive bool // Indicates Envelope field's type is recursive.

	resourceEncoder     *ResourceEncoder
	isResourceRecursive bool // Indicates Resource field's type is recursive.

	scopeEncoder     *ScopeEncoder
	isScopeRecursive bool // Indicates Scope field's type is recursive.

	spanEncoder     *SpanEncoder
	isSpanRecursive bool // Indicates Span field's type is recursive.

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *SpansEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.SpansEncoder != nil {
		panic("cannot initialize SpansEncoder: already initialized")
	}
	state.SpansEncoder = e
	defer func() { state.SpansEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.SpansFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Spans", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Envelope field.
	if e.fieldCount <= 0 {
		return nil // Envelope and all subsequent fields are skipped.
	}
	if state.EnvelopeEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.envelopeEncoder = state.EnvelopeEncoder
		e.isEnvelopeRecursive = true
	} else {
		e.envelopeEncoder = new(EnvelopeEncoder)
		err = e.envelopeEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Resource field.
	if e.fieldCount <= 1 {
		return nil // Resource and all subsequent fields are skipped.
	}
	if state.ResourceEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.resourceEncoder = state.ResourceEncoder
		e.isResourceRecursive = true
	} else {
		e.resourceEncoder = new(ResourceEncoder)
		err = e.resourceEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Scope field.
	if e.fieldCount <= 2 {
		return nil // Scope and all subsequent fields are skipped.
	}
	if state.ScopeEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.scopeEncoder = state.ScopeEncoder
		e.isScopeRecursive = true
	} else {
		e.scopeEncoder = new(ScopeEncoder)
		err = e.scopeEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Span field.
	if e.fieldCount <= 3 {
		return nil // Span and all subsequent fields are skipped.
	}
	if state.SpanEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.spanEncoder = state.SpanEncoder
		e.isSpanRecursive = true
	} else {
		e.spanEncoder = new(SpanEncoder)
		err = e.spanEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *SpansEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if e.fieldCount <= 0 {
		return // Envelope and all subsequent fields are skipped.
	}

	if !e.isEnvelopeRecursive {
		e.envelopeEncoder.Reset()
	}

	if e.fieldCount <= 1 {
		return // Resource and all subsequent fields are skipped.
	}

	if !e.isResourceRecursive {
		e.resourceEncoder.Reset()
	}

	if e.fieldCount <= 2 {
		return // Scope and all subsequent fields are skipped.
	}

	if !e.isScopeRecursive {
		e.scopeEncoder.Reset()
	}

	if e.fieldCount <= 3 {
		return // Span and all subsequent fields are skipped.
	}

	if !e.isSpanRecursive {
		e.spanEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *SpansEncoder) Encode(val *Spans) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedSpansEnvelope |
				fieldModifiedSpansResource |
				fieldModifiedSpansScope |
				fieldModifiedSpansSpan | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedSpansEnvelope != 0 {
		// Encode Envelope
		e.envelopeEncoder.Encode(&val.envelope)
	}

	if fieldMask&fieldModifiedSpansResource != 0 {
		// Encode Resource
		e.resourceEncoder.Encode(val.resource)
	}

	if fieldMask&fieldModifiedSpansScope != 0 {
		// Encode Scope
		e.scopeEncoder.Encode(val.scope)
	}

	if fieldMask&fieldModifiedSpansSpan != 0 {
		// Encode Span
		e.spanEncoder.Encode(&val.span)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *SpansEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Envelope field.
	if e.fieldCount <= 0 {
		return // Envelope and subsequent fields are skipped.
	}
	if !e.isEnvelopeRecursive {
		e.envelopeEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Resource field.
	if e.fieldCount <= 1 {
		return // Resource and subsequent fields are skipped.
	}
	if !e.isResourceRecursive {
		e.resourceEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Scope field.
	if e.fieldCount <= 2 {
		return // Scope and subsequent fields are skipped.
	}
	if !e.isScopeRecursive {
		e.scopeEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Span field.
	if e.fieldCount <= 3 {
		return // Span and subsequent fields are skipped.
	}
	if !e.isSpanRecursive {
		e.spanEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// SpansDecoder implements decoding of Spans
type SpansDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	fieldCount uint

	envelopeDecoder     *EnvelopeDecoder
	isEnvelopeRecursive bool

	resourceDecoder     *ResourceDecoder
	isResourceRecursive bool

	scopeDecoder     *ScopeDecoder
	isScopeRecursive bool

	spanDecoder     *SpanDecoder
	isSpanRecursive bool

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *SpansDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.SpansDecoder != nil {
		panic("cannot initialize SpansDecoder: already initialized")
	}
	state.SpansDecoder = d
	defer func() { state.SpansDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.SpansFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Spans", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Envelope and subsequent fields are skipped.
	}
	if state.EnvelopeDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.envelopeDecoder = state.EnvelopeDecoder
		d.isEnvelopeRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.envelopeDecoder = new(EnvelopeDecoder)
		err = d.envelopeDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Resource and subsequent fields are skipped.
	}
	if state.ResourceDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.resourceDecoder = state.ResourceDecoder
		d.isResourceRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.resourceDecoder = new(ResourceDecoder)
		err = d.resourceDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Scope and subsequent fields are skipped.
	}
	if state.ScopeDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.scopeDecoder = state.ScopeDecoder
		d.isScopeRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.scopeDecoder = new(ScopeDecoder)
		err = d.scopeDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Span and subsequent fields are skipped.
	}
	if state.SpanDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.spanDecoder = state.SpanDecoder
		d.isSpanRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.spanDecoder = new(SpanDecoder)
		err = d.spanDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *SpansDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Envelope and subsequent fields are skipped.
	}

	if !d.isEnvelopeRecursive {
		d.envelopeDecoder.Continue()
	}

	if d.fieldCount <= 1 {
		return // Resource and subsequent fields are skipped.
	}

	if !d.isResourceRecursive {
		d.resourceDecoder.Continue()
	}

	if d.fieldCount <= 2 {
		return // Scope and subsequent fields are skipped.
	}

	if !d.isScopeRecursive {
		d.scopeDecoder.Continue()
	}

	if d.fieldCount <= 3 {
		return // Span and subsequent fields are skipped.
	}

	if !d.isSpanRecursive {
		d.spanDecoder.Continue()
	}

}

func (d *SpansDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Envelope and all subsequent fields are skipped.
	}

	if !d.isEnvelopeRecursive {
		d.envelopeDecoder.Reset()
	}

	if d.fieldCount <= 1 {
		return // Resource and all subsequent fields are skipped.
	}

	if !d.isResourceRecursive {
		d.resourceDecoder.Reset()
	}

	if d.fieldCount <= 2 {
		return // Scope and all subsequent fields are skipped.
	}

	if !d.isScopeRecursive {
		d.scopeDecoder.Reset()
	}

	if d.fieldCount <= 3 {
		return // Span and all subsequent fields are skipped.
	}

	if !d.isSpanRecursive {
		d.spanDecoder.Reset()
	}

}

func (d *SpansDecoder) Decode(dstPtr *Spans) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedSpansEnvelope != 0 {
		// Field is changed and is present, decode it.
		err = d.envelopeDecoder.Decode(&val.envelope)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSpansResource != 0 {
		// Field is changed and is present, decode it.
		if val.resource == nil {
			val.resource = d.allocators.Resource.Alloc()
			val.resource.init(&val.modifiedFields, fieldModifiedSpansResource, d.allocators)
		}

		err = d.resourceDecoder.Decode(&val.resource)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSpansScope != 0 {
		// Field is changed and is present, decode it.
		if val.scope == nil {
			val.scope = d.allocators.Scope.Alloc()
			val.scope.init(&val.modifiedFields, fieldModifiedSpansScope, d.allocators)
		}

		err = d.scopeDecoder.Decode(&val.scope)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSpansSpan != 0 {
		// Field is changed and is present, decode it.
		err = d.spanDecoder.Decode(&val.span)
		if err != nil {
			return err
		}
	}

	return nil
}

// SpansAllocator implements a custom allocator for Spans.
// It maintains a pool of pre-allocated Spans and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type SpansAllocator struct {
	pool []Spans
	ofs  int
}

// Alloc returns the next available Spans from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *SpansAllocator) Alloc() *Spans {
	if a.ofs < len(a.pool) {
		// Get the next available Spans from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *SpansAllocator) prealloc() *Spans {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]Spans, newLen)
	a.ofs = 1
	return &a.pool[0]
}

var wireSchemaSpans = []byte{0x09, 0x04, 0x01, 0x03, 0x07, 0x05, 0x0E, 0x04, 0x06, 0x02}

func SpansWireSchema() (schema.WireSchema, error) {
	var w schema.WireSchema
	if err := w.Deserialize(bytes.NewReader(wireSchemaSpans)); err != nil {
		return w, err
	}
	return w, nil
}
