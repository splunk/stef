// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

type Point struct {
	startTimestamp uint64
	timestamp      uint64
	value          PointValue
	exemplars      ExemplarArray

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedPointStartTimestamp = uint64(1 << iota)
	fieldModifiedPointTimestamp
	fieldModifiedPointValue
	fieldModifiedPointExemplars
)

// Init must be called once, before the Point is used.
func (s *Point) Init() {
	s.init(nil, 0)
}

func NewPoint() *Point {
	var s Point
	s.init(nil, 0)
	return &s
}

func (s *Point) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.value.init(&s.modifiedFields, fieldModifiedPointValue)
	s.exemplars.init(&s.modifiedFields, fieldModifiedPointExemplars)
}

func (s *Point) StartTimestamp() uint64 {
	return s.startTimestamp
}

// SetStartTimestamp sets the value of StartTimestamp field.
func (s *Point) SetStartTimestamp(v uint64) {
	if !pkg.Uint64Equal(s.startTimestamp, v) {
		s.startTimestamp = v
		s.markStartTimestampModified()
	}
}

func (s *Point) markStartTimestampModified() {
	s.modifiedFields.markModified(fieldModifiedPointStartTimestamp)
}

// IsStartTimestampModified returns true the value of StartTimestamp field was modified since
// Point was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Point) IsStartTimestampModified() bool {
	return s.modifiedFields.mask&fieldModifiedPointStartTimestamp != 0
}

func (s *Point) Timestamp() uint64 {
	return s.timestamp
}

// SetTimestamp sets the value of Timestamp field.
func (s *Point) SetTimestamp(v uint64) {
	if !pkg.Uint64Equal(s.timestamp, v) {
		s.timestamp = v
		s.markTimestampModified()
	}
}

func (s *Point) markTimestampModified() {
	s.modifiedFields.markModified(fieldModifiedPointTimestamp)
}

// IsTimestampModified returns true the value of Timestamp field was modified since
// Point was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Point) IsTimestampModified() bool {
	return s.modifiedFields.mask&fieldModifiedPointTimestamp != 0
}

func (s *Point) Value() *PointValue {
	return &s.value
}

// IsValueModified returns true the value of Value field was modified since
// Point was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Point) IsValueModified() bool {
	return s.modifiedFields.mask&fieldModifiedPointValue != 0
}

func (s *Point) Exemplars() *ExemplarArray {
	return &s.exemplars
}

// IsExemplarsModified returns true the value of Exemplars field was modified since
// Point was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Point) IsExemplarsModified() bool {
	return s.modifiedFields.mask&fieldModifiedPointExemplars != 0
}

func (s *Point) markUnmodifiedRecursively() {

	if s.IsStartTimestampModified() {
	}

	if s.IsTimestampModified() {
	}

	if s.IsValueModified() {
		s.value.markUnmodifiedRecursively()
	}

	if s.IsExemplarsModified() {
		s.exemplars.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

func (s *Point) Clone() Point {
	return Point{
		startTimestamp: s.startTimestamp,
		timestamp:      s.timestamp,
		value:          s.value.Clone(),
		exemplars:      s.exemplars.Clone(),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Point) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.value.byteSize() + s.exemplars.byteSize() + 0
}

func copyPoint(dst *Point, src *Point) {
	dst.SetStartTimestamp(src.startTimestamp)
	dst.SetTimestamp(src.timestamp)
	copyPointValue(&dst.value, &src.value)
	copyExemplarArray(&dst.exemplars, &src.exemplars)
}

// CopyFrom() performs a deep copy from src.
func (s *Point) CopyFrom(src *Point) {
	copyPoint(s, src)
}

func (s *Point) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Point) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.value.markUnmodified()
	s.exemplars.markUnmodified()
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *Point) IsEqual(val *Point) bool {
	if !pkg.Uint64Equal(e.startTimestamp, val.startTimestamp) {
		return false
	}
	if !pkg.Uint64Equal(e.timestamp, val.timestamp) {
		return false
	}
	if !e.value.IsEqual(&val.value) {
		return false
	}
	if !e.exemplars.IsEqual(&val.exemplars) {
		return false
	}

	return true
}

func PointEqual(left, right *Point) bool {
	return left.IsEqual(right)
}

// CmpPoint performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpPoint(left, right *Point) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	if c := pkg.Uint64Compare(left.startTimestamp, right.startTimestamp); c != 0 {
		return c
	}
	if c := pkg.Uint64Compare(left.timestamp, right.timestamp); c != 0 {
		return c
	}
	if c := CmpPointValue(&left.value, &right.value); c != 0 {
		return c
	}
	if c := CmpExemplarArray(&left.exemplars, &right.exemplars); c != 0 {
		return c
	}

	return 0
}

// PointEncoder implements encoding of Point
type PointEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	startTimestampEncoder encoders.Uint64Encoder
	timestampEncoder      encoders.Uint64Encoder
	valueEncoder          PointValueEncoder
	exemplarsEncoder      ExemplarArrayEncoder

	keepFieldMask uint64
	fieldCount    uint
}

func (e *PointEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.PointEncoder = e
	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		overrideSchema, ok := state.OverrideSchema.Structs["Point"]
		if !ok || overrideSchema == nil {
			return fmt.Errorf("cannot find struct in override schema: %s", "Point")
		}

		// Number of fields in the target schema.
		e.fieldCount = uint(len(overrideSchema.Fields))

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 4
		e.keepFieldMask = ^uint64(0)
	}

	if e.fieldCount <= 0 {
		return nil // StartTimestamp and subsequent fields are skipped.
	}
	if err := e.startTimestampEncoder.Init(e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil // Timestamp and subsequent fields are skipped.
	}
	if err := e.timestampEncoder.Init(e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 2 {
		return nil // Value and subsequent fields are skipped.
	}
	if err := e.valueEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 3 {
		return nil // Exemplars and subsequent fields are skipped.
	}
	if err := e.exemplarsEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}

	return nil
}

func (e *PointEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.startTimestampEncoder.Reset()
	e.timestampEncoder.Reset()
	e.valueEncoder.Reset()
	e.exemplarsEncoder.Reset()
}

// Encode encodes val into buf
func (e *PointEncoder) Encode(val *Point) {
	oldLen := e.buf.BitCount()

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedPointStartTimestamp |
				fieldModifiedPointTimestamp |
				fieldModifiedPointValue |
				fieldModifiedPointExemplars | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)

	// Encode modified, present fields.

	if fieldMask&fieldModifiedPointStartTimestamp != 0 {
		// Encode StartTimestamp
		e.startTimestampEncoder.Encode(val.startTimestamp)
	}

	if fieldMask&fieldModifiedPointTimestamp != 0 {
		// Encode Timestamp
		e.timestampEncoder.Encode(val.timestamp)
	}

	if fieldMask&fieldModifiedPointValue != 0 {
		// Encode Value
		e.valueEncoder.Encode(&val.value)
	}

	if fieldMask&fieldModifiedPointExemplars != 0 {
		// Encode Exemplars
		e.exemplarsEncoder.Encode(&val.exemplars)
	}

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *PointEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // StartTimestamp and subsequent fields are skipped.
	}
	e.startTimestampEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // Timestamp and subsequent fields are skipped.
	}
	e.timestampEncoder.CollectColumns(columnSet.At(1))
	if e.fieldCount <= 2 {
		return // Value and subsequent fields are skipped.
	}
	e.valueEncoder.CollectColumns(columnSet.At(2))
	if e.fieldCount <= 3 {
		return // Exemplars and subsequent fields are skipped.
	}
	e.exemplarsEncoder.CollectColumns(columnSet.At(3))
}

// PointDecoder implements decoding of Point
type PointDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Point
	lastVal    Point
	fieldCount uint

	startTimestampDecoder encoders.Uint64Decoder
	timestampDecoder      encoders.Uint64Decoder
	valueDecoder          PointValueDecoder
	exemplarsDecoder      ExemplarArrayDecoder
}

// Init is called once in the lifetime of the stream.
func (d *PointDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.PointDecoder = d

	if state.OverrideSchema != nil {
		overrideSchema, ok := state.OverrideSchema.Structs["Point"]
		if !ok || overrideSchema == nil {
			return fmt.Errorf("cannot find struct in override schema: %s", "Point")
		}

		// Number of fields in the target schema.
		d.fieldCount = uint(len(overrideSchema.Fields))
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 4
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // StartTimestamp and subsequent fields are skipped.
	}
	err = d.startTimestampDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Timestamp and subsequent fields are skipped.
	}
	err = d.timestampDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Value and subsequent fields are skipped.
	}
	err = d.valueDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Exemplars and subsequent fields are skipped.
	}
	err = d.exemplarsDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *PointDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // StartTimestamp and subsequent fields are skipped.
	}
	d.startTimestampDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Timestamp and subsequent fields are skipped.
	}
	d.timestampDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Value and subsequent fields are skipped.
	}
	d.valueDecoder.Continue()
	if d.fieldCount <= 3 {
		return // Exemplars and subsequent fields are skipped.
	}
	d.exemplarsDecoder.Continue()
}

func (d *PointDecoder) Reset() {
	d.startTimestampDecoder.Reset()
	d.timestampDecoder.Reset()
	d.valueDecoder.Reset()
	d.exemplarsDecoder.Reset()
}

func (d *PointDecoder) Decode(dstPtr *Point) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedPointStartTimestamp != 0 {
		// Field is changed and is present, decode it.
		err = d.startTimestampDecoder.Decode(&val.startTimestamp)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedPointTimestamp != 0 {
		// Field is changed and is present, decode it.
		err = d.timestampDecoder.Decode(&val.timestamp)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedPointValue != 0 {
		// Field is changed and is present, decode it.
		err = d.valueDecoder.Decode(&val.value)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedPointExemplars != 0 {
		// Field is changed and is present, decode it.
		err = d.exemplarsDecoder.Decode(&val.exemplars)
		if err != nil {
			return err
		}
	}

	return nil
}
