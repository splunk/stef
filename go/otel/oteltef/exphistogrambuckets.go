// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type ExpHistogramBuckets struct {
	offset       int64
	bucketCounts Uint64Array

	allocators *Allocators

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const ExpHistogramBucketsStructName = "ExpHistogramBuckets"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedExpHistogramBucketsOffset = uint64(1 << iota)
	fieldModifiedExpHistogramBucketsBucketCounts
)

// Init must be called once, before the ExpHistogramBuckets is used.
func (s *ExpHistogramBuckets) Init(allocators *Allocators) {
	s.init(nil, 0, allocators)
}

func NewExpHistogramBuckets(allocators *Allocators) *ExpHistogramBuckets {
	var s ExpHistogramBuckets
	s.init(nil, 0, allocators)
	return &s
}

func (s *ExpHistogramBuckets) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit
	s.allocators = allocators

	s.bucketCounts.init(&s.modifiedFields, fieldModifiedExpHistogramBucketsBucketCounts, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *ExpHistogramBuckets) reset() {

	s.offset = 0
	s.bucketCounts.reset()
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *ExpHistogramBuckets) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields

	s.bucketCounts.fixParent(&s.modifiedFields)
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing without cloning
// which can improve performance.
func (s *ExpHistogramBuckets) Freeze() {
	s.modifiedFields.freeze()
}

func (s *ExpHistogramBuckets) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *ExpHistogramBuckets) Offset() int64 {
	return s.offset
}

// SetOffset sets the value of Offset field.
func (s *ExpHistogramBuckets) SetOffset(v int64) {
	if s.offset != v {
		s.offset = v
		s.markOffsetModified()
	}
}

func (s *ExpHistogramBuckets) markOffsetModified() {
	s.modifiedFields.markModified(fieldModifiedExpHistogramBucketsOffset)
}

// IsOffsetModified returns true the value of Offset field was modified since
// ExpHistogramBuckets was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramBuckets) IsOffsetModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramBucketsOffset != 0
}

func (s *ExpHistogramBuckets) BucketCounts() *Uint64Array {
	return &s.bucketCounts
}

func (s *ExpHistogramBuckets) markBucketCountsModified() {
	s.modifiedFields.markModified(fieldModifiedExpHistogramBucketsBucketCounts)
}

// IsBucketCountsModified returns true the value of BucketCounts field was modified since
// ExpHistogramBuckets was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramBuckets) IsBucketCountsModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramBucketsBucketCounts != 0
}

func (s *ExpHistogramBuckets) markModifiedRecursively() {

	s.bucketCounts.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedExpHistogramBucketsOffset |
			fieldModifiedExpHistogramBucketsBucketCounts | 0
}

func (s *ExpHistogramBuckets) markUnmodifiedRecursively() {

	if s.IsOffsetModified() {
	}

	if s.IsBucketCountsModified() {
		s.bucketCounts.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// canBeShared returns true if s is safe to share without cloning (for example if s is frozen).
func (s *ExpHistogramBuckets) canBeShared() bool {
	return s.isFrozen()
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *ExpHistogramBuckets) CloneShared() ExpHistogramBuckets {

	return s.Clone()
}

func (s *ExpHistogramBuckets) Clone() ExpHistogramBuckets {

	c := ExpHistogramBuckets{

		allocators:   s.allocators,
		offset:       s.offset,
		bucketCounts: s.bucketCounts.CloneShared(),
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *ExpHistogramBuckets) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.bucketCounts.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copyExpHistogramBuckets(dst *ExpHistogramBuckets, src *ExpHistogramBuckets) {

	dst.SetOffset(src.offset)
	copyUint64Array(&dst.bucketCounts, &src.bucketCounts)
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewExpHistogramBuckets(dst *ExpHistogramBuckets, src *ExpHistogramBuckets) {

	dst.SetOffset(src.offset)
	copyToNewUint64Array(&dst.bucketCounts, &src.bucketCounts)
}

// CopyFrom() performs a deep copy from src.
func (s *ExpHistogramBuckets) CopyFrom(src *ExpHistogramBuckets) {
	copyExpHistogramBuckets(s, src)
}

func (s *ExpHistogramBuckets) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *ExpHistogramBuckets) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("ExpHistogramBuckets")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "ExpHistogramBuckets", err))
	}

	const randRange = max(2, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Offset and all subsequent fields are skipped.
	}
	// Maybe mutate Offset
	if random.IntN(randRange) == 0 {
		s.SetOffset(pkg.Int64Random(random))
	}
	if fieldCount <= 1 {
		return // BucketCounts and all subsequent fields are skipped.
	}
	// Maybe mutate BucketCounts
	if random.IntN(randRange) == 0 {
		s.bucketCounts.mutateRandom(random, schem)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *ExpHistogramBuckets) IsEqual(right *ExpHistogramBuckets) bool {
	// Compare Offset field.
	if !pkg.Int64Equal(s.offset, right.offset) {
		return false
	}
	// Compare BucketCounts field.
	if !s.bucketCounts.IsEqual(&right.bucketCounts) {
		return false
	}

	return true
}

func ExpHistogramBucketsEqual(left, right *ExpHistogramBuckets) bool {
	return left.IsEqual(right)
}

// CmpExpHistogramBuckets performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpExpHistogramBuckets(left, right *ExpHistogramBuckets) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Offset field.
	if c := pkg.Int64Compare(left.offset, right.offset); c != 0 {
		return c
	}

	// Compare BucketCounts field.
	if c := CmpUint64Array(&left.bucketCounts, &right.bucketCounts); c != 0 {
		return c
	}

	return 0
}

// ExpHistogramBucketsEncoder implements encoding of ExpHistogramBuckets
type ExpHistogramBucketsEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	offsetEncoder encoders.Int64Encoder

	bucketCountsEncoder     *Uint64ArrayEncoder
	isBucketCountsRecursive bool // Indicates BucketCounts field's type is recursive.

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *ExpHistogramBucketsEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.ExpHistogramBucketsEncoder != nil {
		panic("cannot initialize ExpHistogramBucketsEncoder: already initialized")
	}
	state.ExpHistogramBucketsEncoder = e
	defer func() { state.ExpHistogramBucketsEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.ExpHistogramBucketsFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "ExpHistogramBuckets", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Offset field.
	if e.fieldCount <= 0 {
		return nil // Offset and all subsequent fields are skipped.
	}
	err = e.offsetEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for BucketCounts field.
	if e.fieldCount <= 1 {
		return nil // BucketCounts and all subsequent fields are skipped.
	}
	if state.Uint64ArrayEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.bucketCountsEncoder = state.Uint64ArrayEncoder
		e.isBucketCountsRecursive = true
	} else {
		e.bucketCountsEncoder = new(Uint64ArrayEncoder)
		err = e.bucketCountsEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *ExpHistogramBucketsEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if e.fieldCount <= 0 {
		return // Offset and all subsequent fields are skipped.
	}
	e.offsetEncoder.Reset()
	if e.fieldCount <= 1 {
		return // BucketCounts and all subsequent fields are skipped.
	}

	if !e.isBucketCountsRecursive {
		e.bucketCountsEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *ExpHistogramBucketsEncoder) Encode(val *ExpHistogramBuckets) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedExpHistogramBucketsOffset |
				fieldModifiedExpHistogramBucketsBucketCounts | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedExpHistogramBucketsOffset != 0 {
		// Encode Offset
		e.offsetEncoder.Encode(val.offset)
	}

	if fieldMask&fieldModifiedExpHistogramBucketsBucketCounts != 0 {
		// Encode BucketCounts
		e.bucketCountsEncoder.Encode(&val.bucketCounts)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *ExpHistogramBucketsEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Offset field.
	if e.fieldCount <= 0 {
		return // Offset and subsequent fields are skipped.
	}

	e.offsetEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect BucketCounts field.
	if e.fieldCount <= 1 {
		return // BucketCounts and subsequent fields are skipped.
	}
	if !e.isBucketCountsRecursive {
		e.bucketCountsEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// ExpHistogramBucketsDecoder implements decoding of ExpHistogramBuckets
type ExpHistogramBucketsDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	fieldCount uint

	offsetDecoder encoders.Int64Decoder

	bucketCountsDecoder     *Uint64ArrayDecoder
	isBucketCountsRecursive bool

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *ExpHistogramBucketsDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.ExpHistogramBucketsDecoder != nil {
		panic("cannot initialize ExpHistogramBucketsDecoder: already initialized")
	}
	state.ExpHistogramBucketsDecoder = d
	defer func() { state.ExpHistogramBucketsDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.ExpHistogramBucketsFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "ExpHistogramBuckets", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Offset and subsequent fields are skipped.
	}
	err = d.offsetDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // BucketCounts and subsequent fields are skipped.
	}
	if state.Uint64ArrayDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.bucketCountsDecoder = state.Uint64ArrayDecoder
		d.isBucketCountsRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.bucketCountsDecoder = new(Uint64ArrayDecoder)
		err = d.bucketCountsDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *ExpHistogramBucketsDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Offset and subsequent fields are skipped.
	}
	d.offsetDecoder.Continue()
	if d.fieldCount <= 1 {
		return // BucketCounts and subsequent fields are skipped.
	}

	if !d.isBucketCountsRecursive {
		d.bucketCountsDecoder.Continue()
	}

}

func (d *ExpHistogramBucketsDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Offset and all subsequent fields are skipped.
	}
	d.offsetDecoder.Reset()
	if d.fieldCount <= 1 {
		return // BucketCounts and all subsequent fields are skipped.
	}

	if !d.isBucketCountsRecursive {
		d.bucketCountsDecoder.Reset()
	}

}

func (d *ExpHistogramBucketsDecoder) Decode(dstPtr *ExpHistogramBuckets) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedExpHistogramBucketsOffset != 0 {
		// Field is changed and is present, decode it.
		err = d.offsetDecoder.Decode(&val.offset)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExpHistogramBucketsBucketCounts != 0 {
		// Field is changed and is present, decode it.
		err = d.bucketCountsDecoder.Decode(&val.bucketCounts)
		if err != nil {
			return err
		}
	}

	return nil
}

// ExpHistogramBucketsAllocator implements a custom allocator for ExpHistogramBuckets.
// It maintains a pool of pre-allocated ExpHistogramBuckets and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type ExpHistogramBucketsAllocator struct {
	pool []ExpHistogramBuckets
	ofs  int
}

// Alloc returns the next available ExpHistogramBuckets from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *ExpHistogramBucketsAllocator) Alloc() *ExpHistogramBuckets {
	if a.ofs < len(a.pool) {
		// Get the next available ExpHistogramBuckets from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *ExpHistogramBucketsAllocator) prealloc() *ExpHistogramBuckets {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]ExpHistogramBuckets, newLen)
	a.ofs = 1
	return &a.pool[0]
}
