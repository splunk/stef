// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

type ExpHistogramBuckets struct {
	offset       int64
	bucketCounts Uint64Array

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const ExpHistogramBucketsStructName = "ExpHistogramBuckets"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedExpHistogramBucketsOffset = uint64(1 << iota)
	fieldModifiedExpHistogramBucketsBucketCounts
)

// Init must be called once, before the ExpHistogramBuckets is used.
func (s *ExpHistogramBuckets) Init() {
	s.init(nil, 0)
}

func NewExpHistogramBuckets() *ExpHistogramBuckets {
	var s ExpHistogramBuckets
	s.init(nil, 0)
	return &s
}

func (s *ExpHistogramBuckets) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.bucketCounts.init(&s.modifiedFields, fieldModifiedExpHistogramBucketsBucketCounts)
}

func (s *ExpHistogramBuckets) Offset() int64 {
	return s.offset
}

// SetOffset sets the value of Offset field.
func (s *ExpHistogramBuckets) SetOffset(v int64) {
	if !pkg.Int64Equal(s.offset, v) {
		s.offset = v
		s.markOffsetModified()
	}
}

func (s *ExpHistogramBuckets) markOffsetModified() {
	s.modifiedFields.markModified(fieldModifiedExpHistogramBucketsOffset)
}

// IsOffsetModified returns true the value of Offset field was modified since
// ExpHistogramBuckets was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramBuckets) IsOffsetModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramBucketsOffset != 0
}

func (s *ExpHistogramBuckets) BucketCounts() *Uint64Array {
	return &s.bucketCounts
}

// IsBucketCountsModified returns true the value of BucketCounts field was modified since
// ExpHistogramBuckets was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ExpHistogramBuckets) IsBucketCountsModified() bool {
	return s.modifiedFields.mask&fieldModifiedExpHistogramBucketsBucketCounts != 0
}

func (s *ExpHistogramBuckets) markUnmodifiedRecursively() {

	if s.IsOffsetModified() {
	}

	if s.IsBucketCountsModified() {
		s.bucketCounts.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

func (s *ExpHistogramBuckets) Clone() ExpHistogramBuckets {
	return ExpHistogramBuckets{
		offset:       s.offset,
		bucketCounts: s.bucketCounts.Clone(),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *ExpHistogramBuckets) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.bucketCounts.byteSize() + 0
}

func copyExpHistogramBuckets(dst *ExpHistogramBuckets, src *ExpHistogramBuckets) {
	dst.SetOffset(src.offset)
	copyUint64Array(&dst.bucketCounts, &src.bucketCounts)
}

// CopyFrom() performs a deep copy from src.
func (s *ExpHistogramBuckets) CopyFrom(src *ExpHistogramBuckets) {
	copyExpHistogramBuckets(s, src)
}

func (s *ExpHistogramBuckets) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *ExpHistogramBuckets) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.bucketCounts.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *ExpHistogramBuckets) mutateRandom(random *rand.Rand) {
	const fieldCount = 2
	if random.IntN(fieldCount) == 0 {
		s.SetOffset(pkg.Int64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.bucketCounts.mutateRandom(random)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *ExpHistogramBuckets) IsEqual(val *ExpHistogramBuckets) bool {
	if !pkg.Int64Equal(e.offset, val.offset) {
		return false
	}
	if !e.bucketCounts.IsEqual(&val.bucketCounts) {
		return false
	}

	return true
}

func ExpHistogramBucketsEqual(left, right *ExpHistogramBuckets) bool {
	return left.IsEqual(right)
}

// CmpExpHistogramBuckets performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpExpHistogramBuckets(left, right *ExpHistogramBuckets) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	if c := pkg.Int64Compare(left.offset, right.offset); c != 0 {
		return c
	}
	if c := CmpUint64Array(&left.bucketCounts, &right.bucketCounts); c != 0 {
		return c
	}

	return 0
}

// ExpHistogramBucketsEncoder implements encoding of ExpHistogramBuckets
type ExpHistogramBucketsEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	offsetEncoder       encoders.Int64Encoder
	bucketCountsEncoder Uint64ArrayEncoder

	keepFieldMask uint64
	fieldCount    uint
}

func (e *ExpHistogramBucketsEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.ExpHistogramBucketsEncoder = e
	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("ExpHistogramBuckets")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "ExpHistogramBuckets")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 2
		e.keepFieldMask = ^uint64(0)
	}

	if e.fieldCount <= 0 {
		return nil // Offset and subsequent fields are skipped.
	}
	if err := e.offsetEncoder.Init(e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil // BucketCounts and subsequent fields are skipped.
	}
	if err := e.bucketCountsEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}

	return nil
}

func (e *ExpHistogramBucketsEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.offsetEncoder.Reset()
	e.bucketCountsEncoder.Reset()
}

// Encode encodes val into buf
func (e *ExpHistogramBucketsEncoder) Encode(val *ExpHistogramBuckets) {
	oldLen := e.buf.BitCount()

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedExpHistogramBucketsOffset |
				fieldModifiedExpHistogramBucketsBucketCounts | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)

	// Encode modified, present fields.

	if fieldMask&fieldModifiedExpHistogramBucketsOffset != 0 {
		// Encode Offset
		e.offsetEncoder.Encode(val.offset)
	}

	if fieldMask&fieldModifiedExpHistogramBucketsBucketCounts != 0 {
		// Encode BucketCounts
		e.bucketCountsEncoder.Encode(&val.bucketCounts)
	}

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *ExpHistogramBucketsEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Offset and subsequent fields are skipped.
	}
	e.offsetEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // BucketCounts and subsequent fields are skipped.
	}
	e.bucketCountsEncoder.CollectColumns(columnSet.At(1))
}

// ExpHistogramBucketsDecoder implements decoding of ExpHistogramBuckets
type ExpHistogramBucketsDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *ExpHistogramBuckets
	lastVal    ExpHistogramBuckets
	fieldCount uint

	offsetDecoder       encoders.Int64Decoder
	bucketCountsDecoder Uint64ArrayDecoder
}

// Init is called once in the lifetime of the stream.
func (d *ExpHistogramBucketsDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.ExpHistogramBucketsDecoder = d

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("ExpHistogramBuckets")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "ExpHistogramBuckets")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 2
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // Offset and subsequent fields are skipped.
	}
	err = d.offsetDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // BucketCounts and subsequent fields are skipped.
	}
	err = d.bucketCountsDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *ExpHistogramBucketsDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Offset and subsequent fields are skipped.
	}
	d.offsetDecoder.Continue()
	if d.fieldCount <= 1 {
		return // BucketCounts and subsequent fields are skipped.
	}
	d.bucketCountsDecoder.Continue()
}

func (d *ExpHistogramBucketsDecoder) Reset() {
	d.offsetDecoder.Reset()
	d.bucketCountsDecoder.Reset()
}

func (d *ExpHistogramBucketsDecoder) Decode(dstPtr *ExpHistogramBuckets) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedExpHistogramBucketsOffset != 0 {
		// Field is changed and is present, decode it.
		err = d.offsetDecoder.Decode(&val.offset)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExpHistogramBucketsBucketCounts != 0 {
		// Field is changed and is present, decode it.
		err = d.bucketCountsDecoder.Decode(&val.bucketCounts)
		if err != nil {
			return err
		}
	}

	return nil
}
