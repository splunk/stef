// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Exemplar struct {
	timestamp          uint64
	value              ExemplarValue
	spanID             pkg.Bytes
	traceID            pkg.Bytes
	filteredAttributes Attributes

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const ExemplarStructName = "Exemplar"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedExemplarTimestamp = uint64(1 << iota)
	fieldModifiedExemplarValue
	fieldModifiedExemplarSpanID
	fieldModifiedExemplarTraceID
	fieldModifiedExemplarFilteredAttributes
)

// Init must be called once, before the Exemplar is used.
func (s *Exemplar) Init() {
	s.init(nil, 0)
}

func NewExemplar() *Exemplar {
	var s Exemplar
	s.init(nil, 0)
	return &s
}

func (s *Exemplar) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.value.init(&s.modifiedFields, fieldModifiedExemplarValue)
	s.filteredAttributes.init(&s.modifiedFields, fieldModifiedExemplarFilteredAttributes)
}

func (s *Exemplar) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.value.initAlloc(&s.modifiedFields, fieldModifiedExemplarValue, allocators)
	s.filteredAttributes.initAlloc(&s.modifiedFields, fieldModifiedExemplarFilteredAttributes, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *Exemplar) reset() {

	s.timestamp = 0
	s.value.reset()
	s.spanID = pkg.EmptyBytes
	s.traceID = pkg.EmptyBytes
	s.filteredAttributes.reset()
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *Exemplar) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields

	s.value.fixParent(&s.modifiedFields)
	s.filteredAttributes.fixParent(&s.modifiedFields)
}

func (s *Exemplar) Timestamp() uint64 {
	return s.timestamp
}

// SetTimestamp sets the value of Timestamp field.
func (s *Exemplar) SetTimestamp(v uint64) {
	if !pkg.Uint64Equal(s.timestamp, v) {
		s.timestamp = v
		s.markTimestampModified()
	}
}

func (s *Exemplar) markTimestampModified() {
	s.modifiedFields.markModified(fieldModifiedExemplarTimestamp)
}

// IsTimestampModified returns true the value of Timestamp field was modified since
// Exemplar was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Exemplar) IsTimestampModified() bool {
	return s.modifiedFields.mask&fieldModifiedExemplarTimestamp != 0
}

func (s *Exemplar) Value() *ExemplarValue {
	return &s.value
}

func (s *Exemplar) markValueModified() {
	s.modifiedFields.markModified(fieldModifiedExemplarValue)
}

// IsValueModified returns true the value of Value field was modified since
// Exemplar was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Exemplar) IsValueModified() bool {
	return s.modifiedFields.mask&fieldModifiedExemplarValue != 0
}

func (s *Exemplar) SpanID() pkg.Bytes {
	return s.spanID
}

// SetSpanID sets the value of SpanID field.
func (s *Exemplar) SetSpanID(v pkg.Bytes) {
	if !pkg.BytesEqual(s.spanID, v) {
		s.spanID = v
		s.markSpanIDModified()
	}
}

func (s *Exemplar) markSpanIDModified() {
	s.modifiedFields.markModified(fieldModifiedExemplarSpanID)
}

// IsSpanIDModified returns true the value of SpanID field was modified since
// Exemplar was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Exemplar) IsSpanIDModified() bool {
	return s.modifiedFields.mask&fieldModifiedExemplarSpanID != 0
}

func (s *Exemplar) TraceID() pkg.Bytes {
	return s.traceID
}

// SetTraceID sets the value of TraceID field.
func (s *Exemplar) SetTraceID(v pkg.Bytes) {
	if !pkg.BytesEqual(s.traceID, v) {
		s.traceID = v
		s.markTraceIDModified()
	}
}

func (s *Exemplar) markTraceIDModified() {
	s.modifiedFields.markModified(fieldModifiedExemplarTraceID)
}

// IsTraceIDModified returns true the value of TraceID field was modified since
// Exemplar was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Exemplar) IsTraceIDModified() bool {
	return s.modifiedFields.mask&fieldModifiedExemplarTraceID != 0
}

func (s *Exemplar) FilteredAttributes() *Attributes {
	return &s.filteredAttributes
}

func (s *Exemplar) markFilteredAttributesModified() {
	s.modifiedFields.markModified(fieldModifiedExemplarFilteredAttributes)
}

// IsFilteredAttributesModified returns true the value of FilteredAttributes field was modified since
// Exemplar was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Exemplar) IsFilteredAttributesModified() bool {
	return s.modifiedFields.mask&fieldModifiedExemplarFilteredAttributes != 0
}

func (s *Exemplar) markModifiedRecursively() {

	s.value.markModifiedRecursively()

	s.filteredAttributes.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedExemplarTimestamp |
			fieldModifiedExemplarValue |
			fieldModifiedExemplarSpanID |
			fieldModifiedExemplarTraceID |
			fieldModifiedExemplarFilteredAttributes | 0
}

func (s *Exemplar) markUnmodifiedRecursively() {

	if s.IsTimestampModified() {
	}

	if s.IsValueModified() {
		s.value.markUnmodifiedRecursively()
	}

	if s.IsSpanIDModified() {
	}

	if s.IsTraceIDModified() {
	}

	if s.IsFilteredAttributesModified() {
		s.filteredAttributes.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

func (s *Exemplar) Clone(allocators *Allocators) Exemplar {

	c := Exemplar{

		timestamp:          s.timestamp,
		value:              s.value.Clone(allocators),
		spanID:             s.spanID,
		traceID:            s.traceID,
		filteredAttributes: s.filteredAttributes.Clone(allocators),
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Exemplar) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.value.byteSize() + s.filteredAttributes.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copyExemplar(dst *Exemplar, src *Exemplar) {
	dst.SetTimestamp(src.timestamp)
	copyExemplarValue(&dst.value, &src.value)
	dst.SetSpanID(src.spanID)
	dst.SetTraceID(src.traceID)
	copyAttributes(&dst.filteredAttributes, &src.filteredAttributes)
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewExemplar(dst *Exemplar, src *Exemplar, allocators *Allocators) {
	dst.timestamp = src.timestamp
	copyToNewExemplarValue(&dst.value, &src.value, allocators)
	dst.spanID = src.spanID
	dst.traceID = src.traceID
	copyToNewAttributes(&dst.filteredAttributes, &src.filteredAttributes, allocators)
}

// CopyFrom() performs a deep copy from src.
func (s *Exemplar) CopyFrom(src *Exemplar) {
	copyExemplar(s, src)
}

func (s *Exemplar) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *Exemplar) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("Exemplar")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "Exemplar", err))
	}

	const randRange = max(5, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Timestamp and all subsequent fields are skipped.
	}
	// Maybe mutate Timestamp
	if random.IntN(randRange) == 0 {
		s.SetTimestamp(pkg.Uint64Random(random))
	}
	if fieldCount <= 1 {
		return // Value and all subsequent fields are skipped.
	}
	// Maybe mutate Value
	if random.IntN(randRange) == 0 {
		s.value.mutateRandom(random, schem)
	}
	if fieldCount <= 2 {
		return // SpanID and all subsequent fields are skipped.
	}
	// Maybe mutate SpanID
	if random.IntN(randRange) == 0 {
		s.SetSpanID(pkg.BytesRandom(random))
	}
	if fieldCount <= 3 {
		return // TraceID and all subsequent fields are skipped.
	}
	// Maybe mutate TraceID
	if random.IntN(randRange) == 0 {
		s.SetTraceID(pkg.BytesRandom(random))
	}
	if fieldCount <= 4 {
		return // FilteredAttributes and all subsequent fields are skipped.
	}
	// Maybe mutate FilteredAttributes
	if random.IntN(randRange) == 0 {
		s.filteredAttributes.mutateRandom(random, schem)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *Exemplar) IsEqual(right *Exemplar) bool {
	// Compare Timestamp field.
	if !pkg.Uint64Equal(s.timestamp, right.timestamp) {
		return false
	}
	// Compare Value field.
	if !s.value.IsEqual(&right.value) {
		return false
	}
	// Compare SpanID field.
	if !pkg.BytesEqual(s.spanID, right.spanID) {
		return false
	}
	// Compare TraceID field.
	if !pkg.BytesEqual(s.traceID, right.traceID) {
		return false
	}
	// Compare FilteredAttributes field.
	if !s.filteredAttributes.IsEqual(&right.filteredAttributes) {
		return false
	}

	return true
}

func ExemplarEqual(left, right *Exemplar) bool {
	return left.IsEqual(right)
}

// CmpExemplar performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpExemplar(left, right *Exemplar) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Timestamp field.
	if c := pkg.Uint64Compare(left.timestamp, right.timestamp); c != 0 {
		return c
	}

	// Compare Value field.
	if c := CmpExemplarValue(&left.value, &right.value); c != 0 {
		return c
	}

	// Compare SpanID field.
	if c := pkg.BytesCompare(left.spanID, right.spanID); c != 0 {
		return c
	}

	// Compare TraceID field.
	if c := pkg.BytesCompare(left.traceID, right.traceID); c != 0 {
		return c
	}

	// Compare FilteredAttributes field.
	if c := CmpAttributes(&left.filteredAttributes, &right.filteredAttributes); c != 0 {
		return c
	}

	return 0
}

// ExemplarEncoder implements encoding of Exemplar
type ExemplarEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	timestampEncoder encoders.Uint64Encoder

	valueEncoder     *ExemplarValueEncoder
	isValueRecursive bool // Indicates Value field's type is recursive.

	spanIDEncoder encoders.BytesEncoder

	traceIDEncoder encoders.BytesEncoder

	filteredAttributesEncoder     *AttributesEncoder
	isFilteredAttributesRecursive bool // Indicates FilteredAttributes field's type is recursive.

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *ExemplarEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.ExemplarEncoder != nil {
		panic("cannot initialize ExemplarEncoder: already initialized")
	}
	state.ExemplarEncoder = e
	defer func() { state.ExemplarEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.ExemplarFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Exemplar", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Timestamp field.
	if e.fieldCount <= 0 {
		return nil // Timestamp and all subsequent fields are skipped.
	}
	err = e.timestampEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Value field.
	if e.fieldCount <= 1 {
		return nil // Value and all subsequent fields are skipped.
	}
	if state.ExemplarValueEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.valueEncoder = state.ExemplarValueEncoder
		e.isValueRecursive = true
	} else {
		e.valueEncoder = new(ExemplarValueEncoder)
		err = e.valueEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for SpanID field.
	if e.fieldCount <= 2 {
		return nil // SpanID and all subsequent fields are skipped.
	}
	err = e.spanIDEncoder.Init(nil, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for TraceID field.
	if e.fieldCount <= 3 {
		return nil // TraceID and all subsequent fields are skipped.
	}
	err = e.traceIDEncoder.Init(nil, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for FilteredAttributes field.
	if e.fieldCount <= 4 {
		return nil // FilteredAttributes and all subsequent fields are skipped.
	}
	if state.AttributesEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.filteredAttributesEncoder = state.AttributesEncoder
		e.isFilteredAttributesRecursive = true
	} else {
		e.filteredAttributesEncoder = new(AttributesEncoder)
		err = e.filteredAttributesEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *ExemplarEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if e.fieldCount <= 0 {
		return // Timestamp and all subsequent fields are skipped.
	}
	e.timestampEncoder.Reset()
	if e.fieldCount <= 1 {
		return // Value and all subsequent fields are skipped.
	}

	if !e.isValueRecursive {
		e.valueEncoder.Reset()
	}

	if e.fieldCount <= 2 {
		return // SpanID and all subsequent fields are skipped.
	}
	e.spanIDEncoder.Reset()
	if e.fieldCount <= 3 {
		return // TraceID and all subsequent fields are skipped.
	}
	e.traceIDEncoder.Reset()
	if e.fieldCount <= 4 {
		return // FilteredAttributes and all subsequent fields are skipped.
	}

	if !e.isFilteredAttributesRecursive {
		e.filteredAttributesEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *ExemplarEncoder) Encode(val *Exemplar) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedExemplarTimestamp |
				fieldModifiedExemplarValue |
				fieldModifiedExemplarSpanID |
				fieldModifiedExemplarTraceID |
				fieldModifiedExemplarFilteredAttributes | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedExemplarTimestamp != 0 {
		// Encode Timestamp
		e.timestampEncoder.Encode(val.timestamp)
	}

	if fieldMask&fieldModifiedExemplarValue != 0 {
		// Encode Value
		e.valueEncoder.Encode(&val.value)
	}

	if fieldMask&fieldModifiedExemplarSpanID != 0 {
		// Encode SpanID
		e.spanIDEncoder.Encode(val.spanID)
	}

	if fieldMask&fieldModifiedExemplarTraceID != 0 {
		// Encode TraceID
		e.traceIDEncoder.Encode(val.traceID)
	}

	if fieldMask&fieldModifiedExemplarFilteredAttributes != 0 {
		// Encode FilteredAttributes
		e.filteredAttributesEncoder.Encode(&val.filteredAttributes)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *ExemplarEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Timestamp field.
	if e.fieldCount <= 0 {
		return // Timestamp and subsequent fields are skipped.
	}

	e.timestampEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Value field.
	if e.fieldCount <= 1 {
		return // Value and subsequent fields are skipped.
	}
	if !e.isValueRecursive {
		e.valueEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect SpanID field.
	if e.fieldCount <= 2 {
		return // SpanID and subsequent fields are skipped.
	}

	e.spanIDEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect TraceID field.
	if e.fieldCount <= 3 {
		return // TraceID and subsequent fields are skipped.
	}

	e.traceIDEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect FilteredAttributes field.
	if e.fieldCount <= 4 {
		return // FilteredAttributes and subsequent fields are skipped.
	}
	if !e.isFilteredAttributesRecursive {
		e.filteredAttributesEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// ExemplarDecoder implements decoding of Exemplar
type ExemplarDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	fieldCount uint

	timestampDecoder encoders.Uint64Decoder

	valueDecoder     *ExemplarValueDecoder
	isValueRecursive bool

	spanIDDecoder encoders.BytesDecoder

	traceIDDecoder encoders.BytesDecoder

	filteredAttributesDecoder     *AttributesDecoder
	isFilteredAttributesRecursive bool

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *ExemplarDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.ExemplarDecoder != nil {
		panic("cannot initialize ExemplarDecoder: already initialized")
	}
	state.ExemplarDecoder = d
	defer func() { state.ExemplarDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.ExemplarFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Exemplar", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Timestamp and subsequent fields are skipped.
	}
	err = d.timestampDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Value and subsequent fields are skipped.
	}
	if state.ExemplarValueDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.valueDecoder = state.ExemplarValueDecoder
		d.isValueRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.valueDecoder = new(ExemplarValueDecoder)
		err = d.valueDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // SpanID and subsequent fields are skipped.
	}
	err = d.spanIDDecoder.Init(nil, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // TraceID and subsequent fields are skipped.
	}
	err = d.traceIDDecoder.Init(nil, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // FilteredAttributes and subsequent fields are skipped.
	}
	if state.AttributesDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.filteredAttributesDecoder = state.AttributesDecoder
		d.isFilteredAttributesRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.filteredAttributesDecoder = new(AttributesDecoder)
		err = d.filteredAttributesDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *ExemplarDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Timestamp and subsequent fields are skipped.
	}
	d.timestampDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Value and subsequent fields are skipped.
	}

	if !d.isValueRecursive {
		d.valueDecoder.Continue()
	}

	if d.fieldCount <= 2 {
		return // SpanID and subsequent fields are skipped.
	}
	d.spanIDDecoder.Continue()
	if d.fieldCount <= 3 {
		return // TraceID and subsequent fields are skipped.
	}
	d.traceIDDecoder.Continue()
	if d.fieldCount <= 4 {
		return // FilteredAttributes and subsequent fields are skipped.
	}

	if !d.isFilteredAttributesRecursive {
		d.filteredAttributesDecoder.Continue()
	}

}

func (d *ExemplarDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Timestamp and all subsequent fields are skipped.
	}
	d.timestampDecoder.Reset()
	if d.fieldCount <= 1 {
		return // Value and all subsequent fields are skipped.
	}

	if !d.isValueRecursive {
		d.valueDecoder.Reset()
	}

	if d.fieldCount <= 2 {
		return // SpanID and all subsequent fields are skipped.
	}
	d.spanIDDecoder.Reset()
	if d.fieldCount <= 3 {
		return // TraceID and all subsequent fields are skipped.
	}
	d.traceIDDecoder.Reset()
	if d.fieldCount <= 4 {
		return // FilteredAttributes and all subsequent fields are skipped.
	}

	if !d.isFilteredAttributesRecursive {
		d.filteredAttributesDecoder.Reset()
	}

}

func (d *ExemplarDecoder) Decode(dstPtr *Exemplar) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedExemplarTimestamp != 0 {
		// Field is changed and is present, decode it.
		err = d.timestampDecoder.Decode(&val.timestamp)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExemplarValue != 0 {
		// Field is changed and is present, decode it.
		err = d.valueDecoder.Decode(&val.value)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExemplarSpanID != 0 {
		// Field is changed and is present, decode it.
		err = d.spanIDDecoder.Decode(&val.spanID)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExemplarTraceID != 0 {
		// Field is changed and is present, decode it.
		err = d.traceIDDecoder.Decode(&val.traceID)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExemplarFilteredAttributes != 0 {
		// Field is changed and is present, decode it.
		err = d.filteredAttributesDecoder.Decode(&val.filteredAttributes)
		if err != nil {
			return err
		}
	}

	return nil
}

// ExemplarAllocator implements a custom allocator for Exemplar.
// It maintains a pool of pre-allocated Exemplar and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type ExemplarAllocator struct {
	pool []Exemplar
	ofs  int
}

// Alloc returns the next available Exemplar from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *ExemplarAllocator) Alloc() *Exemplar {
	if a.ofs < len(a.pool) {
		// Get the next available Exemplar from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *ExemplarAllocator) prealloc() *Exemplar {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]Exemplar, newLen)
	a.ofs = 1
	return &a.pool[0]
}
