// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

type Exemplar struct {
	timestamp          uint64
	value              ExemplarValue
	spanID             pkg.Bytes
	traceID            pkg.Bytes
	filteredAttributes Attributes

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const ExemplarStructName = "Exemplar"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedExemplarTimestamp = uint64(1 << iota)
	fieldModifiedExemplarValue
	fieldModifiedExemplarSpanID
	fieldModifiedExemplarTraceID
	fieldModifiedExemplarFilteredAttributes
)

// Init must be called once, before the Exemplar is used.
func (s *Exemplar) Init() {
	s.init(nil, 0)
}

func NewExemplar() *Exemplar {
	var s Exemplar
	s.init(nil, 0)
	return &s
}

func (s *Exemplar) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.value.init(&s.modifiedFields, fieldModifiedExemplarValue)
	s.filteredAttributes.init(&s.modifiedFields, fieldModifiedExemplarFilteredAttributes)
}

func (s *Exemplar) Timestamp() uint64 {
	return s.timestamp
}

// SetTimestamp sets the value of Timestamp field.
func (s *Exemplar) SetTimestamp(v uint64) {
	if !pkg.Uint64Equal(s.timestamp, v) {
		s.timestamp = v
		s.markTimestampModified()
	}
}

func (s *Exemplar) markTimestampModified() {
	s.modifiedFields.markModified(fieldModifiedExemplarTimestamp)
}

// IsTimestampModified returns true the value of Timestamp field was modified since
// Exemplar was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Exemplar) IsTimestampModified() bool {
	return s.modifiedFields.mask&fieldModifiedExemplarTimestamp != 0
}

func (s *Exemplar) Value() *ExemplarValue {
	return &s.value
}

// IsValueModified returns true the value of Value field was modified since
// Exemplar was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Exemplar) IsValueModified() bool {
	return s.modifiedFields.mask&fieldModifiedExemplarValue != 0
}

func (s *Exemplar) SpanID() pkg.Bytes {
	return s.spanID
}

// SetSpanID sets the value of SpanID field.
func (s *Exemplar) SetSpanID(v pkg.Bytes) {
	if !pkg.BytesEqual(s.spanID, v) {
		s.spanID = v
		s.markSpanIDModified()
	}
}

func (s *Exemplar) markSpanIDModified() {
	s.modifiedFields.markModified(fieldModifiedExemplarSpanID)
}

// IsSpanIDModified returns true the value of SpanID field was modified since
// Exemplar was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Exemplar) IsSpanIDModified() bool {
	return s.modifiedFields.mask&fieldModifiedExemplarSpanID != 0
}

func (s *Exemplar) TraceID() pkg.Bytes {
	return s.traceID
}

// SetTraceID sets the value of TraceID field.
func (s *Exemplar) SetTraceID(v pkg.Bytes) {
	if !pkg.BytesEqual(s.traceID, v) {
		s.traceID = v
		s.markTraceIDModified()
	}
}

func (s *Exemplar) markTraceIDModified() {
	s.modifiedFields.markModified(fieldModifiedExemplarTraceID)
}

// IsTraceIDModified returns true the value of TraceID field was modified since
// Exemplar was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Exemplar) IsTraceIDModified() bool {
	return s.modifiedFields.mask&fieldModifiedExemplarTraceID != 0
}

func (s *Exemplar) FilteredAttributes() *Attributes {
	return &s.filteredAttributes
}

// IsFilteredAttributesModified returns true the value of FilteredAttributes field was modified since
// Exemplar was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Exemplar) IsFilteredAttributesModified() bool {
	return s.modifiedFields.mask&fieldModifiedExemplarFilteredAttributes != 0
}

func (s *Exemplar) markUnmodifiedRecursively() {

	if s.IsTimestampModified() {
	}

	if s.IsValueModified() {
		s.value.markUnmodifiedRecursively()
	}

	if s.IsSpanIDModified() {
	}

	if s.IsTraceIDModified() {
	}

	if s.IsFilteredAttributesModified() {
		s.filteredAttributes.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

func (s *Exemplar) Clone() Exemplar {
	return Exemplar{
		timestamp:          s.timestamp,
		value:              s.value.Clone(),
		spanID:             s.spanID,
		traceID:            s.traceID,
		filteredAttributes: s.filteredAttributes.Clone(),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Exemplar) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.value.byteSize() + s.filteredAttributes.byteSize() + 0
}

func copyExemplar(dst *Exemplar, src *Exemplar) {
	dst.SetTimestamp(src.timestamp)
	copyExemplarValue(&dst.value, &src.value)
	dst.SetSpanID(src.spanID)
	dst.SetTraceID(src.traceID)
	copyAttributes(&dst.filteredAttributes, &src.filteredAttributes)
}

// CopyFrom() performs a deep copy from src.
func (s *Exemplar) CopyFrom(src *Exemplar) {
	copyExemplar(s, src)
}

func (s *Exemplar) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Exemplar) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.value.markUnmodified()
	s.filteredAttributes.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *Exemplar) mutateRandom(random *rand.Rand) {
	const fieldCount = 5
	if random.IntN(fieldCount) == 0 {
		s.SetTimestamp(pkg.Uint64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.value.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.SetSpanID(pkg.BytesRandom(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetTraceID(pkg.BytesRandom(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.filteredAttributes.mutateRandom(random)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *Exemplar) IsEqual(val *Exemplar) bool {
	if !pkg.Uint64Equal(e.timestamp, val.timestamp) {
		return false
	}
	if !e.value.IsEqual(&val.value) {
		return false
	}
	if !pkg.BytesEqual(e.spanID, val.spanID) {
		return false
	}
	if !pkg.BytesEqual(e.traceID, val.traceID) {
		return false
	}
	if !e.filteredAttributes.IsEqual(&val.filteredAttributes) {
		return false
	}

	return true
}

func ExemplarEqual(left, right *Exemplar) bool {
	return left.IsEqual(right)
}

// CmpExemplar performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpExemplar(left, right *Exemplar) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	if c := pkg.Uint64Compare(left.timestamp, right.timestamp); c != 0 {
		return c
	}
	if c := CmpExemplarValue(&left.value, &right.value); c != 0 {
		return c
	}
	if c := pkg.BytesCompare(left.spanID, right.spanID); c != 0 {
		return c
	}
	if c := pkg.BytesCompare(left.traceID, right.traceID); c != 0 {
		return c
	}
	if c := CmpAttributes(&left.filteredAttributes, &right.filteredAttributes); c != 0 {
		return c
	}

	return 0
}

// ExemplarEncoder implements encoding of Exemplar
type ExemplarEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	timestampEncoder          encoders.Uint64Encoder
	valueEncoder              ExemplarValueEncoder
	spanIDEncoder             encoders.BytesEncoder
	traceIDEncoder            encoders.BytesEncoder
	filteredAttributesEncoder AttributesEncoder

	keepFieldMask uint64
	fieldCount    uint
}

func (e *ExemplarEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.ExemplarEncoder = e
	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Exemplar")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Exemplar")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 5
		e.keepFieldMask = ^uint64(0)
	}

	if e.fieldCount <= 0 {
		return nil // Timestamp and subsequent fields are skipped.
	}
	if err := e.timestampEncoder.Init(e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil // Value and subsequent fields are skipped.
	}
	if err := e.valueEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 2 {
		return nil // SpanID and subsequent fields are skipped.
	}
	if err := e.spanIDEncoder.Init(nil, e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 3 {
		return nil // TraceID and subsequent fields are skipped.
	}
	if err := e.traceIDEncoder.Init(nil, e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 4 {
		return nil // FilteredAttributes and subsequent fields are skipped.
	}
	if err := e.filteredAttributesEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}

	return nil
}

func (e *ExemplarEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.timestampEncoder.Reset()
	e.valueEncoder.Reset()
	e.spanIDEncoder.Reset()
	e.traceIDEncoder.Reset()
	e.filteredAttributesEncoder.Reset()
}

// Encode encodes val into buf
func (e *ExemplarEncoder) Encode(val *Exemplar) {
	oldLen := e.buf.BitCount()

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedExemplarTimestamp |
				fieldModifiedExemplarValue |
				fieldModifiedExemplarSpanID |
				fieldModifiedExemplarTraceID |
				fieldModifiedExemplarFilteredAttributes | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)

	// Encode modified, present fields.

	if fieldMask&fieldModifiedExemplarTimestamp != 0 {
		// Encode Timestamp
		e.timestampEncoder.Encode(val.timestamp)
	}

	if fieldMask&fieldModifiedExemplarValue != 0 {
		// Encode Value
		e.valueEncoder.Encode(&val.value)
	}

	if fieldMask&fieldModifiedExemplarSpanID != 0 {
		// Encode SpanID
		e.spanIDEncoder.Encode(val.spanID)
	}

	if fieldMask&fieldModifiedExemplarTraceID != 0 {
		// Encode TraceID
		e.traceIDEncoder.Encode(val.traceID)
	}

	if fieldMask&fieldModifiedExemplarFilteredAttributes != 0 {
		// Encode FilteredAttributes
		e.filteredAttributesEncoder.Encode(&val.filteredAttributes)
	}

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *ExemplarEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Timestamp and subsequent fields are skipped.
	}
	e.timestampEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // Value and subsequent fields are skipped.
	}
	e.valueEncoder.CollectColumns(columnSet.At(1))
	if e.fieldCount <= 2 {
		return // SpanID and subsequent fields are skipped.
	}
	e.spanIDEncoder.CollectColumns(columnSet.At(2))
	if e.fieldCount <= 3 {
		return // TraceID and subsequent fields are skipped.
	}
	e.traceIDEncoder.CollectColumns(columnSet.At(3))
	if e.fieldCount <= 4 {
		return // FilteredAttributes and subsequent fields are skipped.
	}
	e.filteredAttributesEncoder.CollectColumns(columnSet.At(4))
}

// ExemplarDecoder implements decoding of Exemplar
type ExemplarDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Exemplar
	lastVal    Exemplar
	fieldCount uint

	timestampDecoder          encoders.Uint64Decoder
	valueDecoder              ExemplarValueDecoder
	spanIDDecoder             encoders.BytesDecoder
	traceIDDecoder            encoders.BytesDecoder
	filteredAttributesDecoder AttributesDecoder
}

// Init is called once in the lifetime of the stream.
func (d *ExemplarDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.ExemplarDecoder = d

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Exemplar")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Exemplar")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 5
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // Timestamp and subsequent fields are skipped.
	}
	err = d.timestampDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Value and subsequent fields are skipped.
	}
	err = d.valueDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // SpanID and subsequent fields are skipped.
	}
	err = d.spanIDDecoder.Init(nil, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // TraceID and subsequent fields are skipped.
	}
	err = d.traceIDDecoder.Init(nil, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // FilteredAttributes and subsequent fields are skipped.
	}
	err = d.filteredAttributesDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *ExemplarDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Timestamp and subsequent fields are skipped.
	}
	d.timestampDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Value and subsequent fields are skipped.
	}
	d.valueDecoder.Continue()
	if d.fieldCount <= 2 {
		return // SpanID and subsequent fields are skipped.
	}
	d.spanIDDecoder.Continue()
	if d.fieldCount <= 3 {
		return // TraceID and subsequent fields are skipped.
	}
	d.traceIDDecoder.Continue()
	if d.fieldCount <= 4 {
		return // FilteredAttributes and subsequent fields are skipped.
	}
	d.filteredAttributesDecoder.Continue()
}

func (d *ExemplarDecoder) Reset() {
	d.timestampDecoder.Reset()
	d.valueDecoder.Reset()
	d.spanIDDecoder.Reset()
	d.traceIDDecoder.Reset()
	d.filteredAttributesDecoder.Reset()
}

func (d *ExemplarDecoder) Decode(dstPtr *Exemplar) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedExemplarTimestamp != 0 {
		// Field is changed and is present, decode it.
		err = d.timestampDecoder.Decode(&val.timestamp)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExemplarValue != 0 {
		// Field is changed and is present, decode it.
		err = d.valueDecoder.Decode(&val.value)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExemplarSpanID != 0 {
		// Field is changed and is present, decode it.
		err = d.spanIDDecoder.Decode(&val.spanID)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExemplarTraceID != 0 {
		// Field is changed and is present, decode it.
		err = d.traceIDDecoder.Decode(&val.traceID)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedExemplarFilteredAttributes != 0 {
		// Field is changed and is present, decode it.
		err = d.filteredAttributesDecoder.Decode(&val.filteredAttributes)
		if err != nil {
			return err
		}
	}

	return nil
}
