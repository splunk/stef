// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

type Event struct {
	name                   string
	timeUnixNano           uint64
	attributes             Attributes
	droppedAttributesCount uint64

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedEventName = uint64(1 << iota)
	fieldModifiedEventTimeUnixNano
	fieldModifiedEventAttributes
	fieldModifiedEventDroppedAttributesCount
)

// Init must be called once, before the Event is used.
func (s *Event) Init() {
	s.init(nil, 0)
}

func NewEvent() *Event {
	var s Event
	s.init(nil, 0)
	return &s
}

func (s *Event) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.attributes.init(&s.modifiedFields, fieldModifiedEventAttributes)
}

func (s *Event) Name() string {
	return s.name
}

// SetName sets the value of Name field.
func (s *Event) SetName(v string) {
	if !pkg.StringEqual(s.name, v) {
		s.name = v
		s.markNameModified()
	}
}

func (s *Event) markNameModified() {
	s.modifiedFields.markModified(fieldModifiedEventName)
}

// IsNameModified returns true the value of Name field was modified since
// Event was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Event) IsNameModified() bool {
	return s.modifiedFields.mask&fieldModifiedEventName != 0
}

func (s *Event) TimeUnixNano() uint64 {
	return s.timeUnixNano
}

// SetTimeUnixNano sets the value of TimeUnixNano field.
func (s *Event) SetTimeUnixNano(v uint64) {
	if !pkg.Uint64Equal(s.timeUnixNano, v) {
		s.timeUnixNano = v
		s.markTimeUnixNanoModified()
	}
}

func (s *Event) markTimeUnixNanoModified() {
	s.modifiedFields.markModified(fieldModifiedEventTimeUnixNano)
}

// IsTimeUnixNanoModified returns true the value of TimeUnixNano field was modified since
// Event was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Event) IsTimeUnixNanoModified() bool {
	return s.modifiedFields.mask&fieldModifiedEventTimeUnixNano != 0
}

func (s *Event) Attributes() *Attributes {
	return &s.attributes
}

// IsAttributesModified returns true the value of Attributes field was modified since
// Event was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Event) IsAttributesModified() bool {
	return s.modifiedFields.mask&fieldModifiedEventAttributes != 0
}

func (s *Event) DroppedAttributesCount() uint64 {
	return s.droppedAttributesCount
}

// SetDroppedAttributesCount sets the value of DroppedAttributesCount field.
func (s *Event) SetDroppedAttributesCount(v uint64) {
	if !pkg.Uint64Equal(s.droppedAttributesCount, v) {
		s.droppedAttributesCount = v
		s.markDroppedAttributesCountModified()
	}
}

func (s *Event) markDroppedAttributesCountModified() {
	s.modifiedFields.markModified(fieldModifiedEventDroppedAttributesCount)
}

// IsDroppedAttributesCountModified returns true the value of DroppedAttributesCount field was modified since
// Event was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Event) IsDroppedAttributesCountModified() bool {
	return s.modifiedFields.mask&fieldModifiedEventDroppedAttributesCount != 0
}

func (s *Event) markUnmodifiedRecursively() {

	if s.IsNameModified() {
	}

	if s.IsTimeUnixNanoModified() {
	}

	if s.IsAttributesModified() {
		s.attributes.markUnmodifiedRecursively()
	}

	if s.IsDroppedAttributesCountModified() {
	}

	s.modifiedFields.mask = 0
}

func (s *Event) Clone() Event {
	return Event{
		name:                   s.name,
		timeUnixNano:           s.timeUnixNano,
		attributes:             s.attributes.Clone(),
		droppedAttributesCount: s.droppedAttributesCount,
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Event) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.attributes.byteSize() + 0
}

func copyEvent(dst *Event, src *Event) {
	dst.SetName(src.name)
	dst.SetTimeUnixNano(src.timeUnixNano)
	copyAttributes(&dst.attributes, &src.attributes)
	dst.SetDroppedAttributesCount(src.droppedAttributesCount)
}

// CopyFrom() performs a deep copy from src.
func (s *Event) CopyFrom(src *Event) {
	copyEvent(s, src)
}

func (s *Event) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Event) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.attributes.markUnmodified()
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *Event) IsEqual(val *Event) bool {
	if !pkg.StringEqual(e.name, val.name) {
		return false
	}
	if !pkg.Uint64Equal(e.timeUnixNano, val.timeUnixNano) {
		return false
	}
	if !e.attributes.IsEqual(&val.attributes) {
		return false
	}
	if !pkg.Uint64Equal(e.droppedAttributesCount, val.droppedAttributesCount) {
		return false
	}

	return true
}

func EventEqual(left, right *Event) bool {
	return left.IsEqual(right)
}

// CmpEvent performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpEvent(left, right *Event) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	if c := strings.Compare(left.name, right.name); c != 0 {
		return c
	}
	if c := pkg.Uint64Compare(left.timeUnixNano, right.timeUnixNano); c != 0 {
		return c
	}
	if c := CmpAttributes(&left.attributes, &right.attributes); c != 0 {
		return c
	}
	if c := pkg.Uint64Compare(left.droppedAttributesCount, right.droppedAttributesCount); c != 0 {
		return c
	}

	return 0
}

// EventEncoder implements encoding of Event
type EventEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	nameEncoder                   encoders.StringEncoder
	timeUnixNanoEncoder           encoders.Uint64Encoder
	attributesEncoder             AttributesEncoder
	droppedAttributesCountEncoder encoders.Uint64Encoder

	keepFieldMask uint64
	fieldCount    uint
}

func (e *EventEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.EventEncoder = e
	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Event")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Event")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 4
		e.keepFieldMask = ^uint64(0)
	}

	if e.fieldCount <= 0 {
		return nil // Name and subsequent fields are skipped.
	}
	if err := e.nameEncoder.Init(&state.SpanEventName, e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil // TimeUnixNano and subsequent fields are skipped.
	}
	if err := e.timeUnixNanoEncoder.Init(e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 2 {
		return nil // Attributes and subsequent fields are skipped.
	}
	if err := e.attributesEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 3 {
		return nil // DroppedAttributesCount and subsequent fields are skipped.
	}
	if err := e.droppedAttributesCountEncoder.Init(e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}

	return nil
}

func (e *EventEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.nameEncoder.Reset()
	e.timeUnixNanoEncoder.Reset()
	e.attributesEncoder.Reset()
	e.droppedAttributesCountEncoder.Reset()
}

// Encode encodes val into buf
func (e *EventEncoder) Encode(val *Event) {
	oldLen := e.buf.BitCount()

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedEventName |
				fieldModifiedEventTimeUnixNano |
				fieldModifiedEventAttributes |
				fieldModifiedEventDroppedAttributesCount | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)

	// Encode modified, present fields.

	if fieldMask&fieldModifiedEventName != 0 {
		// Encode Name
		e.nameEncoder.Encode(val.name)
	}

	if fieldMask&fieldModifiedEventTimeUnixNano != 0 {
		// Encode TimeUnixNano
		e.timeUnixNanoEncoder.Encode(val.timeUnixNano)
	}

	if fieldMask&fieldModifiedEventAttributes != 0 {
		// Encode Attributes
		e.attributesEncoder.Encode(&val.attributes)
	}

	if fieldMask&fieldModifiedEventDroppedAttributesCount != 0 {
		// Encode DroppedAttributesCount
		e.droppedAttributesCountEncoder.Encode(val.droppedAttributesCount)
	}

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *EventEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Name and subsequent fields are skipped.
	}
	e.nameEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // TimeUnixNano and subsequent fields are skipped.
	}
	e.timeUnixNanoEncoder.CollectColumns(columnSet.At(1))
	if e.fieldCount <= 2 {
		return // Attributes and subsequent fields are skipped.
	}
	e.attributesEncoder.CollectColumns(columnSet.At(2))
	if e.fieldCount <= 3 {
		return // DroppedAttributesCount and subsequent fields are skipped.
	}
	e.droppedAttributesCountEncoder.CollectColumns(columnSet.At(3))
}

// EventDecoder implements decoding of Event
type EventDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Event
	lastVal    Event
	fieldCount uint

	nameDecoder                   encoders.StringDecoder
	timeUnixNanoDecoder           encoders.Uint64Decoder
	attributesDecoder             AttributesDecoder
	droppedAttributesCountDecoder encoders.Uint64Decoder
}

// Init is called once in the lifetime of the stream.
func (d *EventDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.EventDecoder = d

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Event")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Event")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 4
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // Name and subsequent fields are skipped.
	}
	err = d.nameDecoder.Init(&state.SpanEventName, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // TimeUnixNano and subsequent fields are skipped.
	}
	err = d.timeUnixNanoDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Attributes and subsequent fields are skipped.
	}
	err = d.attributesDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // DroppedAttributesCount and subsequent fields are skipped.
	}
	err = d.droppedAttributesCountDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *EventDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Name and subsequent fields are skipped.
	}
	d.nameDecoder.Continue()
	if d.fieldCount <= 1 {
		return // TimeUnixNano and subsequent fields are skipped.
	}
	d.timeUnixNanoDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Attributes and subsequent fields are skipped.
	}
	d.attributesDecoder.Continue()
	if d.fieldCount <= 3 {
		return // DroppedAttributesCount and subsequent fields are skipped.
	}
	d.droppedAttributesCountDecoder.Continue()
}

func (d *EventDecoder) Reset() {
	d.nameDecoder.Reset()
	d.timeUnixNanoDecoder.Reset()
	d.attributesDecoder.Reset()
	d.droppedAttributesCountDecoder.Reset()
}

func (d *EventDecoder) Decode(dstPtr *Event) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedEventName != 0 {
		// Field is changed and is present, decode it.
		err = d.nameDecoder.Decode(&val.name)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedEventTimeUnixNano != 0 {
		// Field is changed and is present, decode it.
		err = d.timeUnixNanoDecoder.Decode(&val.timeUnixNano)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedEventAttributes != 0 {
		// Field is changed and is present, decode it.
		err = d.attributesDecoder.Decode(&val.attributes)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedEventDroppedAttributesCount != 0 {
		// Field is changed and is present, decode it.
		err = d.droppedAttributesCountDecoder.Decode(&val.droppedAttributesCount)
		if err != nil {
			return err
		}
	}

	return nil
}
