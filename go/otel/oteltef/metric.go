// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"modernc.org/b/v2"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Metric struct {
	name                   string
	description            string
	unit                   string
	type_                  uint64
	metadata               Attributes
	histogramBounds        Float64Array
	aggregationTemporality uint64
	monotonic              bool

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const MetricStructName = "Metric"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedMetricName = uint64(1 << iota)
	fieldModifiedMetricDescription
	fieldModifiedMetricUnit
	fieldModifiedMetricType
	fieldModifiedMetricMetadata
	fieldModifiedMetricHistogramBounds
	fieldModifiedMetricAggregationTemporality
	fieldModifiedMetricMonotonic
)

// Init must be called once, before the Metric is used.
func (s *Metric) Init() {
	s.init(nil, 0)
}

func NewMetric() *Metric {
	var s Metric
	s.init(nil, 0)
	return &s
}

func (s *Metric) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.metadata.init(&s.modifiedFields, fieldModifiedMetricMetadata)
	s.histogramBounds.init(&s.modifiedFields, fieldModifiedMetricHistogramBounds)
}

func (s *Metric) Name() string {
	return s.name
}

// SetName sets the value of Name field.
func (s *Metric) SetName(v string) {
	if !pkg.StringEqual(s.name, v) {
		s.name = v
		s.markNameModified()
	}
}

func (s *Metric) markNameModified() {
	s.modifiedFields.markModified(fieldModifiedMetricName)
}

// IsNameModified returns true the value of Name field was modified since
// Metric was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metric) IsNameModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricName != 0
}

func (s *Metric) Description() string {
	return s.description
}

// SetDescription sets the value of Description field.
func (s *Metric) SetDescription(v string) {
	if !pkg.StringEqual(s.description, v) {
		s.description = v
		s.markDescriptionModified()
	}
}

func (s *Metric) markDescriptionModified() {
	s.modifiedFields.markModified(fieldModifiedMetricDescription)
}

// IsDescriptionModified returns true the value of Description field was modified since
// Metric was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metric) IsDescriptionModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricDescription != 0
}

func (s *Metric) Unit() string {
	return s.unit
}

// SetUnit sets the value of Unit field.
func (s *Metric) SetUnit(v string) {
	if !pkg.StringEqual(s.unit, v) {
		s.unit = v
		s.markUnitModified()
	}
}

func (s *Metric) markUnitModified() {
	s.modifiedFields.markModified(fieldModifiedMetricUnit)
}

// IsUnitModified returns true the value of Unit field was modified since
// Metric was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metric) IsUnitModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricUnit != 0
}

func (s *Metric) Type() MetricType {
	return MetricType(s.type_)
}

// SetType sets the value of Type field.
func (s *Metric) SetType(v MetricType) {
	if !pkg.Uint64Equal(s.type_, uint64(v)) {
		s.type_ = uint64(v)
		s.markTypeModified()
	}
}

func (s *Metric) markTypeModified() {
	s.modifiedFields.markModified(fieldModifiedMetricType)
}

// IsTypeModified returns true the value of Type field was modified since
// Metric was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metric) IsTypeModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricType != 0
}

func (s *Metric) Metadata() *Attributes {
	return &s.metadata
}

// IsMetadataModified returns true the value of Metadata field was modified since
// Metric was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metric) IsMetadataModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricMetadata != 0
}

func (s *Metric) HistogramBounds() *Float64Array {
	return &s.histogramBounds
}

// IsHistogramBoundsModified returns true the value of HistogramBounds field was modified since
// Metric was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metric) IsHistogramBoundsModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricHistogramBounds != 0
}

func (s *Metric) AggregationTemporality() uint64 {
	return s.aggregationTemporality
}

// SetAggregationTemporality sets the value of AggregationTemporality field.
func (s *Metric) SetAggregationTemporality(v uint64) {
	if !pkg.Uint64Equal(s.aggregationTemporality, v) {
		s.aggregationTemporality = v
		s.markAggregationTemporalityModified()
	}
}

func (s *Metric) markAggregationTemporalityModified() {
	s.modifiedFields.markModified(fieldModifiedMetricAggregationTemporality)
}

// IsAggregationTemporalityModified returns true the value of AggregationTemporality field was modified since
// Metric was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metric) IsAggregationTemporalityModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricAggregationTemporality != 0
}

func (s *Metric) Monotonic() bool {
	return s.monotonic
}

// SetMonotonic sets the value of Monotonic field.
func (s *Metric) SetMonotonic(v bool) {
	if !pkg.BoolEqual(s.monotonic, v) {
		s.monotonic = v
		s.markMonotonicModified()
	}
}

func (s *Metric) markMonotonicModified() {
	s.modifiedFields.markModified(fieldModifiedMetricMonotonic)
}

// IsMonotonicModified returns true the value of Monotonic field was modified since
// Metric was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metric) IsMonotonicModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricMonotonic != 0
}

func (s *Metric) markUnmodifiedRecursively() {

	if s.IsNameModified() {
	}

	if s.IsDescriptionModified() {
	}

	if s.IsUnitModified() {
	}

	if s.IsTypeModified() {
	}

	if s.IsMetadataModified() {
		s.metadata.markUnmodifiedRecursively()
	}

	if s.IsHistogramBoundsModified() {
		s.histogramBounds.markUnmodifiedRecursively()
	}

	if s.IsAggregationTemporalityModified() {
	}

	if s.IsMonotonicModified() {
	}

	s.modifiedFields.mask = 0
}

func (s *Metric) Clone() *Metric {
	return &Metric{
		name:                   s.name,
		description:            s.description,
		unit:                   s.unit,
		type_:                  s.type_,
		metadata:               s.metadata.Clone(),
		histogramBounds:        s.histogramBounds.Clone(),
		aggregationTemporality: s.aggregationTemporality,
		monotonic:              s.monotonic,
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Metric) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.metadata.byteSize() + s.histogramBounds.byteSize() + 0
}

func copyMetric(dst *Metric, src *Metric) {
	dst.SetName(src.name)
	dst.SetDescription(src.description)
	dst.SetUnit(src.unit)
	dst.SetType(MetricType(src.type_))
	copyAttributes(&dst.metadata, &src.metadata)
	copyFloat64Array(&dst.histogramBounds, &src.histogramBounds)
	dst.SetAggregationTemporality(src.aggregationTemporality)
	dst.SetMonotonic(src.monotonic)
}

// CopyFrom() performs a deep copy from src.
func (s *Metric) CopyFrom(src *Metric) {
	copyMetric(s, src)
}

func (s *Metric) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Metric) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.metadata.markUnmodified()
	s.histogramBounds.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *Metric) mutateRandom(random *rand.Rand) {
	const fieldCount = 8
	if random.IntN(fieldCount) == 0 {
		s.SetName(pkg.StringRandom(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetDescription(pkg.StringRandom(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetUnit(pkg.StringRandom(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetType(MetricType(pkg.Uint64Random(random) % 5))
	}
	if random.IntN(fieldCount) == 0 {
		s.metadata.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.histogramBounds.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.SetAggregationTemporality(pkg.Uint64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetMonotonic(pkg.BoolRandom(random))
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *Metric) IsEqual(val *Metric) bool {
	if !pkg.StringEqual(e.name, val.name) {
		return false
	}
	if !pkg.StringEqual(e.description, val.description) {
		return false
	}
	if !pkg.StringEqual(e.unit, val.unit) {
		return false
	}
	if !pkg.Uint64Equal(e.type_, val.type_) {
		return false
	}
	if !e.metadata.IsEqual(&val.metadata) {
		return false
	}
	if !e.histogramBounds.IsEqual(&val.histogramBounds) {
		return false
	}
	if !pkg.Uint64Equal(e.aggregationTemporality, val.aggregationTemporality) {
		return false
	}
	if !pkg.BoolEqual(e.monotonic, val.monotonic) {
		return false
	}

	return true
}

func MetricEqual(left, right *Metric) bool {
	return left.IsEqual(right)
}

// CmpMetric performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpMetric(left, right *Metric) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	if c := strings.Compare(left.name, right.name); c != 0 {
		return c
	}
	if c := strings.Compare(left.description, right.description); c != 0 {
		return c
	}
	if c := strings.Compare(left.unit, right.unit); c != 0 {
		return c
	}
	if c := pkg.Uint64Compare(left.type_, right.type_); c != 0 {
		return c
	}
	if c := CmpAttributes(&left.metadata, &right.metadata); c != 0 {
		return c
	}
	if c := CmpFloat64Array(&left.histogramBounds, &right.histogramBounds); c != 0 {
		return c
	}
	if c := pkg.Uint64Compare(left.aggregationTemporality, right.aggregationTemporality); c != 0 {
		return c
	}
	if c := pkg.BoolCompare(left.monotonic, right.monotonic); c != 0 {
		return c
	}

	return 0
}

// MetricEncoder implements encoding of Metric
type MetricEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	nameEncoder                   encoders.StringEncoder
	descriptionEncoder            encoders.StringEncoder
	unitEncoder                   encoders.StringEncoder
	type_Encoder                  encoders.Uint64Encoder
	metadataEncoder               AttributesEncoder
	histogramBoundsEncoder        Float64ArrayEncoder
	aggregationTemporalityEncoder encoders.Uint64Encoder
	monotonicEncoder              encoders.BoolEncoder

	dict *MetricEncoderDict

	keepFieldMask uint64
	fieldCount    uint
}

type MetricEntry struct {
	refNum uint64
	val    *Metric
}

// MetricEncoderDict is the dictionary used by MetricEncoder
type MetricEncoderDict struct {
	dict    b.Tree[*Metric, MetricEntry]
	limiter *pkg.SizeLimiter
}

func (d *MetricEncoderDict) Init(limiter *pkg.SizeLimiter) {
	d.dict = *b.TreeNew[*Metric, MetricEntry](CmpMetric)
	d.dict.Set(nil, MetricEntry{}) // nil Metric is RefNum 0
	d.limiter = limiter
}

func (d *MetricEncoderDict) Reset() {
	d.dict.Clear()
	d.dict.Set(nil, MetricEntry{}) // nil Metric is RefNum 0
}

func (e *MetricEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.MetricEncoder = e
	e.limiter = &state.limiter
	e.dict = &state.Metric

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Metric")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Metric")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 8
		e.keepFieldMask = ^uint64(0)
	}

	if e.fieldCount <= 0 {
		return nil // Name and subsequent fields are skipped.
	}
	if err := e.nameEncoder.Init(&state.MetricName, e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil // Description and subsequent fields are skipped.
	}
	if err := e.descriptionEncoder.Init(&state.MetricDescription, e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 2 {
		return nil // Unit and subsequent fields are skipped.
	}
	if err := e.unitEncoder.Init(&state.MetricUnit, e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 3 {
		return nil // Type and subsequent fields are skipped.
	}
	if err := e.type_Encoder.Init(e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 4 {
		return nil // Metadata and subsequent fields are skipped.
	}
	if err := e.metadataEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 5 {
		return nil // HistogramBounds and subsequent fields are skipped.
	}
	if err := e.histogramBoundsEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 6 {
		return nil // AggregationTemporality and subsequent fields are skipped.
	}
	if err := e.aggregationTemporalityEncoder.Init(e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 7 {
		return nil // Monotonic and subsequent fields are skipped.
	}
	if err := e.monotonicEncoder.Init(e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}

	return nil
}

func (e *MetricEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.nameEncoder.Reset()
	e.descriptionEncoder.Reset()
	e.unitEncoder.Reset()
	e.type_Encoder.Reset()
	e.metadataEncoder.Reset()
	e.histogramBoundsEncoder.Reset()
	e.aggregationTemporalityEncoder.Reset()
	e.monotonicEncoder.Reset()
}

// Encode encodes val into buf
func (e *MetricEncoder) Encode(val *Metric) {
	oldLen := e.buf.BitCount()

	// Check if the Metric exists in the dictionary.
	entry, exists := e.dict.dict.Get(val)
	if exists {
		// The Metric exists, we will reference it.
		// Indicate a RefNum follows.
		e.buf.WriteBit(0)
		// Encode refNum.
		e.buf.WriteUvarintCompact(entry.refNum)

		// Account written bits in the limiter.
		newLen := e.buf.BitCount()
		e.limiter.AddFrameBits(newLen - oldLen)

		// Mark all fields non-modified recursively so that next Encode() correctly
		// encodes only fields that change after this.
		val.markUnmodifiedRecursively()
		return
	}

	// The Metric does not exist in the dictionary. Add it to the dictionary.
	valInDict := val.Clone()
	entry = MetricEntry{refNum: uint64(e.dict.dict.Len()), val: valInDict}
	e.dict.dict.Set(valInDict, entry)
	e.dict.limiter.AddDictElemSize(valInDict.byteSize())

	// Indicate that an encoded Metric follows.
	e.buf.WriteBit(1)
	// TODO: optimize and merge WriteBit with the following WriteBits.
	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedMetricName |
				fieldModifiedMetricDescription |
				fieldModifiedMetricUnit |
				fieldModifiedMetricType |
				fieldModifiedMetricMetadata |
				fieldModifiedMetricHistogramBounds |
				fieldModifiedMetricAggregationTemporality |
				fieldModifiedMetricMonotonic | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)

	// Encode modified, present fields.

	if fieldMask&fieldModifiedMetricName != 0 {
		// Encode Name
		e.nameEncoder.Encode(val.name)
	}

	if fieldMask&fieldModifiedMetricDescription != 0 {
		// Encode Description
		e.descriptionEncoder.Encode(val.description)
	}

	if fieldMask&fieldModifiedMetricUnit != 0 {
		// Encode Unit
		e.unitEncoder.Encode(val.unit)
	}

	if fieldMask&fieldModifiedMetricType != 0 {
		// Encode Type
		e.type_Encoder.Encode(val.type_)
	}

	if fieldMask&fieldModifiedMetricMetadata != 0 {
		// Encode Metadata
		e.metadataEncoder.Encode(&val.metadata)
	}

	if fieldMask&fieldModifiedMetricHistogramBounds != 0 {
		// Encode HistogramBounds
		e.histogramBoundsEncoder.Encode(&val.histogramBounds)
	}

	if fieldMask&fieldModifiedMetricAggregationTemporality != 0 {
		// Encode AggregationTemporality
		e.aggregationTemporalityEncoder.Encode(val.aggregationTemporality)
	}

	if fieldMask&fieldModifiedMetricMonotonic != 0 {
		// Encode Monotonic
		e.monotonicEncoder.Encode(val.monotonic)
	}

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *MetricEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Name and subsequent fields are skipped.
	}
	e.nameEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // Description and subsequent fields are skipped.
	}
	e.descriptionEncoder.CollectColumns(columnSet.At(1))
	if e.fieldCount <= 2 {
		return // Unit and subsequent fields are skipped.
	}
	e.unitEncoder.CollectColumns(columnSet.At(2))
	if e.fieldCount <= 3 {
		return // Type and subsequent fields are skipped.
	}
	e.type_Encoder.CollectColumns(columnSet.At(3))
	if e.fieldCount <= 4 {
		return // Metadata and subsequent fields are skipped.
	}
	e.metadataEncoder.CollectColumns(columnSet.At(4))
	if e.fieldCount <= 5 {
		return // HistogramBounds and subsequent fields are skipped.
	}
	e.histogramBoundsEncoder.CollectColumns(columnSet.At(5))
	if e.fieldCount <= 6 {
		return // AggregationTemporality and subsequent fields are skipped.
	}
	e.aggregationTemporalityEncoder.CollectColumns(columnSet.At(6))
	if e.fieldCount <= 7 {
		return // Monotonic and subsequent fields are skipped.
	}
	e.monotonicEncoder.CollectColumns(columnSet.At(7))
}

// MetricDecoder implements decoding of Metric
type MetricDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Metric
	lastVal    Metric
	fieldCount uint

	nameDecoder                   encoders.StringDecoder
	descriptionDecoder            encoders.StringDecoder
	unitDecoder                   encoders.StringDecoder
	type_Decoder                  encoders.Uint64Decoder
	metadataDecoder               AttributesDecoder
	histogramBoundsDecoder        Float64ArrayDecoder
	aggregationTemporalityDecoder encoders.Uint64Decoder
	monotonicDecoder              encoders.BoolDecoder

	dict *MetricDecoderDict
}

// Init is called once in the lifetime of the stream.
func (d *MetricDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.MetricDecoder = d

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Metric")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Metric")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 8
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal
	d.dict = &state.Metric

	var err error

	if d.fieldCount <= 0 {
		return nil // Name and subsequent fields are skipped.
	}
	err = d.nameDecoder.Init(&state.MetricName, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Description and subsequent fields are skipped.
	}
	err = d.descriptionDecoder.Init(&state.MetricDescription, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Unit and subsequent fields are skipped.
	}
	err = d.unitDecoder.Init(&state.MetricUnit, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Type and subsequent fields are skipped.
	}
	err = d.type_Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // Metadata and subsequent fields are skipped.
	}
	err = d.metadataDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 5 {
		return nil // HistogramBounds and subsequent fields are skipped.
	}
	err = d.histogramBoundsDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 6 {
		return nil // AggregationTemporality and subsequent fields are skipped.
	}
	err = d.aggregationTemporalityDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 7 {
		return nil // Monotonic and subsequent fields are skipped.
	}
	err = d.monotonicDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *MetricDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Name and subsequent fields are skipped.
	}
	d.nameDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Description and subsequent fields are skipped.
	}
	d.descriptionDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Unit and subsequent fields are skipped.
	}
	d.unitDecoder.Continue()
	if d.fieldCount <= 3 {
		return // Type and subsequent fields are skipped.
	}
	d.type_Decoder.Continue()
	if d.fieldCount <= 4 {
		return // Metadata and subsequent fields are skipped.
	}
	d.metadataDecoder.Continue()
	if d.fieldCount <= 5 {
		return // HistogramBounds and subsequent fields are skipped.
	}
	d.histogramBoundsDecoder.Continue()
	if d.fieldCount <= 6 {
		return // AggregationTemporality and subsequent fields are skipped.
	}
	d.aggregationTemporalityDecoder.Continue()
	if d.fieldCount <= 7 {
		return // Monotonic and subsequent fields are skipped.
	}
	d.monotonicDecoder.Continue()
}

func (d *MetricDecoder) Reset() {
	d.nameDecoder.Reset()
	d.descriptionDecoder.Reset()
	d.unitDecoder.Reset()
	d.type_Decoder.Reset()
	d.metadataDecoder.Reset()
	d.histogramBoundsDecoder.Reset()
	d.aggregationTemporalityDecoder.Reset()
	d.monotonicDecoder.Reset()
}

func (d *MetricDecoder) Decode(dstPtr **Metric) error {
	// Check if the Metric exists in the dictionary.
	dictFlag := d.buf.ReadBit()
	if dictFlag == 0 {
		refNum, err := d.buf.ReadUvarintCompact()
		if err != nil {
			return err
		}
		if refNum >= uint64(len(d.dict.dict)) {
			return pkg.ErrInvalidRefNum
		}
		d.lastValPtr = d.dict.dict[refNum]
		*dstPtr = d.lastValPtr
		return nil
	}

	// lastValPtr here is pointing to a element in the dictionary. We are not allowed
	// to modify it. Make a clone of it and decode into the clone.
	val := d.lastValPtr.Clone()
	d.lastValPtr = val
	*dstPtr = val

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedMetricName != 0 {
		// Field is changed and is present, decode it.
		err = d.nameDecoder.Decode(&val.name)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricDescription != 0 {
		// Field is changed and is present, decode it.
		err = d.descriptionDecoder.Decode(&val.description)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricUnit != 0 {
		// Field is changed and is present, decode it.
		err = d.unitDecoder.Decode(&val.unit)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricType != 0 {
		// Field is changed and is present, decode it.
		err = d.type_Decoder.Decode(&val.type_)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricMetadata != 0 {
		// Field is changed and is present, decode it.
		err = d.metadataDecoder.Decode(&val.metadata)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricHistogramBounds != 0 {
		// Field is changed and is present, decode it.
		err = d.histogramBoundsDecoder.Decode(&val.histogramBounds)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricAggregationTemporality != 0 {
		// Field is changed and is present, decode it.
		err = d.aggregationTemporalityDecoder.Decode(&val.aggregationTemporality)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricMonotonic != 0 {
		// Field is changed and is present, decode it.
		err = d.monotonicDecoder.Decode(&val.monotonic)
		if err != nil {
			return err
		}
	}

	d.dict.dict = append(d.dict.dict, val)

	return nil
}

// MetricDecoderDict is the dictionary used by MetricDecoder
type MetricDecoderDict struct {
	dict []*Metric
}

func (d *MetricDecoderDict) Init() {
	d.dict = d.dict[:0]
	d.dict = append(d.dict, nil) // nil Metric is RefNum 0
}

// Reset the dictionary to initial state. Used when a frame is
// started with RestartDictionaries flag.
func (d *MetricDecoderDict) Reset() {
	d.Init()
}
