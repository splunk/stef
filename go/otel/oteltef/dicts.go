// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

type WriterState struct {
	limiter pkg.SizeLimiter

	// OverrideSchema is set if encoding should perform a translation into the target
	// schema. The specified schema must be compatible with endoders' schema.
	OverrideSchema *schema.WireSchema

	// Dictionaries
	AnyValueString    encoders.StringEncoderDict
	AttributeKey      encoders.StringEncoderDict
	Metric            MetricEncoderDict
	MetricDescription encoders.StringEncoderDict
	MetricName        encoders.StringEncoderDict
	MetricUnit        encoders.StringEncoderDict
	Resource          ResourceEncoderDict
	SchemaURL         encoders.StringEncoderDict
	Scope             ScopeEncoderDict
	ScopeName         encoders.StringEncoderDict
	ScopeVersion      encoders.StringEncoderDict
	SpanEventName     encoders.StringEncoderDict
	SpanName          encoders.StringEncoderDict

	// Encoders
	AnyValueEncoder           *AnyValueEncoder
	AnyValueArrayEncoder      *AnyValueArrayEncoder
	AttributesEncoder         *AttributesEncoder
	EnvelopeEncoder           *EnvelopeEncoder
	EnvelopeAttributesEncoder *EnvelopeAttributesEncoder
	EventEncoder              *EventEncoder
	EventArrayEncoder         *EventArrayEncoder
	ExemplarEncoder           *ExemplarEncoder
	ExemplarArrayEncoder      *ExemplarArrayEncoder
	ExemplarValueEncoder      *ExemplarValueEncoder
	Float64ArrayEncoder       *Float64ArrayEncoder
	HistogramValueEncoder     *HistogramValueEncoder
	Int64ArrayEncoder         *Int64ArrayEncoder
	KeyValueListEncoder       *KeyValueListEncoder
	LinkEncoder               *LinkEncoder
	LinkArrayEncoder          *LinkArrayEncoder
	MetricEncoder             *MetricEncoder
	MetricsEncoder            *MetricsEncoder
	PointEncoder              *PointEncoder
	PointValueEncoder         *PointValueEncoder
	ResourceEncoder           *ResourceEncoder
	ScopeEncoder              *ScopeEncoder
	SpanEncoder               *SpanEncoder
	SpanStatusEncoder         *SpanStatusEncoder
	SpansEncoder              *SpansEncoder
}

func (d *WriterState) Init(opts *pkg.WriterOptions) {
	d.limiter.Init(opts)
	d.OverrideSchema = opts.Schema

	// Init dictionaries
	d.AnyValueString.Init(&d.limiter)
	d.AttributeKey.Init(&d.limiter)
	d.Metric.Init(&d.limiter)
	d.MetricDescription.Init(&d.limiter)
	d.MetricName.Init(&d.limiter)
	d.MetricUnit.Init(&d.limiter)
	d.Resource.Init(&d.limiter)
	d.SchemaURL.Init(&d.limiter)
	d.Scope.Init(&d.limiter)
	d.ScopeName.Init(&d.limiter)
	d.ScopeVersion.Init(&d.limiter)
	d.SpanEventName.Init(&d.limiter)
	d.SpanName.Init(&d.limiter)

}

func (d *WriterState) Reset() {
	d.limiter.ResetDict()
	d.AnyValueString.Reset()
	d.AttributeKey.Reset()
	d.Metric.Reset()
	d.MetricDescription.Reset()
	d.MetricName.Reset()
	d.MetricUnit.Reset()
	d.Resource.Reset()
	d.SchemaURL.Reset()
	d.Scope.Reset()
	d.ScopeName.Reset()
	d.ScopeVersion.Reset()
	d.SpanEventName.Reset()
	d.SpanName.Reset()
}

type ReaderState struct {
	// OverrideSchema is set if decoding should perform a translation from specfied
	// schema. OverrideSchema must be compatible with decoders' schema.
	OverrideSchema *schema.WireSchema

	// Dictionaries
	AnyValueString    encoders.StringDecoderDict
	AttributeKey      encoders.StringDecoderDict
	Metric            MetricDecoderDict
	MetricDescription encoders.StringDecoderDict
	MetricName        encoders.StringDecoderDict
	MetricUnit        encoders.StringDecoderDict
	Resource          ResourceDecoderDict
	SchemaURL         encoders.StringDecoderDict
	Scope             ScopeDecoderDict
	ScopeName         encoders.StringDecoderDict
	ScopeVersion      encoders.StringDecoderDict
	SpanEventName     encoders.StringDecoderDict
	SpanName          encoders.StringDecoderDict

	// Decoders
	AnyValueDecoder           *AnyValueDecoder
	AnyValueArrayDecoder      *AnyValueArrayDecoder
	AttributesDecoder         *AttributesDecoder
	EnvelopeDecoder           *EnvelopeDecoder
	EnvelopeAttributesDecoder *EnvelopeAttributesDecoder
	EventDecoder              *EventDecoder
	EventArrayDecoder         *EventArrayDecoder
	ExemplarDecoder           *ExemplarDecoder
	ExemplarArrayDecoder      *ExemplarArrayDecoder
	ExemplarValueDecoder      *ExemplarValueDecoder
	Float64ArrayDecoder       *Float64ArrayDecoder
	HistogramValueDecoder     *HistogramValueDecoder
	Int64ArrayDecoder         *Int64ArrayDecoder
	KeyValueListDecoder       *KeyValueListDecoder
	LinkDecoder               *LinkDecoder
	LinkArrayDecoder          *LinkArrayDecoder
	MetricDecoder             *MetricDecoder
	MetricsDecoder            *MetricsDecoder
	PointDecoder              *PointDecoder
	PointValueDecoder         *PointValueDecoder
	ResourceDecoder           *ResourceDecoder
	ScopeDecoder              *ScopeDecoder
	SpanDecoder               *SpanDecoder
	SpanStatusDecoder         *SpanStatusDecoder
	SpansDecoder              *SpansDecoder
}

func (d *ReaderState) Init(overrideSchema *schema.WireSchema) {
	d.OverrideSchema = overrideSchema
	d.AnyValueString.Init()
	d.AttributeKey.Init()
	d.Metric.Init()
	d.MetricDescription.Init()
	d.MetricName.Init()
	d.MetricUnit.Init()
	d.Resource.Init()
	d.SchemaURL.Init()
	d.Scope.Init()
	d.ScopeName.Init()
	d.ScopeVersion.Init()
	d.SpanEventName.Init()
	d.SpanName.Init()
}
