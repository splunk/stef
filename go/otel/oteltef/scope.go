// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"strings"
	"unsafe"

	"modernc.org/b/v2"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

type Scope struct {
	name       string
	version    string
	schemaURL  string
	attributes Attributes

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedScopeName = uint64(1 << iota)
	fieldModifiedScopeVersion
	fieldModifiedScopeSchemaURL
	fieldModifiedScopeAttributes
)

// Init must be called once, before the Scope is used.
func (s *Scope) Init() {
	s.init(nil, 0)
}

func NewScope() *Scope {
	var s Scope
	s.init(nil, 0)
	return &s
}

func (s *Scope) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.attributes.init(&s.modifiedFields, fieldModifiedScopeAttributes)
}

func (s *Scope) Name() string {
	return s.name
}

// SetName sets the value of Name field.
func (s *Scope) SetName(v string) {
	if !pkg.StringEqual(s.name, v) {
		s.name = v
		s.markNameModified()
	}
}

func (s *Scope) markNameModified() {
	s.modifiedFields.markModified(fieldModifiedScopeName)
}

// IsNameModified returns true the value of Name field was modified since
// Scope was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Scope) IsNameModified() bool {
	return s.modifiedFields.mask&fieldModifiedScopeName != 0
}

func (s *Scope) Version() string {
	return s.version
}

// SetVersion sets the value of Version field.
func (s *Scope) SetVersion(v string) {
	if !pkg.StringEqual(s.version, v) {
		s.version = v
		s.markVersionModified()
	}
}

func (s *Scope) markVersionModified() {
	s.modifiedFields.markModified(fieldModifiedScopeVersion)
}

// IsVersionModified returns true the value of Version field was modified since
// Scope was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Scope) IsVersionModified() bool {
	return s.modifiedFields.mask&fieldModifiedScopeVersion != 0
}

func (s *Scope) SchemaURL() string {
	return s.schemaURL
}

// SetSchemaURL sets the value of SchemaURL field.
func (s *Scope) SetSchemaURL(v string) {
	if !pkg.StringEqual(s.schemaURL, v) {
		s.schemaURL = v
		s.markSchemaURLModified()
	}
}

func (s *Scope) markSchemaURLModified() {
	s.modifiedFields.markModified(fieldModifiedScopeSchemaURL)
}

// IsSchemaURLModified returns true the value of SchemaURL field was modified since
// Scope was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Scope) IsSchemaURLModified() bool {
	return s.modifiedFields.mask&fieldModifiedScopeSchemaURL != 0
}

func (s *Scope) Attributes() *Attributes {
	return &s.attributes
}

// IsAttributesModified returns true the value of Attributes field was modified since
// Scope was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Scope) IsAttributesModified() bool {
	return s.modifiedFields.mask&fieldModifiedScopeAttributes != 0
}

func (s *Scope) Clone() *Scope {
	return &Scope{
		name:       s.name,
		version:    s.version,
		schemaURL:  s.schemaURL,
		attributes: s.attributes.Clone(),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Scope) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.attributes.byteSize() + 0
}

func copyScope(dst *Scope, src *Scope) {
	dst.SetName(src.name)
	dst.SetVersion(src.version)
	dst.SetSchemaURL(src.schemaURL)
	copyAttributes(&dst.attributes, &src.attributes)
}

// CopyFrom() performs a deep copy from src.
func (s *Scope) CopyFrom(src *Scope) {
	copyScope(s, src)
}

func (s *Scope) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Scope) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.attributes.markUnmodified()
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *Scope) IsEqual(val *Scope) bool {
	if !pkg.StringEqual(e.name, val.name) {
		return false
	}
	if !pkg.StringEqual(e.version, val.version) {
		return false
	}
	if !pkg.StringEqual(e.schemaURL, val.schemaURL) {
		return false
	}
	if !e.attributes.IsEqual(&val.attributes) {
		return false
	}

	return true
}

func ScopeEqual(left, right *Scope) bool {
	return left.IsEqual(right)
}

// CmpScope performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpScope(left, right *Scope) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	if c := strings.Compare(left.name, right.name); c != 0 {
		return c
	}
	if c := strings.Compare(left.version, right.version); c != 0 {
		return c
	}
	if c := strings.Compare(left.schemaURL, right.schemaURL); c != 0 {
		return c
	}
	if c := CmpAttributes(&left.attributes, &right.attributes); c != 0 {
		return c
	}

	return 0
}

// ScopeEncoder implements encoding of Scope
type ScopeEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	nameEncoder       encoders.StringEncoder
	versionEncoder    encoders.StringEncoder
	schemaURLEncoder  encoders.StringEncoder
	attributesEncoder AttributesEncoder

	dict *ScopeEncoderDict

	keepFieldMask uint64
	fieldCount    uint
}

type ScopeEntry struct {
	refNum uint64
	val    *Scope
}

// ScopeEncoderDict is the dictionary used by ScopeEncoder
type ScopeEncoderDict struct {
	dict    b.Tree[*Scope, ScopeEntry]
	limiter *pkg.SizeLimiter
}

func (d *ScopeEncoderDict) Init(limiter *pkg.SizeLimiter) {
	d.dict = *b.TreeNew[*Scope, ScopeEntry](CmpScope)
	d.dict.Set(nil, ScopeEntry{}) // nil Scope is RefNum 0
	d.limiter = limiter
}

func (d *ScopeEncoderDict) Reset() {
	d.dict.Clear()
	d.dict.Set(nil, ScopeEntry{}) // nil Scope is RefNum 0
}

func (e *ScopeEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.ScopeEncoder = e
	e.limiter = &state.limiter
	e.dict = &state.Scope

	if state.OverrideSchema != nil {
		overrideSchema, ok := state.OverrideSchema.Structs["Scope"]
		if !ok || overrideSchema == nil {
			return fmt.Errorf("cannot find struct in override schema: %s", "Scope")
		}

		// Number of fields in the target schema.
		e.fieldCount = uint(len(overrideSchema.Fields))

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 4
		e.keepFieldMask = ^uint64(0)
	}

	if e.fieldCount <= 0 {
		return nil // Name and subsequent fields are skipped.
	}
	if err := e.nameEncoder.Init(&state.ScopeName, e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil // Version and subsequent fields are skipped.
	}
	if err := e.versionEncoder.Init(&state.ScopeVersion, e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 2 {
		return nil // SchemaURL and subsequent fields are skipped.
	}
	if err := e.schemaURLEncoder.Init(&state.SchemaURL, e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 3 {
		return nil // Attributes and subsequent fields are skipped.
	}
	if err := e.attributesEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}

	return nil
}

func (e *ScopeEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.nameEncoder.Reset()
	e.versionEncoder.Reset()
	e.schemaURLEncoder.Reset()
	e.attributesEncoder.Reset()
}

// Encode encodes val into buf
func (e *ScopeEncoder) Encode(val *Scope) {
	oldLen := e.buf.BitCount()

	// Check if the Scope exists in the dictionary.
	entry, exists := e.dict.dict.Get(val)
	if exists {
		// The Scope exists, we will reference it.
		// Indicate a RefNum follows.
		e.buf.WriteBit(0)
		// Encode refNum.
		e.buf.WriteUvarintCompact(entry.refNum)

		// Account written bits in the limiter.
		newLen := e.buf.BitCount()
		e.limiter.AddFrameBits(newLen - oldLen)

		// Mark all fields non-modified so that next Encode() correctly
		// encodes only fields that change after this.
		val.modifiedFields.mask = 0
		return
	}

	// The Scope does not exist in the dictionary. Add it to the dictionary.
	valInDict := val.Clone()
	entry = ScopeEntry{refNum: uint64(e.dict.dict.Len()), val: valInDict}
	e.dict.dict.Set(valInDict, entry)
	e.dict.limiter.AddDictElemSize(valInDict.byteSize())

	// Indicate that an encoded Scope follows.
	e.buf.WriteBit(1)
	// TODO: optimize and merge WriteBit with the following WriteBits.
	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedScopeName |
				fieldModifiedScopeVersion |
				fieldModifiedScopeSchemaURL |
				fieldModifiedScopeAttributes | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)

	// Encode modified, present fields.

	if fieldMask&fieldModifiedScopeName != 0 {
		// Encode Name
		e.nameEncoder.Encode(val.name)
	}

	if fieldMask&fieldModifiedScopeVersion != 0 {
		// Encode Version
		e.versionEncoder.Encode(val.version)
	}

	if fieldMask&fieldModifiedScopeSchemaURL != 0 {
		// Encode SchemaURL
		e.schemaURLEncoder.Encode(val.schemaURL)
	}

	if fieldMask&fieldModifiedScopeAttributes != 0 {
		// Encode Attributes
		e.attributesEncoder.Encode(&val.attributes)
	}

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *ScopeEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Name and subsequent fields are skipped.
	}
	e.nameEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // Version and subsequent fields are skipped.
	}
	e.versionEncoder.CollectColumns(columnSet.At(1))
	if e.fieldCount <= 2 {
		return // SchemaURL and subsequent fields are skipped.
	}
	e.schemaURLEncoder.CollectColumns(columnSet.At(2))
	if e.fieldCount <= 3 {
		return // Attributes and subsequent fields are skipped.
	}
	e.attributesEncoder.CollectColumns(columnSet.At(3))
}

// ScopeDecoder implements decoding of Scope
type ScopeDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Scope
	lastVal    Scope
	fieldCount uint

	nameDecoder       encoders.StringDecoder
	versionDecoder    encoders.StringDecoder
	schemaURLDecoder  encoders.StringDecoder
	attributesDecoder AttributesDecoder

	dict *ScopeDecoderDict
}

// Init is called once in the lifetime of the stream.
func (d *ScopeDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.ScopeDecoder = d

	if state.OverrideSchema != nil {
		overrideSchema, ok := state.OverrideSchema.Structs["Scope"]
		if !ok || overrideSchema == nil {
			return fmt.Errorf("cannot find struct in override schema: %s", "Scope")
		}

		// Number of fields in the target schema.
		d.fieldCount = uint(len(overrideSchema.Fields))
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 4
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal
	d.dict = &state.Scope

	var err error

	if d.fieldCount <= 0 {
		return nil // Name and subsequent fields are skipped.
	}
	err = d.nameDecoder.Init(&state.ScopeName, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Version and subsequent fields are skipped.
	}
	err = d.versionDecoder.Init(&state.ScopeVersion, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // SchemaURL and subsequent fields are skipped.
	}
	err = d.schemaURLDecoder.Init(&state.SchemaURL, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Attributes and subsequent fields are skipped.
	}
	err = d.attributesDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *ScopeDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Name and subsequent fields are skipped.
	}
	d.nameDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Version and subsequent fields are skipped.
	}
	d.versionDecoder.Continue()
	if d.fieldCount <= 2 {
		return // SchemaURL and subsequent fields are skipped.
	}
	d.schemaURLDecoder.Continue()
	if d.fieldCount <= 3 {
		return // Attributes and subsequent fields are skipped.
	}
	d.attributesDecoder.Continue()
}

func (d *ScopeDecoder) Reset() {
	d.nameDecoder.Reset()
	d.versionDecoder.Reset()
	d.schemaURLDecoder.Reset()
	d.attributesDecoder.Reset()
}

func (d *ScopeDecoder) Decode(dstPtr **Scope) error {
	// Check if the Scope exists in the dictionary.
	dictFlag := d.buf.ReadBit()
	if dictFlag == 0 {
		refNum, err := d.buf.ReadUvarintCompact()
		if err != nil {
			return err
		}
		if refNum >= uint64(len(d.dict.dict)) {
			return pkg.ErrInvalidRefNum
		}
		d.lastValPtr = d.dict.dict[refNum]
		*dstPtr = d.lastValPtr
		return nil
	}

	// lastValPtr here is pointing to a element in the dictionary. We are not allowed
	// to modify it. Make a clone of it and decode into the clone.
	val := d.lastValPtr.Clone()
	d.lastValPtr = val
	*dstPtr = val

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedScopeName != 0 {
		// Field is changed and is present, decode it.
		err = d.nameDecoder.Decode(&val.name)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedScopeVersion != 0 {
		// Field is changed and is present, decode it.
		err = d.versionDecoder.Decode(&val.version)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedScopeSchemaURL != 0 {
		// Field is changed and is present, decode it.
		err = d.schemaURLDecoder.Decode(&val.schemaURL)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedScopeAttributes != 0 {
		// Field is changed and is present, decode it.
		err = d.attributesDecoder.Decode(&val.attributes)
		if err != nil {
			return err
		}
	}

	d.dict.dict = append(d.dict.dict, val)

	return nil
}

// ScopeDecoderDict is the dictionary used by ScopeDecoder
type ScopeDecoderDict struct {
	dict []*Scope
}

func (d *ScopeDecoderDict) Init() {
	d.dict = d.dict[:0]
	d.dict = append(d.dict, nil) // nil Scope is RefNum 0
}
