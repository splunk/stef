// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

type Metrics struct {
	envelope   Envelope
	metric     *Metric
	resource   *Resource
	scope      *Scope
	attributes Attributes
	point      Point

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedMetricsEnvelope = uint64(1 << iota)
	fieldModifiedMetricsMetric
	fieldModifiedMetricsResource
	fieldModifiedMetricsScope
	fieldModifiedMetricsAttributes
	fieldModifiedMetricsPoint
)

// Init must be called once, before the Metrics is used.
func (s *Metrics) Init() {
	s.init(nil, 0)
}

func NewMetrics() *Metrics {
	var s Metrics
	s.init(nil, 0)
	return &s
}

func (s *Metrics) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.envelope.init(&s.modifiedFields, fieldModifiedMetricsEnvelope)
	s.metric = &Metric{}
	s.metric.init(&s.modifiedFields, fieldModifiedMetricsMetric)
	s.resource = &Resource{}
	s.resource.init(&s.modifiedFields, fieldModifiedMetricsResource)
	s.scope = &Scope{}
	s.scope.init(&s.modifiedFields, fieldModifiedMetricsScope)
	s.attributes.init(&s.modifiedFields, fieldModifiedMetricsAttributes)
	s.point.init(&s.modifiedFields, fieldModifiedMetricsPoint)
}

func (s *Metrics) Envelope() *Envelope {
	return &s.envelope
}

// IsEnvelopeModified returns true the value of Envelope field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsEnvelopeModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsEnvelope != 0
}

func (s *Metrics) Metric() *Metric {
	return s.metric
}

// IsMetricModified returns true the value of Metric field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsMetricModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsMetric != 0
}

func (s *Metrics) Resource() *Resource {
	return s.resource
}

// IsResourceModified returns true the value of Resource field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsResourceModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsResource != 0
}

func (s *Metrics) Scope() *Scope {
	return s.scope
}

// IsScopeModified returns true the value of Scope field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsScopeModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsScope != 0
}

func (s *Metrics) Attributes() *Attributes {
	return &s.attributes
}

// IsAttributesModified returns true the value of Attributes field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsAttributesModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsAttributes != 0
}

func (s *Metrics) Point() *Point {
	return &s.point
}

// IsPointModified returns true the value of Point field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsPointModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsPoint != 0
}

func (s *Metrics) markUnmodifiedRecursively() {

	if s.IsEnvelopeModified() {
		s.envelope.markUnmodifiedRecursively()
	}

	if s.IsMetricModified() {
		s.metric.markUnmodifiedRecursively()
	}

	if s.IsResourceModified() {
		s.resource.markUnmodifiedRecursively()
	}

	if s.IsScopeModified() {
		s.scope.markUnmodifiedRecursively()
	}

	if s.IsAttributesModified() {
		s.attributes.markUnmodifiedRecursively()
	}

	if s.IsPointModified() {
		s.point.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

func (s *Metrics) Clone() Metrics {
	return Metrics{
		envelope:   s.envelope.Clone(),
		metric:     s.metric.Clone(),
		resource:   s.resource.Clone(),
		scope:      s.scope.Clone(),
		attributes: s.attributes.Clone(),
		point:      s.point.Clone(),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Metrics) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.envelope.byteSize() + s.metric.byteSize() + s.resource.byteSize() + s.scope.byteSize() + s.attributes.byteSize() + s.point.byteSize() + 0
}

func copyMetrics(dst *Metrics, src *Metrics) {
	copyEnvelope(&dst.envelope, &src.envelope)
	copyMetric(dst.metric, src.metric)
	copyResource(dst.resource, src.resource)
	copyScope(dst.scope, src.scope)
	copyAttributes(&dst.attributes, &src.attributes)
	copyPoint(&dst.point, &src.point)
}

// CopyFrom() performs a deep copy from src.
func (s *Metrics) CopyFrom(src *Metrics) {
	copyMetrics(s, src)
}

func (s *Metrics) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Metrics) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.envelope.markUnmodified()
	s.metric.markUnmodified()
	s.resource.markUnmodified()
	s.scope.markUnmodified()
	s.attributes.markUnmodified()
	s.point.markUnmodified()
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *Metrics) IsEqual(val *Metrics) bool {
	if !e.envelope.IsEqual(&val.envelope) {
		return false
	}
	if !e.metric.IsEqual(val.metric) {
		return false
	}
	if !e.resource.IsEqual(val.resource) {
		return false
	}
	if !e.scope.IsEqual(val.scope) {
		return false
	}
	if !e.attributes.IsEqual(&val.attributes) {
		return false
	}
	if !e.point.IsEqual(&val.point) {
		return false
	}

	return true
}

func MetricsEqual(left, right *Metrics) bool {
	return left.IsEqual(right)
}

// CmpMetrics performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpMetrics(left, right *Metrics) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	if c := CmpEnvelope(&left.envelope, &right.envelope); c != 0 {
		return c
	}
	if c := CmpMetric(left.metric, right.metric); c != 0 {
		return c
	}
	if c := CmpResource(left.resource, right.resource); c != 0 {
		return c
	}
	if c := CmpScope(left.scope, right.scope); c != 0 {
		return c
	}
	if c := CmpAttributes(&left.attributes, &right.attributes); c != 0 {
		return c
	}
	if c := CmpPoint(&left.point, &right.point); c != 0 {
		return c
	}

	return 0
}

// MetricsEncoder implements encoding of Metrics
type MetricsEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	envelopeEncoder   EnvelopeEncoder
	metricEncoder     MetricEncoder
	resourceEncoder   ResourceEncoder
	scopeEncoder      ScopeEncoder
	attributesEncoder AttributesEncoder
	pointEncoder      PointEncoder

	keepFieldMask uint64
	fieldCount    uint
}

func (e *MetricsEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.MetricsEncoder = e
	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Metrics")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Metrics")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 6
		e.keepFieldMask = ^uint64(0)
	}

	if e.fieldCount <= 0 {
		return nil // Envelope and subsequent fields are skipped.
	}
	if err := e.envelopeEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil // Metric and subsequent fields are skipped.
	}
	if err := e.metricEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 2 {
		return nil // Resource and subsequent fields are skipped.
	}
	if err := e.resourceEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 3 {
		return nil // Scope and subsequent fields are skipped.
	}
	if err := e.scopeEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 4 {
		return nil // Attributes and subsequent fields are skipped.
	}
	if err := e.attributesEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 5 {
		return nil // Point and subsequent fields are skipped.
	}
	if err := e.pointEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}

	return nil
}

func (e *MetricsEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.envelopeEncoder.Reset()
	e.metricEncoder.Reset()
	e.resourceEncoder.Reset()
	e.scopeEncoder.Reset()
	e.attributesEncoder.Reset()
	e.pointEncoder.Reset()
}

// Encode encodes val into buf
func (e *MetricsEncoder) Encode(val *Metrics) {
	oldLen := e.buf.BitCount()

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedMetricsEnvelope |
				fieldModifiedMetricsMetric |
				fieldModifiedMetricsResource |
				fieldModifiedMetricsScope |
				fieldModifiedMetricsAttributes |
				fieldModifiedMetricsPoint | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)

	// Encode modified, present fields.

	if fieldMask&fieldModifiedMetricsEnvelope != 0 {
		// Encode Envelope
		e.envelopeEncoder.Encode(&val.envelope)
	}

	if fieldMask&fieldModifiedMetricsMetric != 0 {
		// Encode Metric
		e.metricEncoder.Encode(val.metric)
	}

	if fieldMask&fieldModifiedMetricsResource != 0 {
		// Encode Resource
		e.resourceEncoder.Encode(val.resource)
	}

	if fieldMask&fieldModifiedMetricsScope != 0 {
		// Encode Scope
		e.scopeEncoder.Encode(val.scope)
	}

	if fieldMask&fieldModifiedMetricsAttributes != 0 {
		// Encode Attributes
		e.attributesEncoder.Encode(&val.attributes)
	}

	if fieldMask&fieldModifiedMetricsPoint != 0 {
		// Encode Point
		e.pointEncoder.Encode(&val.point)
	}

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *MetricsEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Envelope and subsequent fields are skipped.
	}
	e.envelopeEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // Metric and subsequent fields are skipped.
	}
	e.metricEncoder.CollectColumns(columnSet.At(1))
	if e.fieldCount <= 2 {
		return // Resource and subsequent fields are skipped.
	}
	e.resourceEncoder.CollectColumns(columnSet.At(2))
	if e.fieldCount <= 3 {
		return // Scope and subsequent fields are skipped.
	}
	e.scopeEncoder.CollectColumns(columnSet.At(3))
	if e.fieldCount <= 4 {
		return // Attributes and subsequent fields are skipped.
	}
	e.attributesEncoder.CollectColumns(columnSet.At(4))
	if e.fieldCount <= 5 {
		return // Point and subsequent fields are skipped.
	}
	e.pointEncoder.CollectColumns(columnSet.At(5))
}

// MetricsDecoder implements decoding of Metrics
type MetricsDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Metrics
	lastVal    Metrics
	fieldCount uint

	envelopeDecoder   EnvelopeDecoder
	metricDecoder     MetricDecoder
	resourceDecoder   ResourceDecoder
	scopeDecoder      ScopeDecoder
	attributesDecoder AttributesDecoder
	pointDecoder      PointDecoder
}

// Init is called once in the lifetime of the stream.
func (d *MetricsDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.MetricsDecoder = d

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Metrics")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Metrics")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 6
	}

	d.column = columns.Column()

	d.lastVal.Init()
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // Envelope and subsequent fields are skipped.
	}
	err = d.envelopeDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Metric and subsequent fields are skipped.
	}
	err = d.metricDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Resource and subsequent fields are skipped.
	}
	err = d.resourceDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Scope and subsequent fields are skipped.
	}
	err = d.scopeDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // Attributes and subsequent fields are skipped.
	}
	err = d.attributesDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 5 {
		return nil // Point and subsequent fields are skipped.
	}
	err = d.pointDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *MetricsDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Envelope and subsequent fields are skipped.
	}
	d.envelopeDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Metric and subsequent fields are skipped.
	}
	d.metricDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Resource and subsequent fields are skipped.
	}
	d.resourceDecoder.Continue()
	if d.fieldCount <= 3 {
		return // Scope and subsequent fields are skipped.
	}
	d.scopeDecoder.Continue()
	if d.fieldCount <= 4 {
		return // Attributes and subsequent fields are skipped.
	}
	d.attributesDecoder.Continue()
	if d.fieldCount <= 5 {
		return // Point and subsequent fields are skipped.
	}
	d.pointDecoder.Continue()
}

func (d *MetricsDecoder) Reset() {
	d.envelopeDecoder.Reset()
	d.metricDecoder.Reset()
	d.resourceDecoder.Reset()
	d.scopeDecoder.Reset()
	d.attributesDecoder.Reset()
	d.pointDecoder.Reset()
}

func (d *MetricsDecoder) Decode(dstPtr *Metrics) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedMetricsEnvelope != 0 {
		// Field is changed and is present, decode it.
		err = d.envelopeDecoder.Decode(&val.envelope)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricsMetric != 0 {
		// Field is changed and is present, decode it.
		err = d.metricDecoder.Decode(&val.metric)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricsResource != 0 {
		// Field is changed and is present, decode it.
		err = d.resourceDecoder.Decode(&val.resource)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricsScope != 0 {
		// Field is changed and is present, decode it.
		err = d.scopeDecoder.Decode(&val.scope)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricsAttributes != 0 {
		// Field is changed and is present, decode it.
		err = d.attributesDecoder.Decode(&val.attributes)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricsPoint != 0 {
		// Field is changed and is present, decode it.
		err = d.pointDecoder.Decode(&val.point)
		if err != nil {
			return err
		}
	}

	return nil
}
