// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Metrics struct {
	envelope   Envelope
	metric     *Metric
	resource   *Resource
	scope      *Scope
	attributes Attributes
	point      Point

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const MetricsStructName = "Metrics"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedMetricsEnvelope = uint64(1 << iota)
	fieldModifiedMetricsMetric
	fieldModifiedMetricsResource
	fieldModifiedMetricsScope
	fieldModifiedMetricsAttributes
	fieldModifiedMetricsPoint
)

// Init must be called once, before the Metrics is used.
func (s *Metrics) Init() {
	s.init(nil, 0)
}

func NewMetrics() *Metrics {
	var s Metrics
	s.init(nil, 0)
	return &s
}

func (s *Metrics) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.envelope.init(&s.modifiedFields, fieldModifiedMetricsEnvelope)
	s.metric = &Metric{}
	s.metric.init(&s.modifiedFields, fieldModifiedMetricsMetric)
	s.resource = &Resource{}
	s.resource.init(&s.modifiedFields, fieldModifiedMetricsResource)
	s.scope = &Scope{}
	s.scope.init(&s.modifiedFields, fieldModifiedMetricsScope)
	s.attributes.init(&s.modifiedFields, fieldModifiedMetricsAttributes)
	s.point.init(&s.modifiedFields, fieldModifiedMetricsPoint)
}

func (s *Metrics) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.envelope.initAlloc(&s.modifiedFields, fieldModifiedMetricsEnvelope, allocators)
	s.metric = allocators.Metric.Alloc()
	s.metric.initAlloc(&s.modifiedFields, fieldModifiedMetricsMetric, allocators)
	s.resource = allocators.Resource.Alloc()
	s.resource.initAlloc(&s.modifiedFields, fieldModifiedMetricsResource, allocators)
	s.scope = allocators.Scope.Alloc()
	s.scope.initAlloc(&s.modifiedFields, fieldModifiedMetricsScope, allocators)
	s.attributes.initAlloc(&s.modifiedFields, fieldModifiedMetricsAttributes, allocators)
	s.point.initAlloc(&s.modifiedFields, fieldModifiedMetricsPoint, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *Metrics) reset() {

	s.envelope.reset()
	if s.metric != nil {
		s.metric.reset()
	}
	if s.resource != nil {
		s.resource.reset()
	}
	if s.scope != nil {
		s.scope.reset()
	}
	s.attributes.reset()
	s.point.reset()
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *Metrics) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields

	s.envelope.fixParent(&s.modifiedFields)
	s.metric.fixParent(&s.modifiedFields)
	s.resource.fixParent(&s.modifiedFields)
	s.scope.fixParent(&s.modifiedFields)
	s.attributes.fixParent(&s.modifiedFields)
	s.point.fixParent(&s.modifiedFields)
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing without cloning
// which can improve performance.
func (s *Metrics) Freeze() {
	s.modifiedFields.freeze()
}

func (s *Metrics) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *Metrics) Envelope() *Envelope {
	return &s.envelope
}

func (s *Metrics) markEnvelopeModified() {
	s.modifiedFields.markModified(fieldModifiedMetricsEnvelope)
}

// IsEnvelopeModified returns true the value of Envelope field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsEnvelopeModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsEnvelope != 0
}

func (s *Metrics) Metric() *Metric {
	return s.metric
}

// SetMetric sets the value of Metric field.
func (s *Metrics) SetMetric(v *Metric) {
	if !s.metric.IsEqual(v) {
		s.metric = v
		s.markMetricModified()
	}
}

func (s *Metrics) markMetricModified() {
	s.modifiedFields.markModified(fieldModifiedMetricsMetric)
}

// IsMetricModified returns true the value of Metric field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsMetricModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsMetric != 0
}

func (s *Metrics) Resource() *Resource {
	return s.resource
}

// SetResource sets the value of Resource field.
func (s *Metrics) SetResource(v *Resource) {
	if !s.resource.IsEqual(v) {
		s.resource = v
		s.markResourceModified()
	}
}

func (s *Metrics) markResourceModified() {
	s.modifiedFields.markModified(fieldModifiedMetricsResource)
}

// IsResourceModified returns true the value of Resource field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsResourceModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsResource != 0
}

func (s *Metrics) Scope() *Scope {
	return s.scope
}

// SetScope sets the value of Scope field.
func (s *Metrics) SetScope(v *Scope) {
	if !s.scope.IsEqual(v) {
		s.scope = v
		s.markScopeModified()
	}
}

func (s *Metrics) markScopeModified() {
	s.modifiedFields.markModified(fieldModifiedMetricsScope)
}

// IsScopeModified returns true the value of Scope field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsScopeModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsScope != 0
}

func (s *Metrics) Attributes() *Attributes {
	return &s.attributes
}

func (s *Metrics) markAttributesModified() {
	s.modifiedFields.markModified(fieldModifiedMetricsAttributes)
}

// IsAttributesModified returns true the value of Attributes field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsAttributesModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsAttributes != 0
}

func (s *Metrics) Point() *Point {
	return &s.point
}

func (s *Metrics) markPointModified() {
	s.modifiedFields.markModified(fieldModifiedMetricsPoint)
}

// IsPointModified returns true the value of Point field was modified since
// Metrics was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Metrics) IsPointModified() bool {
	return s.modifiedFields.mask&fieldModifiedMetricsPoint != 0
}

func (s *Metrics) markModifiedRecursively() {

	s.envelope.markModifiedRecursively()

	s.metric.markModifiedRecursively()

	s.resource.markModifiedRecursively()

	s.scope.markModifiedRecursively()

	s.attributes.markModifiedRecursively()

	s.point.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedMetricsEnvelope |
			fieldModifiedMetricsMetric |
			fieldModifiedMetricsResource |
			fieldModifiedMetricsScope |
			fieldModifiedMetricsAttributes |
			fieldModifiedMetricsPoint | 0
}

func (s *Metrics) markUnmodifiedRecursively() {

	if s.IsEnvelopeModified() {
		s.envelope.markUnmodifiedRecursively()
	}

	if s.IsMetricModified() {
		s.metric.markUnmodifiedRecursively()
	}

	if s.IsResourceModified() {
		s.resource.markUnmodifiedRecursively()
	}

	if s.IsScopeModified() {
		s.scope.markUnmodifiedRecursively()
	}

	if s.IsAttributesModified() {
		s.attributes.markUnmodifiedRecursively()
	}

	if s.IsPointModified() {
		s.point.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// canBeShared returns true if s is safe to share without cloning (for example if s is frozen).
func (s *Metrics) canBeShared() bool {
	return s.isFrozen()
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *Metrics) CloneShared(allocators *Allocators) Metrics {

	return s.Clone(allocators)
}

func (s *Metrics) Clone(allocators *Allocators) Metrics {

	c := Metrics{

		//modifiedFields: s.modifiedFields,
		envelope:   s.envelope.CloneShared(allocators),
		metric:     s.metric.CloneShared(allocators),
		resource:   s.resource.CloneShared(allocators),
		scope:      s.scope.CloneShared(allocators),
		attributes: s.attributes.CloneShared(allocators),
		point:      s.point.CloneShared(allocators),
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Metrics) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.envelope.byteSize() + s.metric.byteSize() + s.resource.byteSize() + s.scope.byteSize() + s.attributes.byteSize() + s.point.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copyMetrics(dst *Metrics, src *Metrics) {

	copyEnvelope(&dst.envelope, &src.envelope)
	if src.metric != nil {
		if src.metric.canBeShared() {
			dst.metric = src.metric
		} else {
			if dst.metric == nil {
				dst.metric = new(Metric)
				dst.metric.init(&dst.modifiedFields, fieldModifiedMetricsMetric)
			}
			copyMetric(dst.metric, src.metric)
		}
	} else {
		dst.metric = nil
	}
	if src.resource != nil {
		if src.resource.canBeShared() {
			dst.resource = src.resource
		} else {
			if dst.resource == nil {
				dst.resource = new(Resource)
				dst.resource.init(&dst.modifiedFields, fieldModifiedMetricsResource)
			}
			copyResource(dst.resource, src.resource)
		}
	} else {
		dst.resource = nil
	}
	if src.scope != nil {
		if src.scope.canBeShared() {
			dst.scope = src.scope
		} else {
			if dst.scope == nil {
				dst.scope = new(Scope)
				dst.scope.init(&dst.modifiedFields, fieldModifiedMetricsScope)
			}
			copyScope(dst.scope, src.scope)
		}
	} else {
		dst.scope = nil
	}
	copyAttributes(&dst.attributes, &src.attributes)
	copyPoint(&dst.point, &src.point)
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewMetrics(dst *Metrics, src *Metrics, allocators *Allocators) {

	copyToNewEnvelope(&dst.envelope, &src.envelope, allocators)

	if src.metric != nil {
		if src.metric.canBeShared() {
			dst.metric = src.metric
		} else {
			dst.metric = allocators.Metric.Alloc()
			dst.metric.initAlloc(&dst.modifiedFields, fieldModifiedMetricsMetric, allocators)
			copyToNewMetric(dst.metric, src.metric, allocators)
		}
	}

	if src.resource != nil {
		if src.resource.canBeShared() {
			dst.resource = src.resource
		} else {
			dst.resource = allocators.Resource.Alloc()
			dst.resource.initAlloc(&dst.modifiedFields, fieldModifiedMetricsResource, allocators)
			copyToNewResource(dst.resource, src.resource, allocators)
		}
	}

	if src.scope != nil {
		if src.scope.canBeShared() {
			dst.scope = src.scope
		} else {
			dst.scope = allocators.Scope.Alloc()
			dst.scope.initAlloc(&dst.modifiedFields, fieldModifiedMetricsScope, allocators)
			copyToNewScope(dst.scope, src.scope, allocators)
		}
	}
	copyToNewAttributes(&dst.attributes, &src.attributes, allocators)
	copyToNewPoint(&dst.point, &src.point, allocators)
}

// CopyFrom() performs a deep copy from src.
func (s *Metrics) CopyFrom(src *Metrics) {
	copyMetrics(s, src)
}

func (s *Metrics) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *Metrics) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("Metrics")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "Metrics", err))
	}

	const randRange = max(6, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Envelope and all subsequent fields are skipped.
	}
	// Maybe mutate Envelope
	if random.IntN(randRange) == 0 {
		s.envelope.mutateRandom(random, schem)
	}
	if fieldCount <= 1 {
		return // Metric and all subsequent fields are skipped.
	}
	// Maybe mutate Metric
	if random.IntN(randRange) == 0 {
		s.metric.mutateRandom(random, schem)
	}
	if fieldCount <= 2 {
		return // Resource and all subsequent fields are skipped.
	}
	// Maybe mutate Resource
	if random.IntN(randRange) == 0 {
		s.resource.mutateRandom(random, schem)
	}
	if fieldCount <= 3 {
		return // Scope and all subsequent fields are skipped.
	}
	// Maybe mutate Scope
	if random.IntN(randRange) == 0 {
		s.scope.mutateRandom(random, schem)
	}
	if fieldCount <= 4 {
		return // Attributes and all subsequent fields are skipped.
	}
	// Maybe mutate Attributes
	if random.IntN(randRange) == 0 {
		s.attributes.mutateRandom(random, schem)
	}
	if fieldCount <= 5 {
		return // Point and all subsequent fields are skipped.
	}
	// Maybe mutate Point
	if random.IntN(randRange) == 0 {
		s.point.mutateRandom(random, schem)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *Metrics) IsEqual(right *Metrics) bool {
	// Compare Envelope field.
	if !s.envelope.IsEqual(&right.envelope) {
		return false
	}
	// Compare Metric field.
	if !s.metric.IsEqual(right.metric) {
		return false
	}
	// Compare Resource field.
	if !s.resource.IsEqual(right.resource) {
		return false
	}
	// Compare Scope field.
	if !s.scope.IsEqual(right.scope) {
		return false
	}
	// Compare Attributes field.
	if !s.attributes.IsEqual(&right.attributes) {
		return false
	}
	// Compare Point field.
	if !s.point.IsEqual(&right.point) {
		return false
	}

	return true
}

func MetricsEqual(left, right *Metrics) bool {
	return left.IsEqual(right)
}

// CmpMetrics performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpMetrics(left, right *Metrics) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Envelope field.
	if c := CmpEnvelope(&left.envelope, &right.envelope); c != 0 {
		return c
	}

	// Compare Metric field.
	if c := CmpMetric(left.metric, right.metric); c != 0 {
		return c
	}

	// Compare Resource field.
	if c := CmpResource(left.resource, right.resource); c != 0 {
		return c
	}

	// Compare Scope field.
	if c := CmpScope(left.scope, right.scope); c != 0 {
		return c
	}

	// Compare Attributes field.
	if c := CmpAttributes(&left.attributes, &right.attributes); c != 0 {
		return c
	}

	// Compare Point field.
	if c := CmpPoint(&left.point, &right.point); c != 0 {
		return c
	}

	return 0
}

// MetricsEncoder implements encoding of Metrics
type MetricsEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	envelopeEncoder     *EnvelopeEncoder
	isEnvelopeRecursive bool // Indicates Envelope field's type is recursive.

	metricEncoder     *MetricEncoder
	isMetricRecursive bool // Indicates Metric field's type is recursive.

	resourceEncoder     *ResourceEncoder
	isResourceRecursive bool // Indicates Resource field's type is recursive.

	scopeEncoder     *ScopeEncoder
	isScopeRecursive bool // Indicates Scope field's type is recursive.

	attributesEncoder     *AttributesEncoder
	isAttributesRecursive bool // Indicates Attributes field's type is recursive.

	pointEncoder     *PointEncoder
	isPointRecursive bool // Indicates Point field's type is recursive.

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *MetricsEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.MetricsEncoder != nil {
		panic("cannot initialize MetricsEncoder: already initialized")
	}
	state.MetricsEncoder = e
	defer func() { state.MetricsEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.MetricsFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Metrics", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Envelope field.
	if e.fieldCount <= 0 {
		return nil // Envelope and all subsequent fields are skipped.
	}
	if state.EnvelopeEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.envelopeEncoder = state.EnvelopeEncoder
		e.isEnvelopeRecursive = true
	} else {
		e.envelopeEncoder = new(EnvelopeEncoder)
		err = e.envelopeEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Metric field.
	if e.fieldCount <= 1 {
		return nil // Metric and all subsequent fields are skipped.
	}
	if state.MetricEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.metricEncoder = state.MetricEncoder
		e.isMetricRecursive = true
	} else {
		e.metricEncoder = new(MetricEncoder)
		err = e.metricEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Resource field.
	if e.fieldCount <= 2 {
		return nil // Resource and all subsequent fields are skipped.
	}
	if state.ResourceEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.resourceEncoder = state.ResourceEncoder
		e.isResourceRecursive = true
	} else {
		e.resourceEncoder = new(ResourceEncoder)
		err = e.resourceEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Scope field.
	if e.fieldCount <= 3 {
		return nil // Scope and all subsequent fields are skipped.
	}
	if state.ScopeEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.scopeEncoder = state.ScopeEncoder
		e.isScopeRecursive = true
	} else {
		e.scopeEncoder = new(ScopeEncoder)
		err = e.scopeEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Attributes field.
	if e.fieldCount <= 4 {
		return nil // Attributes and all subsequent fields are skipped.
	}
	if state.AttributesEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.attributesEncoder = state.AttributesEncoder
		e.isAttributesRecursive = true
	} else {
		e.attributesEncoder = new(AttributesEncoder)
		err = e.attributesEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Point field.
	if e.fieldCount <= 5 {
		return nil // Point and all subsequent fields are skipped.
	}
	if state.PointEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.pointEncoder = state.PointEncoder
		e.isPointRecursive = true
	} else {
		e.pointEncoder = new(PointEncoder)
		err = e.pointEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *MetricsEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if e.fieldCount <= 0 {
		return // Envelope and all subsequent fields are skipped.
	}

	if !e.isEnvelopeRecursive {
		e.envelopeEncoder.Reset()
	}

	if e.fieldCount <= 1 {
		return // Metric and all subsequent fields are skipped.
	}

	if !e.isMetricRecursive {
		e.metricEncoder.Reset()
	}

	if e.fieldCount <= 2 {
		return // Resource and all subsequent fields are skipped.
	}

	if !e.isResourceRecursive {
		e.resourceEncoder.Reset()
	}

	if e.fieldCount <= 3 {
		return // Scope and all subsequent fields are skipped.
	}

	if !e.isScopeRecursive {
		e.scopeEncoder.Reset()
	}

	if e.fieldCount <= 4 {
		return // Attributes and all subsequent fields are skipped.
	}

	if !e.isAttributesRecursive {
		e.attributesEncoder.Reset()
	}

	if e.fieldCount <= 5 {
		return // Point and all subsequent fields are skipped.
	}

	if !e.isPointRecursive {
		e.pointEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *MetricsEncoder) Encode(val *Metrics) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedMetricsEnvelope |
				fieldModifiedMetricsMetric |
				fieldModifiedMetricsResource |
				fieldModifiedMetricsScope |
				fieldModifiedMetricsAttributes |
				fieldModifiedMetricsPoint | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedMetricsEnvelope != 0 {
		// Encode Envelope
		e.envelopeEncoder.Encode(&val.envelope)
	}

	if fieldMask&fieldModifiedMetricsMetric != 0 {
		// Encode Metric
		e.metricEncoder.Encode(val.metric)
	}

	if fieldMask&fieldModifiedMetricsResource != 0 {
		// Encode Resource
		e.resourceEncoder.Encode(val.resource)
	}

	if fieldMask&fieldModifiedMetricsScope != 0 {
		// Encode Scope
		e.scopeEncoder.Encode(val.scope)
	}

	if fieldMask&fieldModifiedMetricsAttributes != 0 {
		// Encode Attributes
		e.attributesEncoder.Encode(&val.attributes)
	}

	if fieldMask&fieldModifiedMetricsPoint != 0 {
		// Encode Point
		e.pointEncoder.Encode(&val.point)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *MetricsEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Envelope field.
	if e.fieldCount <= 0 {
		return // Envelope and subsequent fields are skipped.
	}
	if !e.isEnvelopeRecursive {
		e.envelopeEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Metric field.
	if e.fieldCount <= 1 {
		return // Metric and subsequent fields are skipped.
	}
	if !e.isMetricRecursive {
		e.metricEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Resource field.
	if e.fieldCount <= 2 {
		return // Resource and subsequent fields are skipped.
	}
	if !e.isResourceRecursive {
		e.resourceEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Scope field.
	if e.fieldCount <= 3 {
		return // Scope and subsequent fields are skipped.
	}
	if !e.isScopeRecursive {
		e.scopeEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Attributes field.
	if e.fieldCount <= 4 {
		return // Attributes and subsequent fields are skipped.
	}
	if !e.isAttributesRecursive {
		e.attributesEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Point field.
	if e.fieldCount <= 5 {
		return // Point and subsequent fields are skipped.
	}
	if !e.isPointRecursive {
		e.pointEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// MetricsDecoder implements decoding of Metrics
type MetricsDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	fieldCount uint

	envelopeDecoder     *EnvelopeDecoder
	isEnvelopeRecursive bool

	metricDecoder     *MetricDecoder
	isMetricRecursive bool

	resourceDecoder     *ResourceDecoder
	isResourceRecursive bool

	scopeDecoder     *ScopeDecoder
	isScopeRecursive bool

	attributesDecoder     *AttributesDecoder
	isAttributesRecursive bool

	pointDecoder     *PointDecoder
	isPointRecursive bool

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *MetricsDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.MetricsDecoder != nil {
		panic("cannot initialize MetricsDecoder: already initialized")
	}
	state.MetricsDecoder = d
	defer func() { state.MetricsDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.MetricsFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Metrics", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Envelope and subsequent fields are skipped.
	}
	if state.EnvelopeDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.envelopeDecoder = state.EnvelopeDecoder
		d.isEnvelopeRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.envelopeDecoder = new(EnvelopeDecoder)
		err = d.envelopeDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Metric and subsequent fields are skipped.
	}
	if state.MetricDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.metricDecoder = state.MetricDecoder
		d.isMetricRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.metricDecoder = new(MetricDecoder)
		err = d.metricDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Resource and subsequent fields are skipped.
	}
	if state.ResourceDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.resourceDecoder = state.ResourceDecoder
		d.isResourceRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.resourceDecoder = new(ResourceDecoder)
		err = d.resourceDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Scope and subsequent fields are skipped.
	}
	if state.ScopeDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.scopeDecoder = state.ScopeDecoder
		d.isScopeRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.scopeDecoder = new(ScopeDecoder)
		err = d.scopeDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // Attributes and subsequent fields are skipped.
	}
	if state.AttributesDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.attributesDecoder = state.AttributesDecoder
		d.isAttributesRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.attributesDecoder = new(AttributesDecoder)
		err = d.attributesDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 5 {
		return nil // Point and subsequent fields are skipped.
	}
	if state.PointDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.pointDecoder = state.PointDecoder
		d.isPointRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.pointDecoder = new(PointDecoder)
		err = d.pointDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *MetricsDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Envelope and subsequent fields are skipped.
	}

	if !d.isEnvelopeRecursive {
		d.envelopeDecoder.Continue()
	}

	if d.fieldCount <= 1 {
		return // Metric and subsequent fields are skipped.
	}

	if !d.isMetricRecursive {
		d.metricDecoder.Continue()
	}

	if d.fieldCount <= 2 {
		return // Resource and subsequent fields are skipped.
	}

	if !d.isResourceRecursive {
		d.resourceDecoder.Continue()
	}

	if d.fieldCount <= 3 {
		return // Scope and subsequent fields are skipped.
	}

	if !d.isScopeRecursive {
		d.scopeDecoder.Continue()
	}

	if d.fieldCount <= 4 {
		return // Attributes and subsequent fields are skipped.
	}

	if !d.isAttributesRecursive {
		d.attributesDecoder.Continue()
	}

	if d.fieldCount <= 5 {
		return // Point and subsequent fields are skipped.
	}

	if !d.isPointRecursive {
		d.pointDecoder.Continue()
	}

}

func (d *MetricsDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Envelope and all subsequent fields are skipped.
	}

	if !d.isEnvelopeRecursive {
		d.envelopeDecoder.Reset()
	}

	if d.fieldCount <= 1 {
		return // Metric and all subsequent fields are skipped.
	}

	if !d.isMetricRecursive {
		d.metricDecoder.Reset()
	}

	if d.fieldCount <= 2 {
		return // Resource and all subsequent fields are skipped.
	}

	if !d.isResourceRecursive {
		d.resourceDecoder.Reset()
	}

	if d.fieldCount <= 3 {
		return // Scope and all subsequent fields are skipped.
	}

	if !d.isScopeRecursive {
		d.scopeDecoder.Reset()
	}

	if d.fieldCount <= 4 {
		return // Attributes and all subsequent fields are skipped.
	}

	if !d.isAttributesRecursive {
		d.attributesDecoder.Reset()
	}

	if d.fieldCount <= 5 {
		return // Point and all subsequent fields are skipped.
	}

	if !d.isPointRecursive {
		d.pointDecoder.Reset()
	}

}

func (d *MetricsDecoder) Decode(dstPtr *Metrics) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedMetricsEnvelope != 0 {
		// Field is changed and is present, decode it.
		err = d.envelopeDecoder.Decode(&val.envelope)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricsMetric != 0 {
		// Field is changed and is present, decode it.
		if val.metric == nil {
			val.metric = d.allocators.Metric.Alloc()
			val.metric.initAlloc(&val.modifiedFields, fieldModifiedMetricsMetric, d.allocators)
		}

		err = d.metricDecoder.Decode(&val.metric)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricsResource != 0 {
		// Field is changed and is present, decode it.
		if val.resource == nil {
			val.resource = d.allocators.Resource.Alloc()
			val.resource.initAlloc(&val.modifiedFields, fieldModifiedMetricsResource, d.allocators)
		}

		err = d.resourceDecoder.Decode(&val.resource)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricsScope != 0 {
		// Field is changed and is present, decode it.
		if val.scope == nil {
			val.scope = d.allocators.Scope.Alloc()
			val.scope.initAlloc(&val.modifiedFields, fieldModifiedMetricsScope, d.allocators)
		}

		err = d.scopeDecoder.Decode(&val.scope)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricsAttributes != 0 {
		// Field is changed and is present, decode it.
		err = d.attributesDecoder.Decode(&val.attributes)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedMetricsPoint != 0 {
		// Field is changed and is present, decode it.
		err = d.pointDecoder.Decode(&val.point)
		if err != nil {
			return err
		}
	}

	return nil
}

// MetricsAllocator implements a custom allocator for Metrics.
// It maintains a pool of pre-allocated Metrics and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type MetricsAllocator struct {
	pool []Metrics
	ofs  int
}

// Alloc returns the next available Metrics from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *MetricsAllocator) Alloc() *Metrics {
	if a.ofs < len(a.pool) {
		// Get the next available Metrics from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *MetricsAllocator) prealloc() *Metrics {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]Metrics, newLen)
	a.ofs = 1
	return &a.pool[0]
}

var wireSchemaMetrics = []byte{0x0F, 0x06, 0x01, 0x08, 0x07, 0x03, 0x05, 0x04, 0x05, 0x05, 0x09, 0x02, 0x03, 0x02, 0x05, 0x02}

func MetricsWireSchema() (schema.WireSchema, error) {
	var w schema.WireSchema
	if err := w.Deserialize(bytes.NewReader(wireSchemaMetrics)); err != nil {
		return w, err
	}
	return w, nil
}
