// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

// KeyValueList is a multimap, (aka an associative array or a list) of key value
// pairs from string to AnyValue.
type KeyValueList struct {
	elems       []KeyValueListElem
	initedCount int

	modifiedElems modifiedFieldsMultimap
}

type KeyValueListElem struct {
	key   string
	value AnyValue
}

func (e *KeyValueListElem) Key() string {
	return e.key
}

func (e *KeyValueListElem) Value() *AnyValue {
	return &e.value
}

func (m *KeyValueList) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	m.modifiedElems.init(parentModifiedFields, parentModifiedBit)
}

func (m *KeyValueList) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	m.init(parentModifiedFields, parentModifiedBit)
}

// reset the multimap to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (m *KeyValueList) reset() {
	m.elems = m.elems[:0]
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (m *KeyValueList) fixParent(parentModifiedFields *modifiedFields) {
	m.modifiedElems.fixParent(parentModifiedFields)
	// Fix parents in all previously inited elements to point back to this object.
	elems := m.elems[:m.initedCount]
	for i := 0; i < len(elems); i++ {
		elems[i].value.fixParent(&m.modifiedElems.vals)
	}
}

// Len returns the number of elements in the multimap.
func (m *KeyValueList) Len() int {
	return len(m.elems)
}

// At returns element at index i.
func (m *KeyValueList) At(i int) *KeyValueListElem {
	return &m.elems[i]
}

// EnsureLen ensures the length of the multimap is equal to newLen.
// It will grow or shrink the multimap if needed.
func (m *KeyValueList) EnsureLen(newLen int) {
	oldLen := len(m.elems)
	if newLen != oldLen {
		m.modifiedElems.changeLen(oldLen, newLen)

		// Check if the underlying array is reallocated.
		beforePtr := unsafe.SliceData(m.elems)
		m.elems = pkg.EnsureLen(m.elems, newLen)
		if beforePtr != unsafe.SliceData(m.elems) {
			// Underlying array was reallocated, we need to fix parent pointers
			// in all elements.
			for i := 0; i < newLen; i++ {
				m.elems[i].value.fixParent(&m.modifiedElems.vals)
			}
		}

		// Init elements with pointers to the parent struct.
		for i := m.initedCount; i < newLen; i++ {
			m.elems[i].value.init(&m.modifiedElems.vals, m.modifiedElems.maskForIndex(i))
		}
		if m.initedCount < newLen {
			m.initedCount = newLen
		}
		for i := min(oldLen, newLen); i < newLen; i++ {
			// Reset newly added values keys to initial state.
			m.elems[i].value.reset()
		}
	}
}

func (m *KeyValueList) setModifiedRecursively() {
	for i := 0; i < len(m.elems); i++ {
		m.elems[i].value.setModifiedRecursively()
	}
}

func (m *KeyValueList) setUnmodifiedRecursively() {
	for i := 0; i < len(m.elems); i++ {
		m.elems[i].value.setUnmodifiedRecursively()
	}
	m.modifiedElems.setUnmodifiedAll()
}

// computeDiff compares m to val and returns true if they differ.
// All fields that are different in m will be marked as modified.
func (m *KeyValueList) computeDiff(val *KeyValueList) (ret bool) {
	if len(m.elems) != len(val.elems) {
		m.modifiedElems.modifiedLen = true
		ret = true
	}
	minLen := min(len(m.elems), len(val.elems))
	i := 0
	for ; i < minLen; i++ {
		if m.elems[i].key != val.elems[i].key {
			ret = true
			m.modifiedElems.setKeyModified(i)
		}
		if m.elems[i].value.computeDiff(&val.elems[i].value) {
			ret = true
			m.modifiedElems.setValModified(i)
		}
	}
	for ; i < len(m.elems); i++ {
		m.modifiedElems.setKeyModified(i)
		m.modifiedElems.setValModified(i)
		m.elems[i].value.setModifiedRecursively()
	}
	return ret
}

// SetKey sets the key of the element at index i.
func (m *KeyValueList) SetKey(i int, k string) {
	if m.elems[i].key != k {
		m.elems[i].key = k
		m.modifiedElems.markKeyModified(i)
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (m *KeyValueList) byteSize() uint {
	return uint(unsafe.Sizeof(KeyValueListElem{}))*uint(len(m.elems)) + uint(unsafe.Sizeof(m.elems))
}

// Copy from src to dst, overwriting existing data in dst.
func copyKeyValueList(dst *KeyValueList, src *KeyValueList) {
	if len(dst.elems) != len(src.elems) {
		dst.EnsureLen(len(src.elems))
	}

	for i := 0; i < len(src.elems); i++ {
		if dst.elems[i].key != src.elems[i].key {
			dst.elems[i].key = src.elems[i].key
			dst.modifiedElems.markKeyModified(i)
		}

		if !AnyValueEqual(&dst.elems[i].value, &src.elems[i].value) {
			copyAnyValue(&dst.elems[i].value, &src.elems[i].value)
		}
	}
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewKeyValueList(dst *KeyValueList, src *KeyValueList, allocators *Allocators) {
	if len(src.elems) == 0 {
		return
	}

	dst.EnsureLen(len(src.elems))
	for i := 0; i < len(src.elems); i++ {
		dst.elems[i].key = src.elems[i].key

		copyToNewAnyValue(&dst.elems[i].value, &src.elems[i].value, allocators)
	}

}

func (m *KeyValueList) CopyFrom(src *KeyValueList) {
	copyKeyValueList(m, src)
}

func (e *KeyValueList) IsEqual(val *KeyValueList) bool {
	if len(e.elems) != len(val.elems) {
		return false
	}
	for i := range e.elems {
		if !pkg.StringEqual(e.elems[i].key, val.elems[i].key) {
			return false
		}
		if !e.elems[i].value.IsEqual(&val.elems[i].value) {
			return false
		}
	}
	return true
}

func KeyValueListEqual(left, right *KeyValueList) bool {
	return left.IsEqual(right)
}

func CmpKeyValueList(left, right *KeyValueList) int {
	l := min(len(left.elems), len(right.elems))
	for i := 0; i < l; i++ {
		c := strings.Compare(left.elems[i].key, right.elems[i].key)
		if c != 0 {
			return c
		}
	}
	lenDiff := len(left.elems) - len(right.elems)

	if lenDiff != 0 {
		return lenDiff
	}

	for i := 0; i < l; i++ {
		c := CmpAnyValue(
			&left.elems[i].value,
			&right.elems[i].value,
		)
		if c != 0 {
			return c
		}
	}
	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. If key or value contains structs/oneofs
// only fields that exist in the schema are mutated, allowing to generate data for
// specified schema.
func (m *KeyValueList) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	if random.IntN(20) == 0 {
		m.EnsureLen(m.Len() + 1)
	}
	if random.IntN(20) == 0 && m.Len() > 0 {
		m.EnsureLen(m.Len() - 1)
	}

	for i := range m.elems {
		_ = i
		if random.IntN(4*len(m.elems)) == 0 {
			m.SetKey(i, pkg.StringRandom(random))
		}
		if random.IntN(4*len(m.elems)) == 0 {
			m.elems[i].value.mutateRandom(random, schem)
		}
	}
}

// areKeysModified returns true if any key in the multimap was modified
// since the modified flags were last cleared.
func (m *KeyValueList) areKeysModified() bool {
	return m.modifiedElems.areKeysModified()
}

type KeyValueListEncoder struct {
	buf     pkg.BytesWriter
	columns pkg.WriteColumnSet
	limiter *pkg.SizeLimiter

	keyEncoder       *encoders.StringEncoder
	isKeyRecursive   bool
	valueEncoder     *AnyValueEncoder
	isValueRecursive bool
}

func (e *KeyValueListEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.KeyValueListEncoder != nil {
		panic("cannot initialize KeyValueListEncoder: already initialized")
	}
	state.KeyValueListEncoder = e
	defer func() { state.KeyValueListEncoder = nil }()

	e.limiter = &state.limiter

	var err error
	e.keyEncoder = new(encoders.StringEncoder)
	err = e.keyEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return nil
	}
	if state.AnyValueEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.valueEncoder = state.AnyValueEncoder
		e.isValueRecursive = true
	} else {
		e.valueEncoder = new(AnyValueEncoder)
		err = e.valueEncoder.Init(state, columns.AddSubColumn())
	}

	return err
}

func (e *KeyValueListEncoder) Reset() {
	if !e.isKeyRecursive {
		e.keyEncoder.Reset()
	}
	if !e.isValueRecursive {
		e.valueEncoder.Reset()
	}
}

func (e *KeyValueListEncoder) Encode(list *KeyValueList) {
	oldLen := len(e.buf.Bytes())

	if len(list.elems) == 0 {
		// Zero-length attr list.
		e.buf.WriteUvarint(0b1)

		newLen := len(e.buf.Bytes())
		e.limiter.AddFrameBytes(uint(newLen - oldLen))

		return
	}

	if !list.areKeysModified() && len(list.elems) < 63 {
		e.encodeValuesOnly(list)
	} else {
		e.encodeFull(list)
	}

	newLen := len(e.buf.Bytes())
	e.limiter.AddFrameBytes(uint(newLen - oldLen))

	// Mark all elems non-modified so that next Encode() correctly
	// encodes only elems that change after this.
	list.modifiedElems.setUnmodifiedAll()
}

func (e *KeyValueListEncoder) encodeValuesOnly(list *KeyValueList) {
	// The bits that describe the change value are exactly the bits
	// that are set in modifiedElems.
	changedValuesBits := list.modifiedElems.vals.mask

	// Record changedValuesBits (LSB is 0 to indicate values-only encoding).
	e.buf.WriteUvarint(changedValuesBits << 1)

	// Encode changed values only.
	bitToEncode := uint64(1)
	for i := range list.elems {
		if (bitToEncode & changedValuesBits) != 0 {
			e.valueEncoder.Encode(&list.elems[i].value)
		}
		bitToEncode <<= 1
	}
}

func (e *KeyValueListEncoder) encodeFull(list *KeyValueList) {
	// Record multimap len (LSB is 1 to indicate full encoding).
	e.buf.WriteUvarint(uint64(len(list.elems))<<1 | 0b1)

	// Encode keys and values.
	for i := range list.elems {
		e.keyEncoder.Encode(list.elems[i].key)
		e.valueEncoder.Encode(&list.elems[i].value)
	}
}

func (e *KeyValueListEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBytes(&e.buf)
	if !e.isKeyRecursive {
		e.keyEncoder.CollectColumns(columnSet.At(0))
	}
	if !e.isValueRecursive {
		e.valueEncoder.CollectColumns(columnSet.At(1))
	}
}

type KeyValueListDecoder struct {
	buf    pkg.BytesReader
	column *pkg.ReadableColumn

	keyDecoder       *encoders.StringDecoder
	isKeyRecursive   bool
	valueDecoder     *AnyValueDecoder
	isValueRecursive bool
}

// Init is called once in the lifetime of the stream.
func (d *KeyValueListDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.KeyValueListDecoder != nil {
		panic("cannot initialize KeyValueListDecoder: already initialized")
	}
	state.KeyValueListDecoder = d
	defer func() { state.KeyValueListDecoder = nil }()

	d.column = columns.Column()

	var err error
	d.keyDecoder = new(encoders.StringDecoder)
	err = d.keyDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return nil
	}
	if state.AnyValueDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.valueDecoder = state.AnyValueDecoder
		d.isValueRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.valueDecoder = new(AnyValueDecoder)
		err = d.valueDecoder.Init(state, columns.AddSubColumn())
	}

	return err
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *KeyValueListDecoder) Continue() {
	d.buf.Reset(d.column.Data())
	if !d.isKeyRecursive {
		d.keyDecoder.Continue()
	}
	if !d.isValueRecursive {
		d.valueDecoder.Continue()
	}
}

func (d *KeyValueListDecoder) Reset() {
	if !d.isKeyRecursive {
		d.keyDecoder.Reset()
	}
	if !d.isValueRecursive {
		d.valueDecoder.Reset()
	}
}

func (d *KeyValueListDecoder) Decode(dst *KeyValueList) error {
	countOrChangedValues, err := d.buf.ReadUvarint()
	if err != nil {
		return err
	}
	if countOrChangedValues == 0 {
		// Nothing changed.
		return nil
	}

	if countOrChangedValues&0b1 == 0 {
		return d.decodeValuesOnly(countOrChangedValues>>1, dst)
	}

	if countOrChangedValues&0b1 == 0b1 {
		return d.decodeFull(int(countOrChangedValues>>1), dst)
	}
	return pkg.ErrMultimap
}

func (d *KeyValueListDecoder) decodeValuesOnly(changedValuesBits uint64, dst *KeyValueList) error {
	// Decode changed values
	var err error
	bitToRead := uint64(1)
	for i := range dst.elems {
		if (bitToRead & changedValuesBits) != 0 {
			// Value is changed, decode it.
			err = d.valueDecoder.Decode(&dst.elems[i].value)
			if err != nil {
				return err
			}
		}
		bitToRead <<= 1
	}

	return nil
}

func (d *KeyValueListDecoder) decodeFull(count int, dst *KeyValueList) error {
	if count < 0 || count >= pkg.MultimapElemCountLimit {
		return pkg.ErrMultimapCountLimit
	}

	dst.EnsureLen(count)

	var err error
	for i := 0; i < count; i++ {
		err = d.keyDecoder.Decode(&dst.elems[i].key)
		if err != nil {
			return err
		}
		err = d.valueDecoder.Decode(&dst.elems[i].value)
		if err != nil {
			return err
		}
	}

	return nil
}
