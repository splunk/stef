// Code generated by stefc. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"math/bits"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

// ExemplarValue is a oneof struct.
type ExemplarValue struct {
	// The current type of the oneof.
	typ ExemplarValueType

	int64   int64
	float64 float64

	// Pointer to parent's modifiedFields
	parentModifiedFields *modifiedFields
	// Bit to set in parent's modifiedFields when this oneof is modified.
	parentModifiedBit uint64
}

// Init must be called once, before the ExemplarValue is used.
func (s *ExemplarValue) Init() {
	s.init(nil, 0)
}

func (s *ExemplarValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

}

func (s *ExemplarValue) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *ExemplarValue) reset() {
	s.typ = ExemplarValueTypeNone
	// We don't need to reset the state of the field since that will be done
	// when the type is changed, see SetType().
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *ExemplarValue) fixParent(parentModifiedFields *modifiedFields) {
	s.parentModifiedFields = parentModifiedFields

}

type ExemplarValueType byte

const (
	ExemplarValueTypeNone = ExemplarValueType(iota)
	ExemplarValueTypeInt64
	ExemplarValueTypeFloat64
	ExemplarValueTypeCount
)

// Type returns the type of the value currently contained in ExemplarValue.
func (s *ExemplarValue) Type() ExemplarValueType {
	return s.typ
}

// resetContained resets the currently contained value, if any.
// Normally used after switching to a different type to make sure
// the value contained is in blank state.
func (s *ExemplarValue) resetContained() {
	switch s.typ {
	}
}

// SetType sets the type of the value currently contained in ExemplarValue.
func (s *ExemplarValue) SetType(typ ExemplarValueType) {
	if s.typ != typ {
		s.typ = typ
		s.resetContained()
		switch typ {
		}
		s.markParentModified()
	}
}

// Int64 returns the value if the contained type is currently ExemplarValueTypeInt64.
// The caller must check the type via Type() before attempting to call this function.
func (s *ExemplarValue) Int64() int64 {
	return s.int64
}

// SetInt64 sets the value to the specified value and sets the type to ExemplarValueTypeInt64.
func (s *ExemplarValue) SetInt64(v int64) {
	if s.typ != ExemplarValueTypeInt64 || s.int64 != v {
		s.int64 = v
		s.typ = ExemplarValueTypeInt64
		s.parentModifiedFields.markModified(s.parentModifiedBit)
	}
}

// Float64 returns the value if the contained type is currently ExemplarValueTypeFloat64.
// The caller must check the type via Type() before attempting to call this function.
func (s *ExemplarValue) Float64() float64 {
	return s.float64
}

// SetFloat64 sets the value to the specified value and sets the type to ExemplarValueTypeFloat64.
func (s *ExemplarValue) SetFloat64(v float64) {
	if s.typ != ExemplarValueTypeFloat64 || s.float64 != v {
		s.float64 = v
		s.typ = ExemplarValueTypeFloat64
		s.parentModifiedFields.markModified(s.parentModifiedBit)
	}
}

func (s *ExemplarValue) canBeShared() bool {
	// Oneof can never be shared.
	return false
}

func (s *ExemplarValue) CloneShared(allocators *Allocators) ExemplarValue {
	// Oneof is not shareable, so CloneShared is just a Clone.
	return s.Clone(allocators)
}

func (s *ExemplarValue) Clone(allocators *Allocators) ExemplarValue {
	c := ExemplarValue{}
	c.typ = s.typ
	switch s.typ {
	case ExemplarValueTypeInt64:
		c.int64 = s.int64
	case ExemplarValueTypeFloat64:
		c.float64 = s.float64
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *ExemplarValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		0
}

// Copy from src to dst, overwriting existing data in dst.
func copyExemplarValue(dst *ExemplarValue, src *ExemplarValue) {
	switch src.typ {
	case ExemplarValueTypeInt64:
		dst.SetInt64(src.int64)
	case ExemplarValueTypeFloat64:
		dst.SetFloat64(src.float64)
	case ExemplarValueTypeNone:
		if dst.typ != ExemplarValueTypeNone {
			dst.typ = ExemplarValueTypeNone
			dst.markParentModified()
		}
	default:
		panic("copyExemplarValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewExemplarValue(dst *ExemplarValue, src *ExemplarValue, allocators *Allocators) {
	dst.typ = src.typ
	switch src.typ {
	case ExemplarValueTypeInt64:
		if dst.int64 != src.int64 {
			dst.int64 = src.int64
			dst.parentModifiedFields.markModified(dst.parentModifiedBit)
		}
	case ExemplarValueTypeFloat64:
		if dst.float64 != src.float64 {
			dst.float64 = src.float64
			dst.parentModifiedFields.markModified(dst.parentModifiedBit)
		}
	case ExemplarValueTypeNone:
	default:
		panic("copyExemplarValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// CopyFrom() performs a deep copy from src.
func (s *ExemplarValue) CopyFrom(src *ExemplarValue) {
	copyExemplarValue(s, src)
}

func (s *ExemplarValue) markParentModified() {
	s.parentModifiedFields.markModified(s.parentModifiedBit)
}

func (s *ExemplarValue) setModifiedRecursively() {
	switch s.typ {
	}
}

func (s *ExemplarValue) setUnmodifiedRecursively() {
	switch s.typ {
	}
}

// computeDiff compares s and val and returns true if they differ.
// All fields that are different in s will be marked as modified.
func (s *ExemplarValue) computeDiff(val *ExemplarValue) (ret bool) {
	if s.typ == val.typ {
		switch s.typ {
		case ExemplarValueTypeInt64:
			ret = s.int64 != val.int64
		case ExemplarValueTypeFloat64:
			ret = s.float64 != val.float64
		}
	} else {
		ret = true
		switch s.typ {
		}
	}
	return ret
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *ExemplarValue) IsEqual(val *ExemplarValue) bool {
	if e.typ != val.typ {
		return false
	}
	switch e.typ {
	case ExemplarValueTypeInt64:
		return pkg.Int64Equal(e.int64, val.int64)
	case ExemplarValueTypeFloat64:
		return pkg.Float64Equal(e.float64, val.float64)
	}

	return true
}

func ExemplarValueEqual(left, right *ExemplarValue) bool {
	return left.IsEqual(right)
}

// CmpExemplarValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpExemplarValue(left, right *ExemplarValue) int {
	c := pkg.Uint64Compare(uint64(left.typ), uint64(right.typ))
	if c != 0 {
		return c
	}
	switch left.typ {
	case ExemplarValueTypeInt64:
		return pkg.Int64Compare(left.int64, right.int64)
	case ExemplarValueTypeFloat64:
		return pkg.Float64Compare(left.float64, right.float64)
	}

	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schema are mutated, allowing to generate data for specified schema.
func (s *ExemplarValue) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this oneof from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// the type of the oneof to the choices that are not in the schema.
	fieldCount, err := schem.FieldCount("ExemplarValue")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "ExemplarValue", err))
	}

	typeChanged := false
	if random.IntN(10) == 0 {
		s.SetType(ExemplarValueType(random.IntN(fieldCount + 1)))
		typeChanged = true
	}

	switch s.typ {
	case ExemplarValueTypeInt64:
		if typeChanged || random.IntN(2) == 0 {
			s.SetInt64(pkg.Int64Random(random))
		}
	case ExemplarValueTypeFloat64:
		if typeChanged || random.IntN(2) == 0 {
			s.SetFloat64(pkg.Float64Random(random))
		}
	}
}

// ExemplarValueEncoder implements encoding of ExemplarValue
type ExemplarValueEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// fieldCount is the number of fields, i.e. the number of types in this oneof.
	fieldCount uint
	// Number of bits needed to encode the type (including None type).
	typeBitCount uint

	// Field encoders.
	int64Encoder encoders.Int64Encoder

	float64Encoder encoders.Float64Encoder
}

func (e *ExemplarValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.ExemplarValueEncoder != nil {
		panic("cannot initialize ExemplarValueEncoder: already initialized")
	}
	state.ExemplarValueEncoder = e
	defer func() { state.ExemplarValueEncoder = nil }()

	e.limiter = &state.limiter

	var err error
	e.fieldCount, err = state.StructFieldCounts.ExemplarValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "ExemplarValue", err)
	}
	e.typeBitCount = uint(bits.Len64(uint64(e.fieldCount) + 1))

	// Init encoder for Int64 field.
	if e.fieldCount <= 0 {
		// Int64 and all subsequent fields are skipped.
		return nil
	}
	err = e.int64Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Float64 field.
	if e.fieldCount <= 1 {
		// Float64 and all subsequent fields are skipped.
		return nil
	}
	err = e.float64Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *ExemplarValueEncoder) Reset() {

	if e.fieldCount <= 0 {
		return // Int64 and all subsequent fields are skipped.
	}
	e.int64Encoder.Reset()
	if e.fieldCount <= 1 {
		return // Float64 and all subsequent fields are skipped.
	}
	e.float64Encoder.Reset()
}

// Encode encodes val into buf
func (e *ExemplarValueEncoder) Encode(val *ExemplarValue) {
	typ := val.typ
	if uint(typ) > e.fieldCount {
		// The current field type is not supported in target schema. Encode the type as None.
		typ = ExemplarValueTypeNone
	}

	e.buf.WriteBits(uint64(typ), e.typeBitCount)

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(e.typeBitCount)

	// Encode currently selected field.
	switch typ {
	case ExemplarValueTypeInt64:
		// Encode Int64
		e.int64Encoder.Encode(val.int64)
	case ExemplarValueTypeFloat64:
		// Encode Float64
		e.float64Encoder.Encode(val.float64)
	}
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *ExemplarValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Int64 field.
	if e.fieldCount <= 0 {
		return // Int64 and subsequent fields are skipped.
	}

	e.int64Encoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Float64 field.
	if e.fieldCount <= 1 {
		return // Float64 and subsequent fields are skipped.
	}

	e.float64Encoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// ExemplarValueDecoder implements decoding of ExemplarValue
type ExemplarValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *ExemplarValue
	lastVal    ExemplarValue

	// fieldCount is the number of fields, i.e. the number of types in this oneof.
	fieldCount uint
	// Number of bits needed to encode the type (including None type).
	typeBitCount uint

	// Field decoders.

	int64Decoder encoders.Int64Decoder

	float64Decoder encoders.Float64Decoder

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *ExemplarValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.ExemplarValueDecoder != nil {
		panic("cannot initialize ExemplarValueDecoder: already initialized")
	}
	state.ExemplarValueDecoder = d
	defer func() { state.ExemplarValueDecoder = nil }()

	d.allocators = &state.Allocators

	var err error
	d.fieldCount, err = state.StructFieldCounts.ExemplarValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "ExemplarValue", err)
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	d.typeBitCount = uint(bits.Len64(uint64(d.fieldCount) + 1))
	if d.fieldCount <= 0 {
		return nil // Int64 and subsequent fields are skipped.
	}
	err = d.int64Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Float64 and subsequent fields are skipped.
	}
	err = d.float64Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *ExemplarValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Int64 and subsequent fields are skipped.
	}
	d.int64Decoder.Continue()

	if d.fieldCount <= 1 {
		return // Float64 and subsequent fields are skipped.
	}
	d.float64Decoder.Continue()

}

func (d *ExemplarValueDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Int64 and all subsequent fields are skipped.
	}
	d.int64Decoder.Reset()
	if d.fieldCount <= 1 {
		return // Float64 and all subsequent fields are skipped.
	}
	d.float64Decoder.Reset()
}

func (d *ExemplarValueDecoder) Decode(dstPtr *ExemplarValue) error {
	// Read the type and validate it
	typ := uint(d.buf.ReadBits(d.typeBitCount))
	if typ >= uint(d.fieldCount+1) {
		return pkg.ErrInvalidOneOfType
	}

	dst := dstPtr
	if dst.typ != ExemplarValueType(typ) {
		dst.typ = ExemplarValueType(typ)
		// The type changed, we need to reset the contained value so that
		// it does not contain carry-over data from a previous record that
		// was of this same type.
		dst.resetContained()
	}

	// Decode selected field
	switch dst.typ {
	case ExemplarValueTypeInt64:
		// Decode Int64
		return d.int64Decoder.Decode(&dst.int64)
	case ExemplarValueTypeFloat64:
		// Decode Float64
		return d.float64Decoder.Decode(&dst.float64)
	}
	return nil
}

// ExemplarValueAllocator implements a custom allocator for ExemplarValue.
// It maintains a pool of pre-allocated ExemplarValue and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type ExemplarValueAllocator struct {
	pool []ExemplarValue
	ofs  int
}

// Alloc returns the next available ExemplarValue from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *ExemplarValueAllocator) Alloc() *ExemplarValue {
	if a.ofs < len(a.pool) {
		// Get the next available ExemplarValue from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *ExemplarValueAllocator) prealloc() *ExemplarValue {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]ExemplarValue, newLen)
	a.ofs = 1
	return &a.pool[0]
}
