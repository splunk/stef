// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
)

var _ = (*encoders.StringEncoder)(nil)

type WriterState struct {
	limiter pkg.SizeLimiter

	StructFieldCounts StructFieldCounts

	// Dictionaries
	AnyValueString    encoders.StringEncoderDict
	AttributeKey      encoders.StringEncoderDict
	Metric            MetricEncoderDict
	MetricDescription encoders.StringEncoderDict
	MetricName        encoders.StringEncoderDict
	MetricUnit        encoders.StringEncoderDict
	Resource          ResourceEncoderDict
	SchemaURL         encoders.StringEncoderDict
	Scope             ScopeEncoderDict
	ScopeName         encoders.StringEncoderDict
	ScopeVersion      encoders.StringEncoderDict
	SpanEventName     encoders.StringEncoderDict
	SpanName          encoders.StringEncoderDict

	// Encoders that are being Init-ed, to detect recursion.
	AnyValueEncoder            *AnyValueEncoder
	AnyValueArrayEncoder       *AnyValueArrayEncoder
	AttributesEncoder          *AttributesEncoder
	EnvelopeEncoder            *EnvelopeEncoder
	EnvelopeAttributesEncoder  *EnvelopeAttributesEncoder
	EventEncoder               *EventEncoder
	EventArrayEncoder          *EventArrayEncoder
	ExemplarEncoder            *ExemplarEncoder
	ExemplarArrayEncoder       *ExemplarArrayEncoder
	ExemplarValueEncoder       *ExemplarValueEncoder
	ExpHistogramBucketsEncoder *ExpHistogramBucketsEncoder
	ExpHistogramValueEncoder   *ExpHistogramValueEncoder
	Float64ArrayEncoder        *Float64ArrayEncoder
	HistogramValueEncoder      *HistogramValueEncoder
	Int64ArrayEncoder          *Int64ArrayEncoder
	KeyValueListEncoder        *KeyValueListEncoder
	LinkEncoder                *LinkEncoder
	LinkArrayEncoder           *LinkArrayEncoder
	MetricEncoder              *MetricEncoder
	MetricsEncoder             *MetricsEncoder
	PointEncoder               *PointEncoder
	PointValueEncoder          *PointValueEncoder
	QuantileValueEncoder       *QuantileValueEncoder
	QuantileValueArrayEncoder  *QuantileValueArrayEncoder
	ResourceEncoder            *ResourceEncoder
	ScopeEncoder               *ScopeEncoder
	SpanEncoder                *SpanEncoder
	SpanStatusEncoder          *SpanStatusEncoder
	SpansEncoder               *SpansEncoder
	SummaryValueEncoder        *SummaryValueEncoder
	Uint64ArrayEncoder         *Uint64ArrayEncoder
}

func (d *WriterState) Init(opts *pkg.WriterOptions) {
	d.limiter.Init(opts)

	d.StructFieldCounts.Init(opts.Schema)

	// Init dictionaries
	d.AnyValueString.Init(&d.limiter)
	d.AttributeKey.Init(&d.limiter)
	d.Metric.Init(&d.limiter)
	d.MetricDescription.Init(&d.limiter)
	d.MetricName.Init(&d.limiter)
	d.MetricUnit.Init(&d.limiter)
	d.Resource.Init(&d.limiter)
	d.SchemaURL.Init(&d.limiter)
	d.Scope.Init(&d.limiter)
	d.ScopeName.Init(&d.limiter)
	d.ScopeVersion.Init(&d.limiter)
	d.SpanEventName.Init(&d.limiter)
	d.SpanName.Init(&d.limiter)

}

func (d *WriterState) ResetDicts() {
	d.limiter.ResetDict()
	d.AnyValueString.Reset()
	d.AttributeKey.Reset()
	d.Metric.Reset()
	d.MetricDescription.Reset()
	d.MetricName.Reset()
	d.MetricUnit.Reset()
	d.Resource.Reset()
	d.SchemaURL.Reset()
	d.Scope.Reset()
	d.ScopeName.Reset()
	d.ScopeVersion.Reset()
	d.SpanEventName.Reset()
	d.SpanName.Reset()
}
