// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type NumValue struct {
	val  int64
	unit string

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const NumValueStructName = "NumValue"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedNumValueVal = uint64(1 << iota)
	fieldModifiedNumValueUnit
)

// Init must be called once, before the NumValue is used.
func (s *NumValue) Init() {
	s.init(nil, 0)
}

func NewNumValue() *NumValue {
	var s NumValue
	s.init(nil, 0)
	return &s
}

func (s *NumValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

}

func (s *NumValue) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *NumValue) reset() {
	s.val = 0
	s.unit = ""
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *NumValue) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing by pointer without cloning,
// which can improve encoding performance.
func (s *NumValue) Freeze() {
	s.modifiedFields.freeze()
}

func (s *NumValue) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *NumValue) Val() int64 {
	return s.val
}

// SetVal sets the value of Val field.
func (s *NumValue) SetVal(v int64) {
	if s.val != v {
		s.val = v
		s.modifiedFields.markModified(fieldModifiedNumValueVal)
	}
}

func (s *NumValue) markValModified() {
	s.modifiedFields.markModified(fieldModifiedNumValueVal)
}

// IsValModified returns true the value of Val field was modified since
// NumValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *NumValue) IsValModified() bool {
	return s.modifiedFields.mask&fieldModifiedNumValueVal != 0
}

func (s *NumValue) Unit() string {
	return s.unit
}

// SetUnit sets the value of Unit field.
func (s *NumValue) SetUnit(v string) {
	if s.unit != v {
		s.unit = v
		s.modifiedFields.markModified(fieldModifiedNumValueUnit)
	}
}

func (s *NumValue) markUnitModified() {
	s.modifiedFields.markModified(fieldModifiedNumValueUnit)
}

// IsUnitModified returns true the value of Unit field was modified since
// NumValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *NumValue) IsUnitModified() bool {
	return s.modifiedFields.mask&fieldModifiedNumValueUnit != 0
}

func (s *NumValue) setModifiedRecursively() {
	s.modifiedFields.mask =
		fieldModifiedNumValueVal |
			fieldModifiedNumValueUnit | 0
}

func (s *NumValue) setUnmodifiedRecursively() {
	s.modifiedFields.mask = 0
}

// computeDiff compares s and val and returns true if they differ.
// All fields that are different in s will be marked as modified.
func (s *NumValue) computeDiff(val *NumValue) (ret bool) {
	// Compare Val field.
	if s.val != val.val {
		s.modifiedFields.setModified(fieldModifiedNumValueVal)
		ret = true
	}
	// Compare Unit field.
	if s.unit != val.unit {
		s.modifiedFields.setModified(fieldModifiedNumValueUnit)
		ret = true
	}
	return ret
}

// canBeShared returns true if s is safe to share by pointer without cloning (for example if s is frozen).
func (s *NumValue) canBeShared() bool {
	return false
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *NumValue) CloneShared(allocators *Allocators) NumValue {
	return s.Clone(allocators)
}

func (s *NumValue) Clone(allocators *Allocators) NumValue {
	c := NumValue{
		val:  s.val,
		unit: s.unit,
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *NumValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		0
}

// Copy from src to dst, overwriting existing data in dst.
func copyNumValue(dst *NumValue, src *NumValue) {
	dst.SetVal(src.val)
	dst.SetUnit(src.unit)
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewNumValue(dst *NumValue, src *NumValue, allocators *Allocators) {
	dst.SetVal(src.val)
	dst.SetUnit(src.unit)
}

// CopyFrom() performs a deep copy from src.
func (s *NumValue) CopyFrom(src *NumValue) {
	copyNumValue(s, src)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *NumValue) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("NumValue")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "NumValue", err))
	}

	const randRange = max(2, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Val and all subsequent fields are skipped.
	}
	// Maybe mutate Val
	if random.IntN(randRange) == 0 {
		s.SetVal(pkg.Int64Random(random))
	}
	if fieldCount <= 1 {
		return // Unit and all subsequent fields are skipped.
	}
	// Maybe mutate Unit
	if random.IntN(randRange) == 0 {
		s.SetUnit(pkg.StringRandom(random))
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *NumValue) IsEqual(right *NumValue) bool {
	// Compare Val field.
	if !pkg.Int64Equal(s.val, right.val) {
		return false
	}
	// Compare Unit field.
	if !pkg.StringEqual(s.unit, right.unit) {
		return false
	}

	return true
}

func NumValueEqual(left, right *NumValue) bool {
	return left.IsEqual(right)
}

// CmpNumValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpNumValue(left, right *NumValue) int {
	// Compare Val field.
	if c := pkg.Int64Compare(left.val, right.val); c != 0 {
		return c
	}
	// Compare Unit field.
	if c := strings.Compare(left.unit, right.unit); c != 0 {
		return c
	}
	return 0
}

// NumValueEncoder implements encoding of NumValue
type NumValueEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to a mask to force the next encoding operation
	// write the fields, whether they are modified or no. This is used after frame
	// restarts so that the data can be decoded from the frame start.
	forceModifiedFields uint64

	valEncoder  encoders.Int64Encoder
	unitEncoder encoders.StringDictEncoder

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *NumValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.NumValueEncoder != nil {
		panic("cannot initialize NumValueEncoder: already initialized")
	}
	state.NumValueEncoder = e
	defer func() { state.NumValueEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.NumValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "NumValue", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Val field.
	if e.fieldCount <= 0 {
		return nil // Val and all subsequent fields are skipped.
	}
	err = e.valEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Unit field.
	if e.fieldCount <= 1 {
		return nil // Unit and all subsequent fields are skipped.
	}
	err = e.unitEncoder.Init(&state.NumValueUnit, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *NumValueEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = e.keepFieldMask

	if e.fieldCount <= 0 {
		return // Val and all subsequent fields are skipped.
	}
	e.valEncoder.Reset()
	if e.fieldCount <= 1 {
		return // Unit and all subsequent fields are skipped.
	}
	e.unitEncoder.Reset()
}

// Encode encodes val into buf
func (e *NumValueEncoder) Encode(val *NumValue) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	fieldMask |= e.forceModifiedFields
	e.forceModifiedFields = 0

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedNumValueVal != 0 {
		// Encode Val
		e.valEncoder.Encode(val.val)
	}

	if fieldMask&fieldModifiedNumValueUnit != 0 {
		// Encode Unit
		e.unitEncoder.Encode(val.unit)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *NumValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0
	// Collect Val field.
	if e.fieldCount <= 0 {
		return // Val and subsequent fields are skipped.
	}
	e.valEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
	// Collect Unit field.
	if e.fieldCount <= 1 {
		return // Unit and subsequent fields are skipped.
	}
	e.unitEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// NumValueDecoder implements decoding of NumValue
type NumValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	fieldCount uint
	valDecoder encoders.Int64Decoder

	unitDecoder encoders.StringDictDecoder

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *NumValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.NumValueDecoder != nil {
		panic("cannot initialize NumValueDecoder: already initialized")
	}
	state.NumValueDecoder = d
	defer func() { state.NumValueDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.NumValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "NumValue", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Val and subsequent fields are skipped.
	}
	err = d.valDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Unit and subsequent fields are skipped.
	}
	err = d.unitDecoder.Init(&state.NumValueUnit, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *NumValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Val and subsequent fields are skipped.
	}
	d.valDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Unit and subsequent fields are skipped.
	}
	d.unitDecoder.Continue()
}

func (d *NumValueDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Val and all subsequent fields are skipped.
	}
	d.valDecoder.Reset()
	if d.fieldCount <= 1 {
		return // Unit and all subsequent fields are skipped.
	}
	d.unitDecoder.Reset()
}

func (d *NumValueDecoder) Decode(dstPtr *NumValue) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedNumValueVal != 0 {
		// Field is changed and is present, decode it.
		err = d.valDecoder.Decode(&val.val)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedNumValueUnit != 0 {
		// Field is changed and is present, decode it.
		err = d.unitDecoder.Decode(&val.unit)
		if err != nil {
			return err
		}
	}

	return nil
}

// NumValueAllocator implements a custom allocator for NumValue.
// It maintains a pool of pre-allocated NumValue and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type NumValueAllocator struct {
	pool []NumValue
	ofs  int
}

// Alloc returns the next available NumValue from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *NumValueAllocator) Alloc() *NumValue {
	if a.ofs < len(a.pool) {
		// Get the next available NumValue from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *NumValueAllocator) prealloc() *NumValue {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]NumValue, newLen)
	a.ofs = 1
	return &a.pool[0]
}
