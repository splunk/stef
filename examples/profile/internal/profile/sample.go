// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Sample struct {
	metadata  ProfileMetadata
	locations LocationArray
	values    SampleValueArray
	labels    Labels

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const SampleStructName = "Sample"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedSampleMetadata = uint64(1 << iota)
	fieldModifiedSampleLocations
	fieldModifiedSampleValues
	fieldModifiedSampleLabels
)

// Init must be called once, before the Sample is used.
func (s *Sample) Init() {
	s.init(nil, 0)
}

func NewSample() *Sample {
	var s Sample
	s.init(nil, 0)
	return &s
}

func (s *Sample) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.metadata.init(&s.modifiedFields, fieldModifiedSampleMetadata)
	s.locations.init(&s.modifiedFields, fieldModifiedSampleLocations)
	s.values.init(&s.modifiedFields, fieldModifiedSampleValues)
	s.labels.init(&s.modifiedFields, fieldModifiedSampleLabels)
}

func (s *Sample) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.metadata.initAlloc(&s.modifiedFields, fieldModifiedSampleMetadata, allocators)
	s.locations.initAlloc(&s.modifiedFields, fieldModifiedSampleLocations, allocators)
	s.values.initAlloc(&s.modifiedFields, fieldModifiedSampleValues, allocators)
	s.labels.initAlloc(&s.modifiedFields, fieldModifiedSampleLabels, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *Sample) reset() {

	s.metadata.reset()
	s.locations.reset()
	s.values.reset()
	s.labels.reset()
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *Sample) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields

	s.metadata.fixParent(&s.modifiedFields)
	s.locations.fixParent(&s.modifiedFields)
	s.values.fixParent(&s.modifiedFields)
	s.labels.fixParent(&s.modifiedFields)
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing without cloning
// which can improve performance.
func (s *Sample) Freeze() {
	s.modifiedFields.freeze()
}

func (s *Sample) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *Sample) Metadata() *ProfileMetadata {
	return &s.metadata
}

func (s *Sample) markMetadataModified() {
	s.modifiedFields.markModified(fieldModifiedSampleMetadata)
}

// IsMetadataModified returns true the value of Metadata field was modified since
// Sample was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Sample) IsMetadataModified() bool {
	return s.modifiedFields.mask&fieldModifiedSampleMetadata != 0
}

func (s *Sample) Locations() *LocationArray {
	return &s.locations
}

func (s *Sample) markLocationsModified() {
	s.modifiedFields.markModified(fieldModifiedSampleLocations)
}

// IsLocationsModified returns true the value of Locations field was modified since
// Sample was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Sample) IsLocationsModified() bool {
	return s.modifiedFields.mask&fieldModifiedSampleLocations != 0
}

func (s *Sample) Values() *SampleValueArray {
	return &s.values
}

func (s *Sample) markValuesModified() {
	s.modifiedFields.markModified(fieldModifiedSampleValues)
}

// IsValuesModified returns true the value of Values field was modified since
// Sample was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Sample) IsValuesModified() bool {
	return s.modifiedFields.mask&fieldModifiedSampleValues != 0
}

func (s *Sample) Labels() *Labels {
	return &s.labels
}

func (s *Sample) markLabelsModified() {
	s.modifiedFields.markModified(fieldModifiedSampleLabels)
}

// IsLabelsModified returns true the value of Labels field was modified since
// Sample was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Sample) IsLabelsModified() bool {
	return s.modifiedFields.mask&fieldModifiedSampleLabels != 0
}

func (s *Sample) markModifiedRecursively() {

	s.metadata.markModifiedRecursively()

	s.locations.markModifiedRecursively()

	s.values.markModifiedRecursively()

	s.labels.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedSampleMetadata |
			fieldModifiedSampleLocations |
			fieldModifiedSampleValues |
			fieldModifiedSampleLabels | 0
}

func (s *Sample) markUnmodifiedRecursively() {

	if s.IsMetadataModified() {
		s.metadata.markUnmodifiedRecursively()
	}

	if s.IsLocationsModified() {
		s.locations.markUnmodifiedRecursively()
	}

	if s.IsValuesModified() {
		s.values.markUnmodifiedRecursively()
	}

	if s.IsLabelsModified() {
		s.labels.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// canBeShared returns true if s is safe to share without cloning (for example if s is frozen).
func (s *Sample) canBeShared() bool {
	return s.isFrozen()
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *Sample) CloneShared(allocators *Allocators) Sample {

	return s.Clone(allocators)
}

func (s *Sample) Clone(allocators *Allocators) Sample {

	c := Sample{

		//modifiedFields: s.modifiedFields,
		metadata:  s.metadata.CloneShared(allocators),
		locations: s.locations.CloneShared(allocators),
		values:    s.values.CloneShared(allocators),
		labels:    s.labels.CloneShared(allocators),
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Sample) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.metadata.byteSize() + s.locations.byteSize() + s.values.byteSize() + s.labels.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copySample(dst *Sample, src *Sample) {
	copyProfileMetadata(&dst.metadata, &src.metadata)
	copyLocationArray(&dst.locations, &src.locations)
	copySampleValueArray(&dst.values, &src.values)
	copyLabels(&dst.labels, &src.labels)
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewSample(dst *Sample, src *Sample, allocators *Allocators) {

	copyToNewProfileMetadata(&dst.metadata, &src.metadata, allocators)
	copyToNewLocationArray(&dst.locations, &src.locations, allocators)
	copyToNewSampleValueArray(&dst.values, &src.values, allocators)
	copyToNewLabels(&dst.labels, &src.labels, allocators)
}

// CopyFrom() performs a deep copy from src.
func (s *Sample) CopyFrom(src *Sample) {
	copySample(s, src)
}

func (s *Sample) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *Sample) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("Sample")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "Sample", err))
	}

	const randRange = max(4, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Metadata and all subsequent fields are skipped.
	}
	// Maybe mutate Metadata
	if random.IntN(randRange) == 0 {
		s.metadata.mutateRandom(random, schem)
	}
	if fieldCount <= 1 {
		return // Locations and all subsequent fields are skipped.
	}
	// Maybe mutate Locations
	if random.IntN(randRange) == 0 {
		s.locations.mutateRandom(random, schem)
	}
	if fieldCount <= 2 {
		return // Values and all subsequent fields are skipped.
	}
	// Maybe mutate Values
	if random.IntN(randRange) == 0 {
		s.values.mutateRandom(random, schem)
	}
	if fieldCount <= 3 {
		return // Labels and all subsequent fields are skipped.
	}
	// Maybe mutate Labels
	if random.IntN(randRange) == 0 {
		s.labels.mutateRandom(random, schem)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *Sample) IsEqual(right *Sample) bool {
	// Compare Metadata field.
	if !s.metadata.IsEqual(&right.metadata) {
		return false
	}
	// Compare Locations field.
	if !s.locations.IsEqual(&right.locations) {
		return false
	}
	// Compare Values field.
	if !s.values.IsEqual(&right.values) {
		return false
	}
	// Compare Labels field.
	if !s.labels.IsEqual(&right.labels) {
		return false
	}

	return true
}

func SampleEqual(left, right *Sample) bool {
	return left.IsEqual(right)
}

// CmpSample performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpSample(left, right *Sample) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Metadata field.
	if c := CmpProfileMetadata(&left.metadata, &right.metadata); c != 0 {
		return c
	}

	// Compare Locations field.
	if c := CmpLocationArray(&left.locations, &right.locations); c != 0 {
		return c
	}

	// Compare Values field.
	if c := CmpSampleValueArray(&left.values, &right.values); c != 0 {
		return c
	}

	// Compare Labels field.
	if c := CmpLabels(&left.labels, &right.labels); c != 0 {
		return c
	}

	return 0
}

// SampleEncoder implements encoding of Sample
type SampleEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	metadataEncoder     *ProfileMetadataEncoder
	isMetadataRecursive bool // Indicates Metadata field's type is recursive.

	locationsEncoder     *LocationArrayEncoder
	isLocationsRecursive bool // Indicates Locations field's type is recursive.

	valuesEncoder     *SampleValueArrayEncoder
	isValuesRecursive bool // Indicates Values field's type is recursive.

	labelsEncoder     *LabelsEncoder
	isLabelsRecursive bool // Indicates Labels field's type is recursive.

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *SampleEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.SampleEncoder != nil {
		panic("cannot initialize SampleEncoder: already initialized")
	}
	state.SampleEncoder = e
	defer func() { state.SampleEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.SampleFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Sample", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Metadata field.
	if e.fieldCount <= 0 {
		return nil // Metadata and all subsequent fields are skipped.
	}
	if state.ProfileMetadataEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.metadataEncoder = state.ProfileMetadataEncoder
		e.isMetadataRecursive = true
	} else {
		e.metadataEncoder = new(ProfileMetadataEncoder)
		err = e.metadataEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Locations field.
	if e.fieldCount <= 1 {
		return nil // Locations and all subsequent fields are skipped.
	}
	if state.LocationArrayEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.locationsEncoder = state.LocationArrayEncoder
		e.isLocationsRecursive = true
	} else {
		e.locationsEncoder = new(LocationArrayEncoder)
		err = e.locationsEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Values field.
	if e.fieldCount <= 2 {
		return nil // Values and all subsequent fields are skipped.
	}
	if state.SampleValueArrayEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.valuesEncoder = state.SampleValueArrayEncoder
		e.isValuesRecursive = true
	} else {
		e.valuesEncoder = new(SampleValueArrayEncoder)
		err = e.valuesEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Labels field.
	if e.fieldCount <= 3 {
		return nil // Labels and all subsequent fields are skipped.
	}
	if state.LabelsEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.labelsEncoder = state.LabelsEncoder
		e.isLabelsRecursive = true
	} else {
		e.labelsEncoder = new(LabelsEncoder)
		err = e.labelsEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *SampleEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if e.fieldCount <= 0 {
		return // Metadata and all subsequent fields are skipped.
	}

	if !e.isMetadataRecursive {
		e.metadataEncoder.Reset()
	}

	if e.fieldCount <= 1 {
		return // Locations and all subsequent fields are skipped.
	}

	if !e.isLocationsRecursive {
		e.locationsEncoder.Reset()
	}

	if e.fieldCount <= 2 {
		return // Values and all subsequent fields are skipped.
	}

	if !e.isValuesRecursive {
		e.valuesEncoder.Reset()
	}

	if e.fieldCount <= 3 {
		return // Labels and all subsequent fields are skipped.
	}

	if !e.isLabelsRecursive {
		e.labelsEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *SampleEncoder) Encode(val *Sample) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedSampleMetadata |
				fieldModifiedSampleLocations |
				fieldModifiedSampleValues |
				fieldModifiedSampleLabels | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedSampleMetadata != 0 {
		// Encode Metadata
		e.metadataEncoder.Encode(&val.metadata)
	}

	if fieldMask&fieldModifiedSampleLocations != 0 {
		// Encode Locations
		e.locationsEncoder.Encode(&val.locations)
	}

	if fieldMask&fieldModifiedSampleValues != 0 {
		// Encode Values
		e.valuesEncoder.Encode(&val.values)
	}

	if fieldMask&fieldModifiedSampleLabels != 0 {
		// Encode Labels
		e.labelsEncoder.Encode(&val.labels)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *SampleEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Metadata field.
	if e.fieldCount <= 0 {
		return // Metadata and subsequent fields are skipped.
	}
	if !e.isMetadataRecursive {
		e.metadataEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Locations field.
	if e.fieldCount <= 1 {
		return // Locations and subsequent fields are skipped.
	}
	if !e.isLocationsRecursive {
		e.locationsEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Values field.
	if e.fieldCount <= 2 {
		return // Values and subsequent fields are skipped.
	}
	if !e.isValuesRecursive {
		e.valuesEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Labels field.
	if e.fieldCount <= 3 {
		return // Labels and subsequent fields are skipped.
	}
	if !e.isLabelsRecursive {
		e.labelsEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// SampleDecoder implements decoding of Sample
type SampleDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	fieldCount uint

	metadataDecoder     *ProfileMetadataDecoder
	isMetadataRecursive bool

	locationsDecoder     *LocationArrayDecoder
	isLocationsRecursive bool

	valuesDecoder     *SampleValueArrayDecoder
	isValuesRecursive bool

	labelsDecoder     *LabelsDecoder
	isLabelsRecursive bool

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *SampleDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.SampleDecoder != nil {
		panic("cannot initialize SampleDecoder: already initialized")
	}
	state.SampleDecoder = d
	defer func() { state.SampleDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.SampleFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Sample", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Metadata and subsequent fields are skipped.
	}
	if state.ProfileMetadataDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.metadataDecoder = state.ProfileMetadataDecoder
		d.isMetadataRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.metadataDecoder = new(ProfileMetadataDecoder)
		err = d.metadataDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Locations and subsequent fields are skipped.
	}
	if state.LocationArrayDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.locationsDecoder = state.LocationArrayDecoder
		d.isLocationsRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.locationsDecoder = new(LocationArrayDecoder)
		err = d.locationsDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Values and subsequent fields are skipped.
	}
	if state.SampleValueArrayDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.valuesDecoder = state.SampleValueArrayDecoder
		d.isValuesRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.valuesDecoder = new(SampleValueArrayDecoder)
		err = d.valuesDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Labels and subsequent fields are skipped.
	}
	if state.LabelsDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.labelsDecoder = state.LabelsDecoder
		d.isLabelsRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.labelsDecoder = new(LabelsDecoder)
		err = d.labelsDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *SampleDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Metadata and subsequent fields are skipped.
	}

	if !d.isMetadataRecursive {
		d.metadataDecoder.Continue()
	}

	if d.fieldCount <= 1 {
		return // Locations and subsequent fields are skipped.
	}

	if !d.isLocationsRecursive {
		d.locationsDecoder.Continue()
	}

	if d.fieldCount <= 2 {
		return // Values and subsequent fields are skipped.
	}

	if !d.isValuesRecursive {
		d.valuesDecoder.Continue()
	}

	if d.fieldCount <= 3 {
		return // Labels and subsequent fields are skipped.
	}

	if !d.isLabelsRecursive {
		d.labelsDecoder.Continue()
	}

}

func (d *SampleDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Metadata and all subsequent fields are skipped.
	}

	if !d.isMetadataRecursive {
		d.metadataDecoder.Reset()
	}

	if d.fieldCount <= 1 {
		return // Locations and all subsequent fields are skipped.
	}

	if !d.isLocationsRecursive {
		d.locationsDecoder.Reset()
	}

	if d.fieldCount <= 2 {
		return // Values and all subsequent fields are skipped.
	}

	if !d.isValuesRecursive {
		d.valuesDecoder.Reset()
	}

	if d.fieldCount <= 3 {
		return // Labels and all subsequent fields are skipped.
	}

	if !d.isLabelsRecursive {
		d.labelsDecoder.Reset()
	}

}

func (d *SampleDecoder) Decode(dstPtr *Sample) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedSampleMetadata != 0 {
		// Field is changed and is present, decode it.
		err = d.metadataDecoder.Decode(&val.metadata)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSampleLocations != 0 {
		// Field is changed and is present, decode it.
		err = d.locationsDecoder.Decode(&val.locations)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSampleValues != 0 {
		// Field is changed and is present, decode it.
		err = d.valuesDecoder.Decode(&val.values)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSampleLabels != 0 {
		// Field is changed and is present, decode it.
		err = d.labelsDecoder.Decode(&val.labels)
		if err != nil {
			return err
		}
	}

	return nil
}

// SampleAllocator implements a custom allocator for Sample.
// It maintains a pool of pre-allocated Sample and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type SampleAllocator struct {
	pool []Sample
	ofs  int
}

// Alloc returns the next available Sample from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *SampleAllocator) Alloc() *Sample {
	if a.ofs < len(a.pool) {
		// Get the next available Sample from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *SampleAllocator) prealloc() *Sample {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]Sample, newLen)
	a.ofs = 1
	return &a.pool[0]
}

var wireSchemaSample = []byte{0x0A, 0x04, 0x08, 0x02, 0x04, 0x09, 0x03, 0x04, 0x02, 0x02, 0x02}

func SampleWireSchema() (schema.WireSchema, error) {
	var w schema.WireSchema
	if err := w.Deserialize(bytes.NewReader(wireSchemaSample)); err != nil {
		return w, err
	}
	return w, nil
}
