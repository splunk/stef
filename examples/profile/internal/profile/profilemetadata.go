// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type ProfileMetadata struct {
	dropFrames        string
	keepFrames        string
	timeNanos         int64
	durationNanos     int64
	periodType        *SampleValueType
	period            int64
	comments          StringArray
	defaultSampleType *SampleValueType

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const ProfileMetadataStructName = "ProfileMetadata"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedProfileMetadataDropFrames = uint64(1 << iota)
	fieldModifiedProfileMetadataKeepFrames
	fieldModifiedProfileMetadataTimeNanos
	fieldModifiedProfileMetadataDurationNanos
	fieldModifiedProfileMetadataPeriodType
	fieldModifiedProfileMetadataPeriod
	fieldModifiedProfileMetadataComments
	fieldModifiedProfileMetadataDefaultSampleType
)

// Init must be called once, before the ProfileMetadata is used.
func (s *ProfileMetadata) Init() {
	s.init(nil, 0)
}

func NewProfileMetadata() *ProfileMetadata {
	var s ProfileMetadata
	s.init(nil, 0)
	return &s
}

func (s *ProfileMetadata) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.periodType = &SampleValueType{}
	s.periodType.init(&s.modifiedFields, fieldModifiedProfileMetadataPeriodType)
	s.comments.init(&s.modifiedFields, fieldModifiedProfileMetadataComments)
	s.defaultSampleType = &SampleValueType{}
	s.defaultSampleType.init(&s.modifiedFields, fieldModifiedProfileMetadataDefaultSampleType)
}

func (s *ProfileMetadata) DropFrames() string {
	return s.dropFrames
}

// SetDropFrames sets the value of DropFrames field.
func (s *ProfileMetadata) SetDropFrames(v string) {
	if !pkg.StringEqual(s.dropFrames, v) {
		s.dropFrames = v
		s.markDropFramesModified()
	}
}

func (s *ProfileMetadata) markDropFramesModified() {
	s.modifiedFields.markModified(fieldModifiedProfileMetadataDropFrames)
}

// IsDropFramesModified returns true the value of DropFrames field was modified since
// ProfileMetadata was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ProfileMetadata) IsDropFramesModified() bool {
	return s.modifiedFields.mask&fieldModifiedProfileMetadataDropFrames != 0
}

func (s *ProfileMetadata) KeepFrames() string {
	return s.keepFrames
}

// SetKeepFrames sets the value of KeepFrames field.
func (s *ProfileMetadata) SetKeepFrames(v string) {
	if !pkg.StringEqual(s.keepFrames, v) {
		s.keepFrames = v
		s.markKeepFramesModified()
	}
}

func (s *ProfileMetadata) markKeepFramesModified() {
	s.modifiedFields.markModified(fieldModifiedProfileMetadataKeepFrames)
}

// IsKeepFramesModified returns true the value of KeepFrames field was modified since
// ProfileMetadata was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ProfileMetadata) IsKeepFramesModified() bool {
	return s.modifiedFields.mask&fieldModifiedProfileMetadataKeepFrames != 0
}

func (s *ProfileMetadata) TimeNanos() int64 {
	return s.timeNanos
}

// SetTimeNanos sets the value of TimeNanos field.
func (s *ProfileMetadata) SetTimeNanos(v int64) {
	if !pkg.Int64Equal(s.timeNanos, v) {
		s.timeNanos = v
		s.markTimeNanosModified()
	}
}

func (s *ProfileMetadata) markTimeNanosModified() {
	s.modifiedFields.markModified(fieldModifiedProfileMetadataTimeNanos)
}

// IsTimeNanosModified returns true the value of TimeNanos field was modified since
// ProfileMetadata was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ProfileMetadata) IsTimeNanosModified() bool {
	return s.modifiedFields.mask&fieldModifiedProfileMetadataTimeNanos != 0
}

func (s *ProfileMetadata) DurationNanos() int64 {
	return s.durationNanos
}

// SetDurationNanos sets the value of DurationNanos field.
func (s *ProfileMetadata) SetDurationNanos(v int64) {
	if !pkg.Int64Equal(s.durationNanos, v) {
		s.durationNanos = v
		s.markDurationNanosModified()
	}
}

func (s *ProfileMetadata) markDurationNanosModified() {
	s.modifiedFields.markModified(fieldModifiedProfileMetadataDurationNanos)
}

// IsDurationNanosModified returns true the value of DurationNanos field was modified since
// ProfileMetadata was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ProfileMetadata) IsDurationNanosModified() bool {
	return s.modifiedFields.mask&fieldModifiedProfileMetadataDurationNanos != 0
}

func (s *ProfileMetadata) PeriodType() *SampleValueType {
	return s.periodType
}

// IsPeriodTypeModified returns true the value of PeriodType field was modified since
// ProfileMetadata was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ProfileMetadata) IsPeriodTypeModified() bool {
	return s.modifiedFields.mask&fieldModifiedProfileMetadataPeriodType != 0
}

func (s *ProfileMetadata) Period() int64 {
	return s.period
}

// SetPeriod sets the value of Period field.
func (s *ProfileMetadata) SetPeriod(v int64) {
	if !pkg.Int64Equal(s.period, v) {
		s.period = v
		s.markPeriodModified()
	}
}

func (s *ProfileMetadata) markPeriodModified() {
	s.modifiedFields.markModified(fieldModifiedProfileMetadataPeriod)
}

// IsPeriodModified returns true the value of Period field was modified since
// ProfileMetadata was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ProfileMetadata) IsPeriodModified() bool {
	return s.modifiedFields.mask&fieldModifiedProfileMetadataPeriod != 0
}

func (s *ProfileMetadata) Comments() *StringArray {
	return &s.comments
}

// IsCommentsModified returns true the value of Comments field was modified since
// ProfileMetadata was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ProfileMetadata) IsCommentsModified() bool {
	return s.modifiedFields.mask&fieldModifiedProfileMetadataComments != 0
}

func (s *ProfileMetadata) DefaultSampleType() *SampleValueType {
	return s.defaultSampleType
}

// IsDefaultSampleTypeModified returns true the value of DefaultSampleType field was modified since
// ProfileMetadata was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *ProfileMetadata) IsDefaultSampleTypeModified() bool {
	return s.modifiedFields.mask&fieldModifiedProfileMetadataDefaultSampleType != 0
}

func (s *ProfileMetadata) markModifiedRecursively() {

	s.periodType.markModifiedRecursively()

	s.comments.markModifiedRecursively()

	s.defaultSampleType.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedProfileMetadataDropFrames |
			fieldModifiedProfileMetadataKeepFrames |
			fieldModifiedProfileMetadataTimeNanos |
			fieldModifiedProfileMetadataDurationNanos |
			fieldModifiedProfileMetadataPeriodType |
			fieldModifiedProfileMetadataPeriod |
			fieldModifiedProfileMetadataComments |
			fieldModifiedProfileMetadataDefaultSampleType | 0
}

func (s *ProfileMetadata) markUnmodifiedRecursively() {

	if s.IsDropFramesModified() {
	}

	if s.IsKeepFramesModified() {
	}

	if s.IsTimeNanosModified() {
	}

	if s.IsDurationNanosModified() {
	}

	if s.IsPeriodTypeModified() {
		s.periodType.markUnmodifiedRecursively()
	}

	if s.IsPeriodModified() {
	}

	if s.IsCommentsModified() {
		s.comments.markUnmodifiedRecursively()
	}

	if s.IsDefaultSampleTypeModified() {
		s.defaultSampleType.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// markDiffModified marks fields in this struct modified if they differ from
// the corresponding fields in v.
func (s *ProfileMetadata) markDiffModified(v *ProfileMetadata) (modified bool) {
	if !pkg.StringEqual(s.dropFrames, v.dropFrames) {
		s.markDropFramesModified()
		modified = true
	}

	if !pkg.StringEqual(s.keepFrames, v.keepFrames) {
		s.markKeepFramesModified()
		modified = true
	}

	if !pkg.Int64Equal(s.timeNanos, v.timeNanos) {
		s.markTimeNanosModified()
		modified = true
	}

	if !pkg.Int64Equal(s.durationNanos, v.durationNanos) {
		s.markDurationNanosModified()
		modified = true
	}

	if s.periodType.markDiffModified(v.periodType) {
		s.modifiedFields.markModified(fieldModifiedProfileMetadataPeriodType)
		modified = true
	}

	if !pkg.Int64Equal(s.period, v.period) {
		s.markPeriodModified()
		modified = true
	}

	if s.comments.markDiffModified(&v.comments) {
		s.modifiedFields.markModified(fieldModifiedProfileMetadataComments)
		modified = true
	}

	if s.defaultSampleType.markDiffModified(v.defaultSampleType) {
		s.modifiedFields.markModified(fieldModifiedProfileMetadataDefaultSampleType)
		modified = true
	}

	return modified
}

func (s *ProfileMetadata) Clone() ProfileMetadata {
	return ProfileMetadata{
		dropFrames:        s.dropFrames,
		keepFrames:        s.keepFrames,
		timeNanos:         s.timeNanos,
		durationNanos:     s.durationNanos,
		periodType:        s.periodType.Clone(),
		period:            s.period,
		comments:          s.comments.Clone(),
		defaultSampleType: s.defaultSampleType.Clone(),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *ProfileMetadata) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.periodType.byteSize() + s.comments.byteSize() + s.defaultSampleType.byteSize() + 0
}

func copyProfileMetadata(dst *ProfileMetadata, src *ProfileMetadata) {
	dst.SetDropFrames(src.dropFrames)
	dst.SetKeepFrames(src.keepFrames)
	dst.SetTimeNanos(src.timeNanos)
	dst.SetDurationNanos(src.durationNanos)
	if src.periodType != nil {
		if dst.periodType == nil {
			dst.periodType = &SampleValueType{}
			dst.periodType.init(&dst.modifiedFields, fieldModifiedProfileMetadataPeriodType)
		}
		copySampleValueType(dst.periodType, src.periodType)
	}
	dst.SetPeriod(src.period)
	copyStringArray(&dst.comments, &src.comments)
	if src.defaultSampleType != nil {
		if dst.defaultSampleType == nil {
			dst.defaultSampleType = &SampleValueType{}
			dst.defaultSampleType.init(&dst.modifiedFields, fieldModifiedProfileMetadataDefaultSampleType)
		}
		copySampleValueType(dst.defaultSampleType, src.defaultSampleType)
	}
}

// CopyFrom() performs a deep copy from src.
func (s *ProfileMetadata) CopyFrom(src *ProfileMetadata) {
	copyProfileMetadata(s, src)
}

func (s *ProfileMetadata) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *ProfileMetadata) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.periodType.markUnmodified()
	s.comments.markUnmodified()
	s.defaultSampleType.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *ProfileMetadata) mutateRandom(random *rand.Rand) {
	const fieldCount = max(8, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
	if random.IntN(fieldCount) == 0 {
		s.SetDropFrames(pkg.StringRandom(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetKeepFrames(pkg.StringRandom(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetTimeNanos(pkg.Int64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetDurationNanos(pkg.Int64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.periodType.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.SetPeriod(pkg.Int64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.comments.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.defaultSampleType.mutateRandom(random)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *ProfileMetadata) IsEqual(right *ProfileMetadata) bool {
	// Compare DropFrames field.
	if !pkg.StringEqual(s.dropFrames, right.dropFrames) {
		return false
	}
	// Compare KeepFrames field.
	if !pkg.StringEqual(s.keepFrames, right.keepFrames) {
		return false
	}
	// Compare TimeNanos field.
	if !pkg.Int64Equal(s.timeNanos, right.timeNanos) {
		return false
	}
	// Compare DurationNanos field.
	if !pkg.Int64Equal(s.durationNanos, right.durationNanos) {
		return false
	}
	// Compare PeriodType field.
	if !s.periodType.IsEqual(right.periodType) {
		return false
	}
	// Compare Period field.
	if !pkg.Int64Equal(s.period, right.period) {
		return false
	}
	// Compare Comments field.
	if !s.comments.IsEqual(&right.comments) {
		return false
	}
	// Compare DefaultSampleType field.
	if !s.defaultSampleType.IsEqual(right.defaultSampleType) {
		return false
	}

	return true
}

func ProfileMetadataEqual(left, right *ProfileMetadata) bool {
	return left.IsEqual(right)
}

// CmpProfileMetadata performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpProfileMetadata(left, right *ProfileMetadata) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare DropFrames field.
	if c := strings.Compare(left.dropFrames, right.dropFrames); c != 0 {
		return c
	}

	// Compare KeepFrames field.
	if c := strings.Compare(left.keepFrames, right.keepFrames); c != 0 {
		return c
	}

	// Compare TimeNanos field.
	if c := pkg.Int64Compare(left.timeNanos, right.timeNanos); c != 0 {
		return c
	}

	// Compare DurationNanos field.
	if c := pkg.Int64Compare(left.durationNanos, right.durationNanos); c != 0 {
		return c
	}

	// Compare PeriodType field.
	if c := CmpSampleValueType(left.periodType, right.periodType); c != 0 {
		return c
	}

	// Compare Period field.
	if c := pkg.Int64Compare(left.period, right.period); c != 0 {
		return c
	}

	// Compare Comments field.
	if c := CmpStringArray(&left.comments, &right.comments); c != 0 {
		return c
	}

	// Compare DefaultSampleType field.
	if c := CmpSampleValueType(left.defaultSampleType, right.defaultSampleType); c != 0 {
		return c
	}

	return 0
}

// ProfileMetadataEncoder implements encoding of ProfileMetadata
type ProfileMetadataEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	dropFramesEncoder encoders.StringEncoder

	keepFramesEncoder encoders.StringEncoder

	timeNanosEncoder encoders.Int64Encoder

	durationNanosEncoder encoders.Int64Encoder

	periodTypeEncoder     *SampleValueTypeEncoder
	isPeriodTypeRecursive bool // Indicates PeriodType field's type is recursive.

	periodEncoder encoders.Int64Encoder

	commentsEncoder     *StringArrayEncoder
	isCommentsRecursive bool // Indicates Comments field's type is recursive.

	defaultSampleTypeEncoder     *SampleValueTypeEncoder
	isDefaultSampleTypeRecursive bool // Indicates DefaultSampleType field's type is recursive.

	keepFieldMask uint64
	fieldCount    uint
}

func (e *ProfileMetadataEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.ProfileMetadataEncoder != nil {
		panic("cannot initialize ProfileMetadataEncoder: already initialized")
	}
	state.ProfileMetadataEncoder = e
	defer func() { state.ProfileMetadataEncoder = nil }()

	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("ProfileMetadata")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "ProfileMetadata")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 8
		e.keepFieldMask = ^uint64(0)
	}

	var err error

	// Init encoder for DropFrames field.
	if e.fieldCount <= 0 {
		// DropFrames and all subsequent fields are skipped.
		return nil
	}
	err = e.dropFramesEncoder.Init(&state.FunctionName, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for KeepFrames field.
	if e.fieldCount <= 1 {
		// KeepFrames and all subsequent fields are skipped.
		return nil
	}
	err = e.keepFramesEncoder.Init(&state.FunctionName, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for TimeNanos field.
	if e.fieldCount <= 2 {
		// TimeNanos and all subsequent fields are skipped.
		return nil
	}
	err = e.timeNanosEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for DurationNanos field.
	if e.fieldCount <= 3 {
		// DurationNanos and all subsequent fields are skipped.
		return nil
	}
	err = e.durationNanosEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for PeriodType field.
	if e.fieldCount <= 4 {
		// PeriodType and all subsequent fields are skipped.
		return nil
	}
	if state.SampleValueTypeEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.periodTypeEncoder = state.SampleValueTypeEncoder
		e.isPeriodTypeRecursive = true
	} else {
		e.periodTypeEncoder = new(SampleValueTypeEncoder)
		err = e.periodTypeEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Period field.
	if e.fieldCount <= 5 {
		// Period and all subsequent fields are skipped.
		return nil
	}
	err = e.periodEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Comments field.
	if e.fieldCount <= 6 {
		// Comments and all subsequent fields are skipped.
		return nil
	}
	if state.StringArrayEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.commentsEncoder = state.StringArrayEncoder
		e.isCommentsRecursive = true
	} else {
		e.commentsEncoder = new(StringArrayEncoder)
		err = e.commentsEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for DefaultSampleType field.
	if e.fieldCount <= 7 {
		// DefaultSampleType and all subsequent fields are skipped.
		return nil
	}
	if state.SampleValueTypeEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.defaultSampleTypeEncoder = state.SampleValueTypeEncoder
		e.isDefaultSampleTypeRecursive = true
	} else {
		e.defaultSampleTypeEncoder = new(SampleValueTypeEncoder)
		err = e.defaultSampleTypeEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *ProfileMetadataEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.dropFramesEncoder.Reset()
	e.keepFramesEncoder.Reset()
	e.timeNanosEncoder.Reset()
	e.durationNanosEncoder.Reset()

	if !e.isPeriodTypeRecursive {
		e.periodTypeEncoder.Reset()
	}

	e.periodEncoder.Reset()

	if !e.isCommentsRecursive {
		e.commentsEncoder.Reset()
	}

	if !e.isDefaultSampleTypeRecursive {
		e.defaultSampleTypeEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *ProfileMetadataEncoder) Encode(val *ProfileMetadata) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedProfileMetadataDropFrames |
				fieldModifiedProfileMetadataKeepFrames |
				fieldModifiedProfileMetadataTimeNanos |
				fieldModifiedProfileMetadataDurationNanos |
				fieldModifiedProfileMetadataPeriodType |
				fieldModifiedProfileMetadataPeriod |
				fieldModifiedProfileMetadataComments |
				fieldModifiedProfileMetadataDefaultSampleType | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedProfileMetadataDropFrames != 0 {
		// Encode DropFrames
		e.dropFramesEncoder.Encode(val.dropFrames)
	}

	if fieldMask&fieldModifiedProfileMetadataKeepFrames != 0 {
		// Encode KeepFrames
		e.keepFramesEncoder.Encode(val.keepFrames)
	}

	if fieldMask&fieldModifiedProfileMetadataTimeNanos != 0 {
		// Encode TimeNanos
		e.timeNanosEncoder.Encode(val.timeNanos)
	}

	if fieldMask&fieldModifiedProfileMetadataDurationNanos != 0 {
		// Encode DurationNanos
		e.durationNanosEncoder.Encode(val.durationNanos)
	}

	if fieldMask&fieldModifiedProfileMetadataPeriodType != 0 {
		// Encode PeriodType
		e.periodTypeEncoder.Encode(val.periodType)
	}

	if fieldMask&fieldModifiedProfileMetadataPeriod != 0 {
		// Encode Period
		e.periodEncoder.Encode(val.period)
	}

	if fieldMask&fieldModifiedProfileMetadataComments != 0 {
		// Encode Comments
		e.commentsEncoder.Encode(&val.comments)
	}

	if fieldMask&fieldModifiedProfileMetadataDefaultSampleType != 0 {
		// Encode DefaultSampleType
		e.defaultSampleTypeEncoder.Encode(val.defaultSampleType)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *ProfileMetadataEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect DropFrames field.
	if e.fieldCount <= 0 {
		return // DropFrames and subsequent fields are skipped.
	}

	e.dropFramesEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect KeepFrames field.
	if e.fieldCount <= 1 {
		return // KeepFrames and subsequent fields are skipped.
	}

	e.keepFramesEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect TimeNanos field.
	if e.fieldCount <= 2 {
		return // TimeNanos and subsequent fields are skipped.
	}

	e.timeNanosEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect DurationNanos field.
	if e.fieldCount <= 3 {
		return // DurationNanos and subsequent fields are skipped.
	}

	e.durationNanosEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect PeriodType field.
	if e.fieldCount <= 4 {
		return // PeriodType and subsequent fields are skipped.
	}
	if !e.isPeriodTypeRecursive {
		e.periodTypeEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Period field.
	if e.fieldCount <= 5 {
		return // Period and subsequent fields are skipped.
	}

	e.periodEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Comments field.
	if e.fieldCount <= 6 {
		return // Comments and subsequent fields are skipped.
	}
	if !e.isCommentsRecursive {
		e.commentsEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect DefaultSampleType field.
	if e.fieldCount <= 7 {
		return // DefaultSampleType and subsequent fields are skipped.
	}
	if !e.isDefaultSampleTypeRecursive {
		e.defaultSampleTypeEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// ProfileMetadataDecoder implements decoding of ProfileMetadata
type ProfileMetadataDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *ProfileMetadata
	lastVal    ProfileMetadata
	fieldCount uint

	dropFramesDecoder encoders.StringDecoder

	keepFramesDecoder encoders.StringDecoder

	timeNanosDecoder encoders.Int64Decoder

	durationNanosDecoder encoders.Int64Decoder

	periodTypeDecoder     *SampleValueTypeDecoder
	isPeriodTypeRecursive bool

	periodDecoder encoders.Int64Decoder

	commentsDecoder     *StringArrayDecoder
	isCommentsRecursive bool

	defaultSampleTypeDecoder     *SampleValueTypeDecoder
	isDefaultSampleTypeRecursive bool
}

// Init is called once in the lifetime of the stream.
func (d *ProfileMetadataDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.ProfileMetadataDecoder != nil {
		panic("cannot initialize ProfileMetadataDecoder: already initialized")
	}
	state.ProfileMetadataDecoder = d
	defer func() { state.ProfileMetadataDecoder = nil }()

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("ProfileMetadata")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "ProfileMetadata")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 8
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // DropFrames and subsequent fields are skipped.
	}
	err = d.dropFramesDecoder.Init(&state.FunctionName, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // KeepFrames and subsequent fields are skipped.
	}
	err = d.keepFramesDecoder.Init(&state.FunctionName, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // TimeNanos and subsequent fields are skipped.
	}
	err = d.timeNanosDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // DurationNanos and subsequent fields are skipped.
	}
	err = d.durationNanosDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // PeriodType and subsequent fields are skipped.
	}
	if state.SampleValueTypeDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.periodTypeDecoder = state.SampleValueTypeDecoder
		d.isPeriodTypeRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.periodTypeDecoder = new(SampleValueTypeDecoder)
		err = d.periodTypeDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 5 {
		return nil // Period and subsequent fields are skipped.
	}
	err = d.periodDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 6 {
		return nil // Comments and subsequent fields are skipped.
	}
	if state.StringArrayDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.commentsDecoder = state.StringArrayDecoder
		d.isCommentsRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.commentsDecoder = new(StringArrayDecoder)
		err = d.commentsDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 7 {
		return nil // DefaultSampleType and subsequent fields are skipped.
	}
	if state.SampleValueTypeDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.defaultSampleTypeDecoder = state.SampleValueTypeDecoder
		d.isDefaultSampleTypeRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.defaultSampleTypeDecoder = new(SampleValueTypeDecoder)
		err = d.defaultSampleTypeDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *ProfileMetadataDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // DropFrames and subsequent fields are skipped.
	}
	d.dropFramesDecoder.Continue()
	if d.fieldCount <= 1 {
		return // KeepFrames and subsequent fields are skipped.
	}
	d.keepFramesDecoder.Continue()
	if d.fieldCount <= 2 {
		return // TimeNanos and subsequent fields are skipped.
	}
	d.timeNanosDecoder.Continue()
	if d.fieldCount <= 3 {
		return // DurationNanos and subsequent fields are skipped.
	}
	d.durationNanosDecoder.Continue()
	if d.fieldCount <= 4 {
		return // PeriodType and subsequent fields are skipped.
	}

	if !d.isPeriodTypeRecursive {
		d.periodTypeDecoder.Continue()
	}

	if d.fieldCount <= 5 {
		return // Period and subsequent fields are skipped.
	}
	d.periodDecoder.Continue()
	if d.fieldCount <= 6 {
		return // Comments and subsequent fields are skipped.
	}

	if !d.isCommentsRecursive {
		d.commentsDecoder.Continue()
	}

	if d.fieldCount <= 7 {
		return // DefaultSampleType and subsequent fields are skipped.
	}

	if !d.isDefaultSampleTypeRecursive {
		d.defaultSampleTypeDecoder.Continue()
	}

}

func (d *ProfileMetadataDecoder) Reset() {
	d.dropFramesDecoder.Reset()
	d.keepFramesDecoder.Reset()
	d.timeNanosDecoder.Reset()
	d.durationNanosDecoder.Reset()

	if !d.isPeriodTypeRecursive {
		d.periodTypeDecoder.Reset()
	}

	d.periodDecoder.Reset()

	if !d.isCommentsRecursive {
		d.commentsDecoder.Reset()
	}

	if !d.isDefaultSampleTypeRecursive {
		d.defaultSampleTypeDecoder.Reset()
	}

}

func (d *ProfileMetadataDecoder) Decode(dstPtr *ProfileMetadata) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedProfileMetadataDropFrames != 0 {
		// Field is changed and is present, decode it.
		err = d.dropFramesDecoder.Decode(&val.dropFrames)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedProfileMetadataKeepFrames != 0 {
		// Field is changed and is present, decode it.
		err = d.keepFramesDecoder.Decode(&val.keepFrames)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedProfileMetadataTimeNanos != 0 {
		// Field is changed and is present, decode it.
		err = d.timeNanosDecoder.Decode(&val.timeNanos)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedProfileMetadataDurationNanos != 0 {
		// Field is changed and is present, decode it.
		err = d.durationNanosDecoder.Decode(&val.durationNanos)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedProfileMetadataPeriodType != 0 {
		// Field is changed and is present, decode it.
		if val.periodType == nil {
			val.periodType = &SampleValueType{}
			val.periodType.init(&val.modifiedFields, fieldModifiedProfileMetadataPeriodType)
		}

		err = d.periodTypeDecoder.Decode(&val.periodType)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedProfileMetadataPeriod != 0 {
		// Field is changed and is present, decode it.
		err = d.periodDecoder.Decode(&val.period)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedProfileMetadataComments != 0 {
		// Field is changed and is present, decode it.
		err = d.commentsDecoder.Decode(&val.comments)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedProfileMetadataDefaultSampleType != 0 {
		// Field is changed and is present, decode it.
		if val.defaultSampleType == nil {
			val.defaultSampleType = &SampleValueType{}
			val.defaultSampleType.init(&val.modifiedFields, fieldModifiedProfileMetadataDefaultSampleType)
		}

		err = d.defaultSampleTypeDecoder.Decode(&val.defaultSampleType)
		if err != nil {
			return err
		}
	}

	return nil
}
