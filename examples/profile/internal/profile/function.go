// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"modernc.org/b/v2"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Function struct {
	name       string
	systemName string
	filename   string
	startLine  uint64

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const FunctionStructName = "Function"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedFunctionName = uint64(1 << iota)
	fieldModifiedFunctionSystemName
	fieldModifiedFunctionFilename
	fieldModifiedFunctionStartLine
)

// Init must be called once, before the Function is used.
func (s *Function) Init() {
	s.init(nil, 0)
}

func NewFunction() *Function {
	var s Function
	s.init(nil, 0)
	return &s
}

func (s *Function) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

}

func (s *Function) Name() string {
	return s.name
}

// SetName sets the value of Name field.
func (s *Function) SetName(v string) {
	if !pkg.StringEqual(s.name, v) {
		s.name = v
		s.markNameModified()
	}
}

func (s *Function) markNameModified() {
	s.modifiedFields.markModified(fieldModifiedFunctionName)
}

// IsNameModified returns true the value of Name field was modified since
// Function was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Function) IsNameModified() bool {
	return s.modifiedFields.mask&fieldModifiedFunctionName != 0
}

func (s *Function) SystemName() string {
	return s.systemName
}

// SetSystemName sets the value of SystemName field.
func (s *Function) SetSystemName(v string) {
	if !pkg.StringEqual(s.systemName, v) {
		s.systemName = v
		s.markSystemNameModified()
	}
}

func (s *Function) markSystemNameModified() {
	s.modifiedFields.markModified(fieldModifiedFunctionSystemName)
}

// IsSystemNameModified returns true the value of SystemName field was modified since
// Function was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Function) IsSystemNameModified() bool {
	return s.modifiedFields.mask&fieldModifiedFunctionSystemName != 0
}

func (s *Function) Filename() string {
	return s.filename
}

// SetFilename sets the value of Filename field.
func (s *Function) SetFilename(v string) {
	if !pkg.StringEqual(s.filename, v) {
		s.filename = v
		s.markFilenameModified()
	}
}

func (s *Function) markFilenameModified() {
	s.modifiedFields.markModified(fieldModifiedFunctionFilename)
}

// IsFilenameModified returns true the value of Filename field was modified since
// Function was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Function) IsFilenameModified() bool {
	return s.modifiedFields.mask&fieldModifiedFunctionFilename != 0
}

func (s *Function) StartLine() uint64 {
	return s.startLine
}

// SetStartLine sets the value of StartLine field.
func (s *Function) SetStartLine(v uint64) {
	if !pkg.Uint64Equal(s.startLine, v) {
		s.startLine = v
		s.markStartLineModified()
	}
}

func (s *Function) markStartLineModified() {
	s.modifiedFields.markModified(fieldModifiedFunctionStartLine)
}

// IsStartLineModified returns true the value of StartLine field was modified since
// Function was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Function) IsStartLineModified() bool {
	return s.modifiedFields.mask&fieldModifiedFunctionStartLine != 0
}

func (s *Function) markModifiedRecursively() {

	s.modifiedFields.mask =
		fieldModifiedFunctionName |
			fieldModifiedFunctionSystemName |
			fieldModifiedFunctionFilename |
			fieldModifiedFunctionStartLine | 0
}

func (s *Function) markUnmodifiedRecursively() {

	if s.IsNameModified() {
	}

	if s.IsSystemNameModified() {
	}

	if s.IsFilenameModified() {
	}

	if s.IsStartLineModified() {
	}

	s.modifiedFields.mask = 0
}

// markDiffModified marks fields in this struct modified if they differ from
// the corresponding fields in v.
func (s *Function) markDiffModified(v *Function) (modified bool) {
	if !pkg.StringEqual(s.name, v.name) {
		s.markNameModified()
		modified = true
	}

	if !pkg.StringEqual(s.systemName, v.systemName) {
		s.markSystemNameModified()
		modified = true
	}

	if !pkg.StringEqual(s.filename, v.filename) {
		s.markFilenameModified()
		modified = true
	}

	if !pkg.Uint64Equal(s.startLine, v.startLine) {
		s.markStartLineModified()
		modified = true
	}

	return modified
}

func (s *Function) Clone() *Function {
	return &Function{
		name:       s.name,
		systemName: s.systemName,
		filename:   s.filename,
		startLine:  s.startLine,
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Function) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		0
}

func copyFunction(dst *Function, src *Function) {
	dst.SetName(src.name)
	dst.SetSystemName(src.systemName)
	dst.SetFilename(src.filename)
	dst.SetStartLine(src.startLine)
}

// CopyFrom() performs a deep copy from src.
func (s *Function) CopyFrom(src *Function) {
	copyFunction(s, src)
}

func (s *Function) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Function) markUnmodified() {
	s.modifiedFields.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *Function) mutateRandom(random *rand.Rand) {
	const fieldCount = max(4, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
	if random.IntN(fieldCount) == 0 {
		s.SetName(pkg.StringRandom(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetSystemName(pkg.StringRandom(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetFilename(pkg.StringRandom(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetStartLine(pkg.Uint64Random(random))
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *Function) IsEqual(right *Function) bool {
	// Compare Name field.
	if !pkg.StringEqual(s.name, right.name) {
		return false
	}
	// Compare SystemName field.
	if !pkg.StringEqual(s.systemName, right.systemName) {
		return false
	}
	// Compare Filename field.
	if !pkg.StringEqual(s.filename, right.filename) {
		return false
	}
	// Compare StartLine field.
	if !pkg.Uint64Equal(s.startLine, right.startLine) {
		return false
	}

	return true
}

func FunctionEqual(left, right *Function) bool {
	return left.IsEqual(right)
}

// CmpFunction performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpFunction(left, right *Function) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Name field.
	if c := strings.Compare(left.name, right.name); c != 0 {
		return c
	}

	// Compare SystemName field.
	if c := strings.Compare(left.systemName, right.systemName); c != 0 {
		return c
	}

	// Compare Filename field.
	if c := strings.Compare(left.filename, right.filename); c != 0 {
		return c
	}

	// Compare StartLine field.
	if c := pkg.Uint64Compare(left.startLine, right.startLine); c != 0 {
		return c
	}

	return 0
}

// FunctionEncoder implements encoding of Function
type FunctionEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	nameEncoder encoders.StringEncoder

	systemNameEncoder encoders.StringEncoder

	filenameEncoder encoders.StringEncoder

	startLineEncoder encoders.Uint64Encoder

	dict *FunctionEncoderDict

	keepFieldMask uint64
	fieldCount    uint
}

type FunctionEntry struct {
	refNum uint64
	val    *Function
}

// FunctionEncoderDict is the dictionary used by FunctionEncoder
type FunctionEncoderDict struct {
	dict    b.Tree[*Function, FunctionEntry]
	limiter *pkg.SizeLimiter
}

func (d *FunctionEncoderDict) Init(limiter *pkg.SizeLimiter) {
	d.dict = *b.TreeNew[*Function, FunctionEntry](CmpFunction)
	d.dict.Set(nil, FunctionEntry{}) // nil Function is RefNum 0
	d.limiter = limiter
}

func (d *FunctionEncoderDict) Reset() {
	d.dict.Clear()
	d.dict.Set(nil, FunctionEntry{}) // nil Function is RefNum 0
}

func (e *FunctionEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.FunctionEncoder != nil {
		panic("cannot initialize FunctionEncoder: already initialized")
	}
	state.FunctionEncoder = e
	defer func() { state.FunctionEncoder = nil }()

	e.limiter = &state.limiter
	e.dict = &state.Function

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Function")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Function")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 4
		e.keepFieldMask = ^uint64(0)
	}

	var err error

	// Init encoder for Name field.
	if e.fieldCount <= 0 {
		// Name and all subsequent fields are skipped.
		return nil
	}
	err = e.nameEncoder.Init(&state.FunctionName, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for SystemName field.
	if e.fieldCount <= 1 {
		// SystemName and all subsequent fields are skipped.
		return nil
	}
	err = e.systemNameEncoder.Init(&state.SystemName, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Filename field.
	if e.fieldCount <= 2 {
		// Filename and all subsequent fields are skipped.
		return nil
	}
	err = e.filenameEncoder.Init(&state.Filename, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for StartLine field.
	if e.fieldCount <= 3 {
		// StartLine and all subsequent fields are skipped.
		return nil
	}
	err = e.startLineEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *FunctionEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.nameEncoder.Reset()
	e.systemNameEncoder.Reset()
	e.filenameEncoder.Reset()
	e.startLineEncoder.Reset()
}

// Encode encodes val into buf
func (e *FunctionEncoder) Encode(val *Function) {
	var bitCount uint

	// Check if the Function exists in the dictionary.
	entry, exists := e.dict.dict.Get(val)
	if exists {
		// The Function exists, we will reference it.
		// Indicate a RefNum follows.
		e.buf.WriteBit(0)
		// Encode refNum.
		bitCount = e.buf.WriteUvarintCompact(entry.refNum)

		// Account written bits in the limiter.
		e.limiter.AddFrameBits(1 + bitCount)

		// Mark all fields non-modified recursively so that next Encode() correctly
		// encodes only fields that change after this.
		val.markUnmodifiedRecursively()
		return
	}

	// The Function does not exist in the dictionary. Add it to the dictionary.
	valInDict := val.Clone()
	entry = FunctionEntry{refNum: uint64(e.dict.dict.Len()), val: valInDict}
	e.dict.dict.Set(valInDict, entry)
	e.dict.limiter.AddDictElemSize(valInDict.byteSize())

	// Indicate that an encoded Function follows.
	e.buf.WriteBit(1)
	bitCount += 1
	// TODO: optimize and merge WriteBit with the following WriteBits.
	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedFunctionName |
				fieldModifiedFunctionSystemName |
				fieldModifiedFunctionFilename |
				fieldModifiedFunctionStartLine | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedFunctionName != 0 {
		// Encode Name
		e.nameEncoder.Encode(val.name)
	}

	if fieldMask&fieldModifiedFunctionSystemName != 0 {
		// Encode SystemName
		e.systemNameEncoder.Encode(val.systemName)
	}

	if fieldMask&fieldModifiedFunctionFilename != 0 {
		// Encode Filename
		e.filenameEncoder.Encode(val.filename)
	}

	if fieldMask&fieldModifiedFunctionStartLine != 0 {
		// Encode StartLine
		e.startLineEncoder.Encode(val.startLine)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *FunctionEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Name field.
	if e.fieldCount <= 0 {
		return // Name and subsequent fields are skipped.
	}

	e.nameEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect SystemName field.
	if e.fieldCount <= 1 {
		return // SystemName and subsequent fields are skipped.
	}

	e.systemNameEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Filename field.
	if e.fieldCount <= 2 {
		return // Filename and subsequent fields are skipped.
	}

	e.filenameEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect StartLine field.
	if e.fieldCount <= 3 {
		return // StartLine and subsequent fields are skipped.
	}

	e.startLineEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// FunctionDecoder implements decoding of Function
type FunctionDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Function
	lastVal    Function
	fieldCount uint

	nameDecoder encoders.StringDecoder

	systemNameDecoder encoders.StringDecoder

	filenameDecoder encoders.StringDecoder

	startLineDecoder encoders.Uint64Decoder

	dict *FunctionDecoderDict
}

// Init is called once in the lifetime of the stream.
func (d *FunctionDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.FunctionDecoder != nil {
		panic("cannot initialize FunctionDecoder: already initialized")
	}
	state.FunctionDecoder = d
	defer func() { state.FunctionDecoder = nil }()

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Function")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Function")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 4
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal
	d.dict = &state.Function

	var err error

	if d.fieldCount <= 0 {
		return nil // Name and subsequent fields are skipped.
	}
	err = d.nameDecoder.Init(&state.FunctionName, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // SystemName and subsequent fields are skipped.
	}
	err = d.systemNameDecoder.Init(&state.SystemName, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Filename and subsequent fields are skipped.
	}
	err = d.filenameDecoder.Init(&state.Filename, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // StartLine and subsequent fields are skipped.
	}
	err = d.startLineDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *FunctionDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Name and subsequent fields are skipped.
	}
	d.nameDecoder.Continue()
	if d.fieldCount <= 1 {
		return // SystemName and subsequent fields are skipped.
	}
	d.systemNameDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Filename and subsequent fields are skipped.
	}
	d.filenameDecoder.Continue()
	if d.fieldCount <= 3 {
		return // StartLine and subsequent fields are skipped.
	}
	d.startLineDecoder.Continue()
}

func (d *FunctionDecoder) Reset() {
	d.nameDecoder.Reset()
	d.systemNameDecoder.Reset()
	d.filenameDecoder.Reset()
	d.startLineDecoder.Reset()
}

func (d *FunctionDecoder) Decode(dstPtr **Function) error {
	// Check if the Function exists in the dictionary.
	dictFlag := d.buf.ReadBit()
	if dictFlag == 0 {
		refNum := d.buf.ReadUvarintCompact()
		if refNum >= uint64(len(d.dict.dict)) {
			return pkg.ErrInvalidRefNum
		}
		d.lastValPtr = d.dict.dict[refNum]
		*dstPtr = d.lastValPtr
		return nil
	}

	// lastValPtr here is pointing to a element in the dictionary. We are not allowed
	// to modify it. Make a clone of it and decode into the clone.
	val := d.lastValPtr.Clone()
	d.lastValPtr = val
	*dstPtr = val

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedFunctionName != 0 {
		// Field is changed and is present, decode it.
		err = d.nameDecoder.Decode(&val.name)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedFunctionSystemName != 0 {
		// Field is changed and is present, decode it.
		err = d.systemNameDecoder.Decode(&val.systemName)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedFunctionFilename != 0 {
		// Field is changed and is present, decode it.
		err = d.filenameDecoder.Decode(&val.filename)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedFunctionStartLine != 0 {
		// Field is changed and is present, decode it.
		err = d.startLineDecoder.Decode(&val.startLine)
		if err != nil {
			return err
		}
	}

	d.dict.dict = append(d.dict.dict, val)

	return nil
}

// FunctionDecoderDict is the dictionary used by FunctionDecoder
type FunctionDecoderDict struct {
	dict []*Function
}

func (d *FunctionDecoderDict) Init() {
	d.dict = d.dict[:0]
	d.dict = append(d.dict, nil) // nil Function is RefNum 0
}

// Reset the dictionary to initial state. Used when a frame is
// started with RestartDictionaries flag.
func (d *FunctionDecoderDict) Reset() {
	d.Init()
}
