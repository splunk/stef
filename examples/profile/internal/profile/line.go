// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Line struct {
	function *Function
	line     uint64
	column   uint64

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const LineStructName = "Line"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedLineFunction = uint64(1 << iota)
	fieldModifiedLineLine
	fieldModifiedLineColumn
)

// Init must be called once, before the Line is used.
func (s *Line) Init() {
	s.init(nil, 0)
}

func NewLine() *Line {
	var s Line
	s.init(nil, 0)
	return &s
}

func (s *Line) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.function = &Function{}
	s.function.init(&s.modifiedFields, fieldModifiedLineFunction)
}

func (s *Line) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.function = allocators.Function.Alloc()
	s.function.initAlloc(&s.modifiedFields, fieldModifiedLineFunction, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *Line) reset() {
	if s.function != nil {
		s.function.reset()
	}
	s.line = 0
	s.column = 0
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *Line) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields
	s.function.fixParent(&s.modifiedFields)
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing by pointer without cloning,
// which can improve encoding performance.
func (s *Line) Freeze() {
	s.modifiedFields.freeze()
}

func (s *Line) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *Line) Function() *Function {
	return s.function
}

// SetFunction sets the value of Function field.
func (s *Line) SetFunction(v *Function) {
	if v.canBeShared() {
		// v can be shared by pointer. Compute its difference from current function
		if v.computeDiff(s.function) {
			// It is different. Update to it.
			s.function = v
			s.modifiedFields.markModified(fieldModifiedLineFunction)
		}
	} else {
		s.function.CopyFrom(v)
	}
}

func (s *Line) markFunctionModified() {
	s.modifiedFields.markModified(fieldModifiedLineFunction)
}

// IsFunctionModified returns true the value of Function field was modified since
// Line was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Line) IsFunctionModified() bool {
	return s.modifiedFields.mask&fieldModifiedLineFunction != 0
}

func (s *Line) Line() uint64 {
	return s.line
}

// SetLine sets the value of Line field.
func (s *Line) SetLine(v uint64) {
	if s.line != v {
		s.line = v
		s.modifiedFields.markModified(fieldModifiedLineLine)
	}
}

func (s *Line) markLineModified() {
	s.modifiedFields.markModified(fieldModifiedLineLine)
}

// IsLineModified returns true the value of Line field was modified since
// Line was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Line) IsLineModified() bool {
	return s.modifiedFields.mask&fieldModifiedLineLine != 0
}

func (s *Line) Column() uint64 {
	return s.column
}

// SetColumn sets the value of Column field.
func (s *Line) SetColumn(v uint64) {
	if s.column != v {
		s.column = v
		s.modifiedFields.markModified(fieldModifiedLineColumn)
	}
}

func (s *Line) markColumnModified() {
	s.modifiedFields.markModified(fieldModifiedLineColumn)
}

// IsColumnModified returns true the value of Column field was modified since
// Line was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Line) IsColumnModified() bool {
	return s.modifiedFields.mask&fieldModifiedLineColumn != 0
}

func (s *Line) setModifiedRecursively() {
	s.function.setModifiedRecursively()
	s.modifiedFields.mask =
		fieldModifiedLineFunction |
			fieldModifiedLineLine |
			fieldModifiedLineColumn | 0
}

func (s *Line) setUnmodifiedRecursively() {
	if s.IsFunctionModified() {
		s.function.setUnmodifiedRecursively()
	}
	s.modifiedFields.mask = 0
}

// computeDiff compares s and val and returns true if they differ.
// All fields that are different in s will be marked as modified.
func (s *Line) computeDiff(val *Line) (ret bool) {
	// Compare Function field.
	if s.function.computeDiff(val.function) {
		s.modifiedFields.setModified(fieldModifiedLineFunction)
		ret = true
	}
	// Compare Line field.
	if s.line != val.line {
		s.modifiedFields.setModified(fieldModifiedLineLine)
		ret = true
	}
	// Compare Column field.
	if s.column != val.column {
		s.modifiedFields.setModified(fieldModifiedLineColumn)
		ret = true
	}
	return ret
}

// canBeShared returns true if s is safe to share by pointer without cloning (for example if s is frozen).
func (s *Line) canBeShared() bool {
	return false
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *Line) CloneShared(allocators *Allocators) Line {
	return s.Clone(allocators)
}

func (s *Line) Clone(allocators *Allocators) Line {
	c := Line{
		function: s.function.CloneShared(allocators),
		line:     s.line,
		column:   s.column,
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Line) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.function.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copyLine(dst *Line, src *Line) {

	if src.function.canBeShared() {
		if src.function.computeDiff(dst.function) {
			dst.function = src.function
			dst.markFunctionModified()
		}
	} else {
		copyFunction(dst.function, src.function)
	}
	dst.SetLine(src.line)
	dst.SetColumn(src.column)
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewLine(dst *Line, src *Line, allocators *Allocators) {

	if src.function.canBeShared() {
		dst.function = src.function
	} else {
		dst.function = allocators.Function.Alloc()
		dst.function.init(&dst.modifiedFields, fieldModifiedLineFunction)
		copyToNewFunction(dst.function, src.function, allocators)
	}

	dst.SetLine(src.line)
	dst.SetColumn(src.column)
}

// CopyFrom() performs a deep copy from src.
func (s *Line) CopyFrom(src *Line) {
	copyLine(s, src)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *Line) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("Line")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "Line", err))
	}

	const randRange = max(3, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Function and all subsequent fields are skipped.
	}
	// Maybe mutate Function
	if random.IntN(randRange) == 0 {
		if random.IntN(10) == 0 {
			// Freeze and replace with a clone to test frozen object dictionary handling.
			s.function.Freeze()
			if random.IntN(10) == 0 {
				// Reset to brand new object once in a while to test the code path
				// where a dict-based is not mutated, but created from scratch.
				s.function = new(Function)
				s.function.init(&s.modifiedFields, fieldModifiedLineFunction)
			} else {
				s.function = s.function.Clone(&Allocators{})
			}
		}

		s.function.mutateRandom(random, schem)
	}
	if fieldCount <= 1 {
		return // Line and all subsequent fields are skipped.
	}
	// Maybe mutate Line
	if random.IntN(randRange) == 0 {
		s.SetLine(pkg.Uint64Random(random))
	}
	if fieldCount <= 2 {
		return // Column and all subsequent fields are skipped.
	}
	// Maybe mutate Column
	if random.IntN(randRange) == 0 {
		s.SetColumn(pkg.Uint64Random(random))
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *Line) IsEqual(right *Line) bool {
	// Compare Function field.
	if !s.function.IsEqual(right.function) {
		return false
	}
	// Compare Line field.
	if !pkg.Uint64Equal(s.line, right.line) {
		return false
	}
	// Compare Column field.
	if !pkg.Uint64Equal(s.column, right.column) {
		return false
	}

	return true
}

func LineEqual(left, right *Line) bool {
	return left.IsEqual(right)
}

// CmpLine performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpLine(left, right *Line) int {
	// Compare Function field.
	if c := CmpFunction(left.function, right.function); c != 0 {
		return c
	}
	// Compare Line field.
	if c := pkg.Uint64Compare(left.line, right.line); c != 0 {
		return c
	}
	// Compare Column field.
	if c := pkg.Uint64Compare(left.column, right.column); c != 0 {
		return c
	}
	return 0
}

// LineEncoder implements encoding of Line
type LineEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to a mask to force the next encoding operation
	// write the fields, whether they are modified or no. This is used after frame
	// restarts so that the data can be decoded from the frame start.
	forceModifiedFields uint64

	functionEncoder     *FunctionEncoder
	isFunctionRecursive bool // Indicates Function field's type is recursive.
	lineEncoder         encoders.Uint64Encoder
	columnEncoder       encoders.Uint64Encoder

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *LineEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.LineEncoder != nil {
		panic("cannot initialize LineEncoder: already initialized")
	}
	state.LineEncoder = e
	defer func() { state.LineEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.LineFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Line", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Function field.
	if e.fieldCount <= 0 {
		return nil // Function and all subsequent fields are skipped.
	}
	if state.FunctionEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.functionEncoder = state.FunctionEncoder
		e.isFunctionRecursive = true
	} else {
		e.functionEncoder = new(FunctionEncoder)
		err = e.functionEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Line field.
	if e.fieldCount <= 1 {
		return nil // Line and all subsequent fields are skipped.
	}
	err = e.lineEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Column field.
	if e.fieldCount <= 2 {
		return nil // Column and all subsequent fields are skipped.
	}
	err = e.columnEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *LineEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = e.keepFieldMask

	if e.fieldCount <= 0 {
		return // Function and all subsequent fields are skipped.
	}
	if !e.isFunctionRecursive {
		e.functionEncoder.Reset()
	}
	if e.fieldCount <= 1 {
		return // Line and all subsequent fields are skipped.
	}
	e.lineEncoder.Reset()
	if e.fieldCount <= 2 {
		return // Column and all subsequent fields are skipped.
	}
	e.columnEncoder.Reset()
}

// Encode encodes val into buf
func (e *LineEncoder) Encode(val *Line) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	fieldMask |= e.forceModifiedFields
	e.forceModifiedFields = 0

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedLineFunction != 0 {
		// Encode Function
		e.functionEncoder.Encode(val.function)
	}

	if fieldMask&fieldModifiedLineLine != 0 {
		// Encode Line
		e.lineEncoder.Encode(val.line)
	}

	if fieldMask&fieldModifiedLineColumn != 0 {
		// Encode Column
		e.columnEncoder.Encode(val.column)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *LineEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0
	// Collect Function field.
	if e.fieldCount <= 0 {
		return // Function and subsequent fields are skipped.
	}
	if !e.isFunctionRecursive {
		e.functionEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
	// Collect Line field.
	if e.fieldCount <= 1 {
		return // Line and subsequent fields are skipped.
	}
	e.lineEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
	// Collect Column field.
	if e.fieldCount <= 2 {
		return // Column and subsequent fields are skipped.
	}
	e.columnEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// LineDecoder implements decoding of Line
type LineDecoder struct {
	buf                 pkg.BitsReader
	column              *pkg.ReadableColumn
	fieldCount          uint
	functionDecoder     *FunctionDecoder
	isFunctionRecursive bool
	lineDecoder         encoders.Uint64Decoder

	columnDecoder encoders.Uint64Decoder

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *LineDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.LineDecoder != nil {
		panic("cannot initialize LineDecoder: already initialized")
	}
	state.LineDecoder = d
	defer func() { state.LineDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.LineFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Line", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Function and subsequent fields are skipped.
	}
	if state.FunctionDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.functionDecoder = state.FunctionDecoder
		d.isFunctionRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.functionDecoder = new(FunctionDecoder)
		err = d.functionDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Line and subsequent fields are skipped.
	}
	err = d.lineDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Column and subsequent fields are skipped.
	}
	err = d.columnDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *LineDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Function and subsequent fields are skipped.
	}

	if !d.isFunctionRecursive {
		d.functionDecoder.Continue()
	}

	if d.fieldCount <= 1 {
		return // Line and subsequent fields are skipped.
	}
	d.lineDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Column and subsequent fields are skipped.
	}
	d.columnDecoder.Continue()
}

func (d *LineDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Function and all subsequent fields are skipped.
	}

	if !d.isFunctionRecursive {
		d.functionDecoder.Reset()
	}

	if d.fieldCount <= 1 {
		return // Line and all subsequent fields are skipped.
	}
	d.lineDecoder.Reset()
	if d.fieldCount <= 2 {
		return // Column and all subsequent fields are skipped.
	}
	d.columnDecoder.Reset()
}

func (d *LineDecoder) Decode(dstPtr *Line) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedLineFunction != 0 {
		// Field is changed and is present, decode it.
		if val.function == nil {
			val.function = d.allocators.Function.Alloc()
			val.function.init(&val.modifiedFields, fieldModifiedLineFunction)
		}

		err = d.functionDecoder.Decode(&val.function)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedLineLine != 0 {
		// Field is changed and is present, decode it.
		err = d.lineDecoder.Decode(&val.line)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedLineColumn != 0 {
		// Field is changed and is present, decode it.
		err = d.columnDecoder.Decode(&val.column)
		if err != nil {
			return err
		}
	}

	return nil
}

// LineAllocator implements a custom allocator for Line.
// It maintains a pool of pre-allocated Line and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type LineAllocator struct {
	pool []Line
	ofs  int
}

// Alloc returns the next available Line from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *LineAllocator) Alloc() *Line {
	if a.ofs < len(a.pool) {
		// Get the next available Line from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *LineAllocator) prealloc() *Line {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]Line, newLen)
	a.ofs = 1
	return &a.pool[0]
}
