// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Line struct {
	function *Function
	line     uint64
	column   uint64

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const LineStructName = "Line"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedLineFunction = uint64(1 << iota)
	fieldModifiedLineLine
	fieldModifiedLineColumn
)

// Init must be called once, before the Line is used.
func (s *Line) Init() {
	s.init(nil, 0)
}

func NewLine() *Line {
	var s Line
	s.init(nil, 0)
	return &s
}

func (s *Line) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.function = &Function{}
	s.function.init(&s.modifiedFields, fieldModifiedLineFunction)
}

func (s *Line) Function() *Function {
	return s.function
}

// IsFunctionModified returns true the value of Function field was modified since
// Line was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Line) IsFunctionModified() bool {
	return s.modifiedFields.mask&fieldModifiedLineFunction != 0
}

func (s *Line) Line() uint64 {
	return s.line
}

// SetLine sets the value of Line field.
func (s *Line) SetLine(v uint64) {
	if !pkg.Uint64Equal(s.line, v) {
		s.line = v
		s.markLineModified()
	}
}

func (s *Line) markLineModified() {
	s.modifiedFields.markModified(fieldModifiedLineLine)
}

// IsLineModified returns true the value of Line field was modified since
// Line was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Line) IsLineModified() bool {
	return s.modifiedFields.mask&fieldModifiedLineLine != 0
}

func (s *Line) Column() uint64 {
	return s.column
}

// SetColumn sets the value of Column field.
func (s *Line) SetColumn(v uint64) {
	if !pkg.Uint64Equal(s.column, v) {
		s.column = v
		s.markColumnModified()
	}
}

func (s *Line) markColumnModified() {
	s.modifiedFields.markModified(fieldModifiedLineColumn)
}

// IsColumnModified returns true the value of Column field was modified since
// Line was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Line) IsColumnModified() bool {
	return s.modifiedFields.mask&fieldModifiedLineColumn != 0
}

func (s *Line) markModifiedRecursively() {

	s.function.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedLineFunction |
			fieldModifiedLineLine |
			fieldModifiedLineColumn | 0
}

func (s *Line) markUnmodifiedRecursively() {

	if s.IsFunctionModified() {
		s.function.markUnmodifiedRecursively()
	}

	if s.IsLineModified() {
	}

	if s.IsColumnModified() {
	}

	s.modifiedFields.mask = 0
}

// markDiffModified marks fields in this struct modified if they differ from
// the corresponding fields in v.
func (s *Line) markDiffModified(v *Line) (modified bool) {
	if s.function.markDiffModified(v.function) {
		s.modifiedFields.markModified(fieldModifiedLineFunction)
		modified = true
	}

	if !pkg.Uint64Equal(s.line, v.line) {
		s.markLineModified()
		modified = true
	}

	if !pkg.Uint64Equal(s.column, v.column) {
		s.markColumnModified()
		modified = true
	}

	return modified
}

func (s *Line) Clone() Line {
	return Line{
		function: s.function.Clone(),
		line:     s.line,
		column:   s.column,
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Line) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.function.byteSize() + 0
}

func copyLine(dst *Line, src *Line) {
	if src.function != nil {
		if dst.function == nil {
			dst.function = &Function{}
			dst.function.init(&dst.modifiedFields, fieldModifiedLineFunction)
		}
		copyFunction(dst.function, src.function)
	}
	dst.SetLine(src.line)
	dst.SetColumn(src.column)
}

// CopyFrom() performs a deep copy from src.
func (s *Line) CopyFrom(src *Line) {
	copyLine(s, src)
}

func (s *Line) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Line) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.function.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *Line) mutateRandom(random *rand.Rand) {
	const fieldCount = max(3, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
	if random.IntN(fieldCount) == 0 {
		s.function.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.SetLine(pkg.Uint64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.SetColumn(pkg.Uint64Random(random))
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *Line) IsEqual(right *Line) bool {
	// Compare Function field.
	if !s.function.IsEqual(right.function) {
		return false
	}
	// Compare Line field.
	if !pkg.Uint64Equal(s.line, right.line) {
		return false
	}
	// Compare Column field.
	if !pkg.Uint64Equal(s.column, right.column) {
		return false
	}

	return true
}

func LineEqual(left, right *Line) bool {
	return left.IsEqual(right)
}

// CmpLine performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpLine(left, right *Line) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Function field.
	if c := CmpFunction(left.function, right.function); c != 0 {
		return c
	}

	// Compare Line field.
	if c := pkg.Uint64Compare(left.line, right.line); c != 0 {
		return c
	}

	// Compare Column field.
	if c := pkg.Uint64Compare(left.column, right.column); c != 0 {
		return c
	}

	return 0
}

// LineEncoder implements encoding of Line
type LineEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	functionEncoder     *FunctionEncoder
	isFunctionRecursive bool // Indicates Function field's type is recursive.

	lineEncoder encoders.Uint64Encoder

	columnEncoder encoders.Uint64Encoder

	keepFieldMask uint64
	fieldCount    uint
}

func (e *LineEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.LineEncoder != nil {
		panic("cannot initialize LineEncoder: already initialized")
	}
	state.LineEncoder = e
	defer func() { state.LineEncoder = nil }()

	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Line")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Line")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 3
		e.keepFieldMask = ^uint64(0)
	}

	var err error

	// Init encoder for Function field.
	if e.fieldCount <= 0 {
		// Function and all subsequent fields are skipped.
		return nil
	}
	if state.FunctionEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.functionEncoder = state.FunctionEncoder
		e.isFunctionRecursive = true
	} else {
		e.functionEncoder = new(FunctionEncoder)
		err = e.functionEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Line field.
	if e.fieldCount <= 1 {
		// Line and all subsequent fields are skipped.
		return nil
	}
	err = e.lineEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Column field.
	if e.fieldCount <= 2 {
		// Column and all subsequent fields are skipped.
		return nil
	}
	err = e.columnEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *LineEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if !e.isFunctionRecursive {
		e.functionEncoder.Reset()
	}

	e.lineEncoder.Reset()
	e.columnEncoder.Reset()
}

// Encode encodes val into buf
func (e *LineEncoder) Encode(val *Line) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedLineFunction |
				fieldModifiedLineLine |
				fieldModifiedLineColumn | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedLineFunction != 0 {
		// Encode Function
		e.functionEncoder.Encode(val.function)
	}

	if fieldMask&fieldModifiedLineLine != 0 {
		// Encode Line
		e.lineEncoder.Encode(val.line)
	}

	if fieldMask&fieldModifiedLineColumn != 0 {
		// Encode Column
		e.columnEncoder.Encode(val.column)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *LineEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Function field.
	if e.fieldCount <= 0 {
		return // Function and subsequent fields are skipped.
	}
	if !e.isFunctionRecursive {
		e.functionEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Line field.
	if e.fieldCount <= 1 {
		return // Line and subsequent fields are skipped.
	}

	e.lineEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Column field.
	if e.fieldCount <= 2 {
		return // Column and subsequent fields are skipped.
	}

	e.columnEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// LineDecoder implements decoding of Line
type LineDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Line
	lastVal    Line
	fieldCount uint

	functionDecoder     *FunctionDecoder
	isFunctionRecursive bool

	lineDecoder encoders.Uint64Decoder

	columnDecoder encoders.Uint64Decoder
}

// Init is called once in the lifetime of the stream.
func (d *LineDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.LineDecoder != nil {
		panic("cannot initialize LineDecoder: already initialized")
	}
	state.LineDecoder = d
	defer func() { state.LineDecoder = nil }()

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Line")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Line")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 3
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // Function and subsequent fields are skipped.
	}
	if state.FunctionDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.functionDecoder = state.FunctionDecoder
		d.isFunctionRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.functionDecoder = new(FunctionDecoder)
		err = d.functionDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Line and subsequent fields are skipped.
	}
	err = d.lineDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Column and subsequent fields are skipped.
	}
	err = d.columnDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *LineDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Function and subsequent fields are skipped.
	}

	if !d.isFunctionRecursive {
		d.functionDecoder.Continue()
	}

	if d.fieldCount <= 1 {
		return // Line and subsequent fields are skipped.
	}
	d.lineDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Column and subsequent fields are skipped.
	}
	d.columnDecoder.Continue()
}

func (d *LineDecoder) Reset() {

	if !d.isFunctionRecursive {
		d.functionDecoder.Reset()
	}

	d.lineDecoder.Reset()
	d.columnDecoder.Reset()
}

func (d *LineDecoder) Decode(dstPtr *Line) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedLineFunction != 0 {
		// Field is changed and is present, decode it.
		if val.function == nil {
			val.function = &Function{}
			val.function.init(&val.modifiedFields, fieldModifiedLineFunction)
		}

		err = d.functionDecoder.Decode(&val.function)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedLineLine != 0 {
		// Field is changed and is present, decode it.
		err = d.lineDecoder.Decode(&val.line)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedLineColumn != 0 {
		// Field is changed and is present, decode it.
		err = d.columnDecoder.Decode(&val.column)
		if err != nil {
			return err
		}
	}

	return nil
}
