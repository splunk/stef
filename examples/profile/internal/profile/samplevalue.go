// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type SampleValue struct {
	val   int64
	type_ *SampleValueType

	allocators *Allocators

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const SampleValueStructName = "SampleValue"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedSampleValueVal = uint64(1 << iota)
	fieldModifiedSampleValueType
)

// Init must be called once, before the SampleValue is used.
func (s *SampleValue) Init(allocators *Allocators) {
	s.init(nil, 0, allocators)
}

func NewSampleValue(allocators *Allocators) *SampleValue {
	var s SampleValue
	s.init(nil, 0, allocators)
	return &s
}

func (s *SampleValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit
	s.allocators = allocators

	s.type_ = allocators.SampleValueType.Alloc()
	s.type_.init(&s.modifiedFields, fieldModifiedSampleValueType, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *SampleValue) reset() {

	s.val = 0
	if s.type_ != nil {
		s.type_.reset()
	}
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *SampleValue) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields

	s.type_.fixParent(&s.modifiedFields)
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing without cloning
// which can improve performance.
func (s *SampleValue) Freeze() {
	s.modifiedFields.freeze()
}

func (s *SampleValue) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *SampleValue) Val() int64 {
	return s.val
}

// SetVal sets the value of Val field.
func (s *SampleValue) SetVal(v int64) {
	if s.val != v {
		s.val = v
		s.markValModified()
	}
}

func (s *SampleValue) markValModified() {
	s.modifiedFields.markModified(fieldModifiedSampleValueVal)
}

// IsValModified returns true the value of Val field was modified since
// SampleValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *SampleValue) IsValModified() bool {
	return s.modifiedFields.mask&fieldModifiedSampleValueVal != 0
}

func (s *SampleValue) Type() *SampleValueType {
	return s.type_
}

// SetType sets the value of Type field.
func (s *SampleValue) SetType(v *SampleValueType) {
	if !s.type_.IsEqual(v) {
		s.type_ = v
		s.markTypeModified()
	}
}

func (s *SampleValue) markTypeModified() {
	s.modifiedFields.markModified(fieldModifiedSampleValueType)
}

// IsTypeModified returns true the value of Type field was modified since
// SampleValue was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *SampleValue) IsTypeModified() bool {
	return s.modifiedFields.mask&fieldModifiedSampleValueType != 0
}

func (s *SampleValue) markModifiedRecursively() {

	s.type_.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedSampleValueVal |
			fieldModifiedSampleValueType | 0
}

func (s *SampleValue) markUnmodifiedRecursively() {

	if s.IsValModified() {
	}

	if s.IsTypeModified() {
		s.type_.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// canBeShared returns true if s is safe to share without cloning (for example if s is frozen).
func (s *SampleValue) canBeShared() bool {
	return s.isFrozen()
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *SampleValue) CloneShared() SampleValue {

	return s.Clone()
}

func (s *SampleValue) Clone() SampleValue {

	c := SampleValue{

		allocators: s.allocators,
		val:        s.val,
		type_:      s.type_.CloneShared(),
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *SampleValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.type_.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copySampleValue(dst *SampleValue, src *SampleValue) *SampleValue {

	dst.SetVal(src.val)
	if src.type_ != nil {
		if src.type_.canBeShared() {
			dst.type_ = src.type_
		} else {
			if dst.type_ == nil {
				dst.type_ = dst.allocators.SampleValueType.Alloc()
				dst.type_.init(&dst.modifiedFields, fieldModifiedSampleValueType, dst.allocators)
			}
			copySampleValueType(dst.type_, src.type_)
		}
	} else {
		dst.type_ = nil
	}
	return dst
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewSampleValue(dst *SampleValue, src *SampleValue) *SampleValue {

	dst.SetVal(src.val)

	if src.type_ != nil {
		if src.type_.canBeShared() {
			dst.type_ = src.type_
		} else {
			dst.type_ = dst.allocators.SampleValueType.Alloc()
			dst.type_.init(&dst.modifiedFields, fieldModifiedSampleValueType, dst.allocators)
			copyToNewSampleValueType(dst.type_, src.type_)
		}
	}
	return dst
}

// CopyFrom() performs a deep copy from src.
func (s *SampleValue) CopyFrom(src *SampleValue) {
	copySampleValue(s, src)
}

func (s *SampleValue) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *SampleValue) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("SampleValue")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "SampleValue", err))
	}

	const randRange = max(2, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Val and all subsequent fields are skipped.
	}
	// Maybe mutate Val
	if random.IntN(randRange) == 0 {
		s.SetVal(pkg.Int64Random(random))
	}
	if fieldCount <= 1 {
		return // Type and all subsequent fields are skipped.
	}
	// Maybe mutate Type
	if random.IntN(randRange) == 0 {
		s.type_.mutateRandom(random, schem)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *SampleValue) IsEqual(right *SampleValue) bool {
	// Compare Val field.
	if !pkg.Int64Equal(s.val, right.val) {
		return false
	}
	// Compare Type field.
	if !s.type_.IsEqual(right.type_) {
		return false
	}

	return true
}

func SampleValueEqual(left, right *SampleValue) bool {
	return left.IsEqual(right)
}

// CmpSampleValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpSampleValue(left, right *SampleValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Val field.
	if c := pkg.Int64Compare(left.val, right.val); c != 0 {
		return c
	}

	// Compare Type field.
	if c := CmpSampleValueType(left.type_, right.type_); c != 0 {
		return c
	}

	return 0
}

// SampleValueEncoder implements encoding of SampleValue
type SampleValueEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	valEncoder encoders.Int64Encoder

	type_Encoder    *SampleValueTypeEncoder
	isTypeRecursive bool // Indicates Type field's type is recursive.

	allocators *Allocators

	keepFieldMask uint64
	fieldCount    uint
}

func (e *SampleValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.SampleValueEncoder != nil {
		panic("cannot initialize SampleValueEncoder: already initialized")
	}
	state.SampleValueEncoder = e
	defer func() { state.SampleValueEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.SampleValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "SampleValue", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Val field.
	if e.fieldCount <= 0 {
		return nil // Val and all subsequent fields are skipped.
	}
	err = e.valEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Type field.
	if e.fieldCount <= 1 {
		return nil // Type and all subsequent fields are skipped.
	}
	if state.SampleValueTypeEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.type_Encoder = state.SampleValueTypeEncoder
		e.isTypeRecursive = true
	} else {
		e.type_Encoder = new(SampleValueTypeEncoder)
		err = e.type_Encoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *SampleValueEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if e.fieldCount <= 0 {
		return // Val and all subsequent fields are skipped.
	}
	e.valEncoder.Reset()
	if e.fieldCount <= 1 {
		return // Type and all subsequent fields are skipped.
	}

	if !e.isTypeRecursive {
		e.type_Encoder.Reset()
	}

}

// Encode encodes val into buf
func (e *SampleValueEncoder) Encode(val *SampleValue) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedSampleValueVal |
				fieldModifiedSampleValueType | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedSampleValueVal != 0 {
		// Encode Val
		e.valEncoder.Encode(val.val)
	}

	if fieldMask&fieldModifiedSampleValueType != 0 {
		// Encode Type
		e.type_Encoder.Encode(val.type_)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *SampleValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Val field.
	if e.fieldCount <= 0 {
		return // Val and subsequent fields are skipped.
	}

	e.valEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Type field.
	if e.fieldCount <= 1 {
		return // Type and subsequent fields are skipped.
	}
	if !e.isTypeRecursive {
		e.type_Encoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// SampleValueDecoder implements decoding of SampleValue
type SampleValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	fieldCount uint

	valDecoder encoders.Int64Decoder

	type_Decoder    *SampleValueTypeDecoder
	isTypeRecursive bool

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *SampleValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.SampleValueDecoder != nil {
		panic("cannot initialize SampleValueDecoder: already initialized")
	}
	state.SampleValueDecoder = d
	defer func() { state.SampleValueDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.SampleValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "SampleValue", err)
	}

	d.column = columns.Column()

	if d.fieldCount <= 0 {
		return nil // Val and subsequent fields are skipped.
	}
	err = d.valDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Type and subsequent fields are skipped.
	}
	if state.SampleValueTypeDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.type_Decoder = state.SampleValueTypeDecoder
		d.isTypeRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.type_Decoder = new(SampleValueTypeDecoder)
		err = d.type_Decoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *SampleValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Val and subsequent fields are skipped.
	}
	d.valDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Type and subsequent fields are skipped.
	}

	if !d.isTypeRecursive {
		d.type_Decoder.Continue()
	}

}

func (d *SampleValueDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Val and all subsequent fields are skipped.
	}
	d.valDecoder.Reset()
	if d.fieldCount <= 1 {
		return // Type and all subsequent fields are skipped.
	}

	if !d.isTypeRecursive {
		d.type_Decoder.Reset()
	}

}

func (d *SampleValueDecoder) Decode(dstPtr *SampleValue) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedSampleValueVal != 0 {
		// Field is changed and is present, decode it.
		err = d.valDecoder.Decode(&val.val)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSampleValueType != 0 {
		// Field is changed and is present, decode it.
		if val.type_ == nil {
			val.type_ = d.allocators.SampleValueType.Alloc()
			val.type_.init(&val.modifiedFields, fieldModifiedSampleValueType, d.allocators)
		}

		err = d.type_Decoder.Decode(&val.type_)
		if err != nil {
			return err
		}
	}

	return nil
}

// SampleValueAllocator implements a custom allocator for SampleValue.
// It maintains a pool of pre-allocated SampleValue and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type SampleValueAllocator struct {
	pool []SampleValue
	ofs  int
}

// Alloc returns the next available SampleValue from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *SampleValueAllocator) Alloc() *SampleValue {
	if a.ofs < len(a.pool) {
		// Get the next available SampleValue from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *SampleValueAllocator) prealloc() *SampleValue {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]SampleValue, newLen)
	a.ofs = 1
	return &a.pool[0]
}
