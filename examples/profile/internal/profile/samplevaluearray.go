// Code generated by stefc. DO NOT EDIT.
package profile

import (
	"math/rand/v2"

	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = (*encoders.StringEncoder)(nil)
var _ = (*strings.Builder)(nil)

// SampleValueArray is a variable size array.
type SampleValueArray struct {
	elems []*SampleValue

	parentModifiedFields *modifiedFields
	parentModifiedBit    uint64
}

func (e *SampleValueArray) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	e.parentModifiedFields = parentModifiedFields
	e.parentModifiedBit = parentModifiedBit
}

func (e *SampleValueArray) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	e.init(parentModifiedFields, parentModifiedBit)
}

// reset the array to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (e *SampleValueArray) reset() {
	e.elems = e.elems[:0]
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (e *SampleValueArray) fixParent(parentModifiedFields *modifiedFields) {
	e.parentModifiedFields = parentModifiedFields
}

func (e *SampleValueArray) canBeShared() bool {
	// An array can never be shared.
	return false
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (e *SampleValueArray) byteSize() uint {
	if len(e.elems) == 0 {
		return 0
	}
	// TODO: add size of elements if they are clonable.
	size := uint(unsafe.Sizeof(e.elems[0]))*uint(len(e.elems)) + uint(unsafe.Sizeof(e))

	for i := range e.elems {
		size += e.elems[i].byteSize()
	}
	return size
}

// Append a new element at the end of the array.
func (e *SampleValueArray) Append(val *SampleValue) {
	e.elems = append(e.elems, val)
	e.markModified()
}

func (e *SampleValueArray) markModified() {
	e.parentModifiedFields.markModified(e.parentModifiedBit)
}

func (e *SampleValueArray) setModifiedRecursively() {
	for i := 0; i < len(e.elems); i++ {
		e.elems[i].setModifiedRecursively()
	}

}

func (e *SampleValueArray) setUnmodifiedRecursively() {
	for i := 0; i < len(e.elems); i++ {
		e.elems[i].setUnmodifiedRecursively()
	}

}

// computeDiff compares e and val and returns true if they differ.
// All fields that are different in e will be marked as modified.
func (e *SampleValueArray) computeDiff(val *SampleValueArray) (ret bool) {
	if len(e.elems) != len(val.elems) {
		ret = true
	}
	minLen := min(len(e.elems), len(val.elems))
	i := 0
	for ; i < minLen; i++ {
		if e.elems[i].computeDiff(val.elems[i]) {
			ret = true
		}
	}
	for ; i < len(e.elems); i++ {
		e.elems[i].setModifiedRecursively()
	}
	return ret
}

// Copy from src to dst, overwriting existing data in dst.
func copySampleValueArray(dst *SampleValueArray, src *SampleValueArray) {
	isModified := false

	minLen := min(len(dst.elems), len(src.elems))
	if len(dst.elems) != len(src.elems) {
		dst.elems = pkg.EnsureLen(dst.elems, len(src.elems))
		isModified = true
	}

	i := 0

	// Copy elements in the part of the array that already had the necessary room.
	for ; i < minLen; i++ {
		if src.elems[i].canBeShared() {
			if src.elems[i].computeDiff(dst.elems[i]) {
				dst.elems[i] = src.elems[i]
				isModified = true
			}
		} else {
			copySampleValue(dst.elems[i], src.elems[i])
			isModified = true
		}
	}
	if minLen < len(dst.elems) {
		isModified = true
		for ; i < len(dst.elems); i++ {
			if src.elems[i].canBeShared() {
				dst.elems[i] = src.elems[i]
				dst.elems[i].setModifiedRecursively()
			} else {
				dst.elems[i] = &SampleValue{}
				dst.elems[i].init(dst.parentModifiedFields, dst.parentModifiedBit)
				copySampleValue(dst.elems[i], src.elems[i])
			}
		}
	}
	if isModified {
		dst.markModified()
	}
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewSampleValueArray(dst *SampleValueArray, src *SampleValueArray, allocators *Allocators) {
	if len(src.elems) == 0 {
		return
	}

	dst.elems = pkg.EnsureLen(dst.elems, len(src.elems))
	// Need to allocate new elements for the part of the array that has grown.
	for j := 0; j < len(dst.elems); j++ {
		if src.elems[j].canBeShared() {
			dst.elems[j] = src.elems[j]
		} else {
			// Alloc and init the element.
			dst.elems[j] = allocators.SampleValue.Alloc()
			dst.elems[j].initAlloc(dst.parentModifiedFields, dst.parentModifiedBit, allocators)
			// Copy the element.
			copyToNewSampleValue(dst.elems[j], src.elems[j], allocators)
		}
	}
}

// Len returns the number of elements in the array.
func (e *SampleValueArray) Len() int {
	return len(e.elems)
}

// At returns element at index i.
func (m *SampleValueArray) At(i int) *SampleValue {
	return m.elems[i]
}

// EnsureLen ensures the length of the array is equal to newLen.
// It will grow or shrink the array if needed.
func (e *SampleValueArray) EnsureLen(newLen int) {
	oldLen := len(e.elems)
	if newLen > oldLen {
		// Grow the array
		e.elems = append(e.elems, make([]*SampleValue, newLen-oldLen)...)
		e.markModified()
		// Initialize newlly added elements.
		for ; oldLen < newLen; oldLen++ {
			e.elems[oldLen] = new(SampleValue)
			e.elems[oldLen].init(e.parentModifiedFields, e.parentModifiedBit)
		}
	} else if oldLen > newLen {
		// Shrink it
		e.elems = e.elems[:newLen]
		e.markModified()
	}
}

// EnsureLen ensures the length of the array is equal to newLen.
// It will grow or shrink the array if needed.
func (e *SampleValueArray) ensureLen(newLen int, allocators *Allocators) {
	oldLen := len(e.elems)
	if newLen > oldLen {
		// Grow the array
		e.elems = append(e.elems, make([]*SampleValue, newLen-oldLen)...)
		e.markModified()
		// Initialize newly added elements.
		for ; oldLen < newLen; oldLen++ {
			e.elems[oldLen] = allocators.SampleValue.Alloc()
			e.elems[oldLen].initAlloc(e.parentModifiedFields, e.parentModifiedBit, allocators)
		}
	} else if oldLen > newLen {
		// Shrink it
		e.elems = e.elems[:newLen]
		e.markModified()
	}
}

// IsEqual performs deep comparison and returns true if array is equal to val.
func (e *SampleValueArray) IsEqual(val *SampleValueArray) bool {
	if len(e.elems) != len(val.elems) {
		return false
	}
	for i := range e.elems {
		if !e.elems[i].IsEqual(val.elems[i]) {
			return false
		}
	}
	return true
}

// CmpSampleValueArray performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpSampleValueArray(left, right *SampleValueArray) int {
	c := len(left.elems) - len(right.elems)
	if c != 0 {
		return c
	}
	for i := range left.elems {
		fc := CmpSampleValue(left.elems[i], right.elems[i])
		if fc != 0 {
			return fc
		}
	}
	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. If array elements contain structs/oneofs
// only fields that exist in the schema are mutated, allowing to generate data for
// specified schema.
func (a *SampleValueArray) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	if random.IntN(20) == 0 {
		a.EnsureLen(a.Len() + 1)
	}
	if random.IntN(20) == 0 && a.Len() > 0 {
		a.EnsureLen(a.Len() - 1)
	}

	for i := range a.elems {
		_ = i
		if random.IntN(2*len(a.elems)) == 0 {
			a.elems[i].mutateRandom(random, schem)
		}
	}
}

type SampleValueArrayEncoder struct {
	buf         pkg.BitsWriter
	limiter     *pkg.SizeLimiter
	elemEncoder *SampleValueEncoder
	isRecursive bool
	state       *WriterState
}

func (e *SampleValueArrayEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	e.state = state
	e.limiter = &state.limiter

	// Remember this encoder in the state so that we can detect recursion.
	if state.SampleValueArrayEncoder != nil {
		panic("cannot initialize SampleValueArrayEncoder: already initialized")
	}
	state.SampleValueArrayEncoder = e
	defer func() { state.SampleValueArrayEncoder = nil }()

	if state.SampleValueEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.elemEncoder = state.SampleValueEncoder
		e.isRecursive = true
	} else {
		e.elemEncoder = new(SampleValueEncoder)
		if err := e.elemEncoder.Init(state, columns.AddSubColumn()); err != nil {
			return err
		}
	}

	return nil
}

func (e *SampleValueArrayEncoder) Reset() {
	if !e.isRecursive {
		e.elemEncoder.Reset()
	}
}

func (e *SampleValueArrayEncoder) Encode(arr *SampleValueArray) {
	oldBitLen := e.buf.BitCount()

	// Write the length of the array.
	newLen := len(arr.elems)
	e.buf.WriteUvarintCompact(uint64(newLen))

	// Encode the elements of the array.
	for i := 0; i < newLen; i++ {
		e.elemEncoder.Encode(arr.elems[i])
	}

	// Account written bits in the limiter.
	newBitLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newBitLen - oldBitLen)
}

func (e *SampleValueArrayEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	if !e.isRecursive {
		e.elemEncoder.CollectColumns(columnSet.At(0))
	}
}

type SampleValueArrayDecoder struct {
	buf         pkg.BitsReader
	column      *pkg.ReadableColumn
	elemDecoder *SampleValueDecoder
	isRecursive bool
	allocators  *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *SampleValueArrayDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	d.column = columns.Column()
	// Remember this encoder in the state so that we can detect recursion.
	if state.SampleValueArrayDecoder != nil {
		panic("cannot initialize SampleValueArrayDecoder: already initialized")
	}
	state.SampleValueArrayDecoder = d
	defer func() { state.SampleValueArrayDecoder = nil }()

	if state.SampleValueDecoder != nil {
		d.elemDecoder = state.SampleValueDecoder
		d.isRecursive = true
	} else {
		d.elemDecoder = new(SampleValueDecoder)
		if err := d.elemDecoder.Init(state, columns.AddSubColumn()); err != nil {
			return err
		}
	}

	d.allocators = &state.Allocators

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *SampleValueArrayDecoder) Continue() {
	d.buf.Reset(d.column.Data())
	if !d.isRecursive {
		d.elemDecoder.Continue()
	}
}

func (d *SampleValueArrayDecoder) Reset() {
	if !d.isRecursive {
		d.elemDecoder.Reset()
	}
}

func (d *SampleValueArrayDecoder) Decode(dst *SampleValueArray) error {
	newLen := int(d.buf.ReadUvarintCompact())

	dst.ensureLen(newLen, d.allocators)

	for i := 0; i < newLen; i++ {
		err := d.elemDecoder.Decode(dst.elems[i])
		if err != nil {
			return err
		}
	}

	return nil
}
