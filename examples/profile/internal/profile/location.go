// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"modernc.org/b/v2"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Location struct {
	mapping  *Mapping
	address  uint64
	lines    LineArray
	isFolded bool

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const LocationStructName = "Location"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedLocationMapping = uint64(1 << iota)
	fieldModifiedLocationAddress
	fieldModifiedLocationLines
	fieldModifiedLocationIsFolded
)

// Init must be called once, before the Location is used.
func (s *Location) Init() {
	s.init(nil, 0)
}

func NewLocation() *Location {
	var s Location
	s.init(nil, 0)
	return &s
}

func (s *Location) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.mapping = &Mapping{}
	s.mapping.init(&s.modifiedFields, fieldModifiedLocationMapping)
	s.lines.init(&s.modifiedFields, fieldModifiedLocationLines)
}

func (s *Location) Mapping() *Mapping {
	return s.mapping
}

func (s *Location) markMappingModified() {
	s.modifiedFields.markModified(fieldModifiedLocationMapping)
}

// IsMappingModified returns true the value of Mapping field was modified since
// Location was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Location) IsMappingModified() bool {
	return s.modifiedFields.mask&fieldModifiedLocationMapping != 0
}

func (s *Location) Address() uint64 {
	return s.address
}

// SetAddress sets the value of Address field.
func (s *Location) SetAddress(v uint64) {
	if !pkg.Uint64Equal(s.address, v) {
		s.address = v
		s.markAddressModified()
	}
}

func (s *Location) markAddressModified() {
	s.modifiedFields.markModified(fieldModifiedLocationAddress)
}

// IsAddressModified returns true the value of Address field was modified since
// Location was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Location) IsAddressModified() bool {
	return s.modifiedFields.mask&fieldModifiedLocationAddress != 0
}

func (s *Location) Lines() *LineArray {
	return &s.lines
}

func (s *Location) markLinesModified() {
	s.modifiedFields.markModified(fieldModifiedLocationLines)
}

// IsLinesModified returns true the value of Lines field was modified since
// Location was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Location) IsLinesModified() bool {
	return s.modifiedFields.mask&fieldModifiedLocationLines != 0
}

func (s *Location) IsFolded() bool {
	return s.isFolded
}

// SetIsFolded sets the value of IsFolded field.
func (s *Location) SetIsFolded(v bool) {
	if !pkg.BoolEqual(s.isFolded, v) {
		s.isFolded = v
		s.markIsFoldedModified()
	}
}

func (s *Location) markIsFoldedModified() {
	s.modifiedFields.markModified(fieldModifiedLocationIsFolded)
}

// IsIsFoldedModified returns true the value of IsFolded field was modified since
// Location was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Location) IsIsFoldedModified() bool {
	return s.modifiedFields.mask&fieldModifiedLocationIsFolded != 0
}

func (s *Location) markModifiedRecursively() {

	s.mapping.markModifiedRecursively()

	s.lines.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedLocationMapping |
			fieldModifiedLocationAddress |
			fieldModifiedLocationLines |
			fieldModifiedLocationIsFolded | 0
}

func (s *Location) markUnmodifiedRecursively() {

	if s.IsMappingModified() {
		s.mapping.markUnmodifiedRecursively()
	}

	if s.IsAddressModified() {
	}

	if s.IsLinesModified() {
		s.lines.markUnmodifiedRecursively()
	}

	if s.IsIsFoldedModified() {
	}

	s.modifiedFields.mask = 0
}

// markDiffModified marks fields in this struct modified if they differ from
// the corresponding fields in v.
func (s *Location) markDiffModified(v *Location) (modified bool) {
	if s.mapping.markDiffModified(v.mapping) {
		s.modifiedFields.markModified(fieldModifiedLocationMapping)
		modified = true
	}

	if !pkg.Uint64Equal(s.address, v.address) {
		s.markAddressModified()
		modified = true
	}

	if s.lines.markDiffModified(&v.lines) {
		s.modifiedFields.markModified(fieldModifiedLocationLines)
		modified = true
	}

	if !pkg.BoolEqual(s.isFolded, v.isFolded) {
		s.markIsFoldedModified()
		modified = true
	}

	return modified
}

func (s *Location) Clone() *Location {
	return &Location{
		mapping:  s.mapping.Clone(),
		address:  s.address,
		lines:    s.lines.Clone(),
		isFolded: s.isFolded,
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Location) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.mapping.byteSize() + s.lines.byteSize() + 0
}

func copyLocation(dst *Location, src *Location) {
	if src.mapping != nil {
		if dst.mapping == nil {
			dst.mapping = &Mapping{}
			dst.mapping.init(&dst.modifiedFields, fieldModifiedLocationMapping)
		}
		copyMapping(dst.mapping, src.mapping)
	}
	dst.SetAddress(src.address)
	copyLineArray(&dst.lines, &src.lines)
	dst.SetIsFolded(src.isFolded)
}

// CopyFrom() performs a deep copy from src.
func (s *Location) CopyFrom(src *Location) {
	copyLocation(s, src)
}

func (s *Location) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Location) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.mapping.markUnmodified()
	s.lines.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *Location) mutateRandom(random *rand.Rand) {
	const fieldCount = max(4, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
	if random.IntN(fieldCount) == 0 {
		s.mapping.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.SetAddress(pkg.Uint64Random(random))
	}
	if random.IntN(fieldCount) == 0 {
		s.lines.mutateRandom(random)
	}
	if random.IntN(fieldCount) == 0 {
		s.SetIsFolded(pkg.BoolRandom(random))
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *Location) IsEqual(right *Location) bool {
	// Compare Mapping field.
	if !s.mapping.IsEqual(right.mapping) {
		return false
	}
	// Compare Address field.
	if !pkg.Uint64Equal(s.address, right.address) {
		return false
	}
	// Compare Lines field.
	if !s.lines.IsEqual(&right.lines) {
		return false
	}
	// Compare IsFolded field.
	if !pkg.BoolEqual(s.isFolded, right.isFolded) {
		return false
	}

	return true
}

func LocationEqual(left, right *Location) bool {
	return left.IsEqual(right)
}

// CmpLocation performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpLocation(left, right *Location) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Mapping field.
	if c := CmpMapping(left.mapping, right.mapping); c != 0 {
		return c
	}

	// Compare Address field.
	if c := pkg.Uint64Compare(left.address, right.address); c != 0 {
		return c
	}

	// Compare Lines field.
	if c := CmpLineArray(&left.lines, &right.lines); c != 0 {
		return c
	}

	// Compare IsFolded field.
	if c := pkg.BoolCompare(left.isFolded, right.isFolded); c != 0 {
		return c
	}

	return 0
}

// LocationEncoder implements encoding of Location
type LocationEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	mappingEncoder     *MappingEncoder
	isMappingRecursive bool // Indicates Mapping field's type is recursive.

	addressEncoder encoders.Uint64Encoder

	linesEncoder     *LineArrayEncoder
	isLinesRecursive bool // Indicates Lines field's type is recursive.

	isFoldedEncoder encoders.BoolEncoder

	dict *LocationEncoderDict

	keepFieldMask uint64
	fieldCount    uint
}

type LocationEntry struct {
	refNum uint64
	val    *Location
}

// LocationEncoderDict is the dictionary used by LocationEncoder
type LocationEncoderDict struct {
	dict    b.Tree[*Location, LocationEntry]
	limiter *pkg.SizeLimiter
}

func (d *LocationEncoderDict) Init(limiter *pkg.SizeLimiter) {
	d.dict = *b.TreeNew[*Location, LocationEntry](CmpLocation)
	d.dict.Set(nil, LocationEntry{}) // nil Location is RefNum 0
	d.limiter = limiter
}

func (d *LocationEncoderDict) Reset() {
	d.dict.Clear()
	d.dict.Set(nil, LocationEntry{}) // nil Location is RefNum 0
}

func (e *LocationEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.LocationEncoder != nil {
		panic("cannot initialize LocationEncoder: already initialized")
	}
	state.LocationEncoder = e
	defer func() { state.LocationEncoder = nil }()

	e.limiter = &state.limiter
	e.dict = &state.Location

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Location")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Location")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 4
		e.keepFieldMask = ^uint64(0)
	}

	var err error

	// Init encoder for Mapping field.
	if e.fieldCount <= 0 {
		// Mapping and all subsequent fields are skipped.
		return nil
	}
	if state.MappingEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.mappingEncoder = state.MappingEncoder
		e.isMappingRecursive = true
	} else {
		e.mappingEncoder = new(MappingEncoder)
		err = e.mappingEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Address field.
	if e.fieldCount <= 1 {
		// Address and all subsequent fields are skipped.
		return nil
	}
	err = e.addressEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Lines field.
	if e.fieldCount <= 2 {
		// Lines and all subsequent fields are skipped.
		return nil
	}
	if state.LineArrayEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.linesEncoder = state.LineArrayEncoder
		e.isLinesRecursive = true
	} else {
		e.linesEncoder = new(LineArrayEncoder)
		err = e.linesEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for IsFolded field.
	if e.fieldCount <= 3 {
		// IsFolded and all subsequent fields are skipped.
		return nil
	}
	err = e.isFoldedEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *LocationEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if !e.isMappingRecursive {
		e.mappingEncoder.Reset()
	}

	e.addressEncoder.Reset()

	if !e.isLinesRecursive {
		e.linesEncoder.Reset()
	}

	e.isFoldedEncoder.Reset()
}

// Encode encodes val into buf
func (e *LocationEncoder) Encode(val *Location) {
	var bitCount uint

	// Check if the Location exists in the dictionary.
	entry, exists := e.dict.dict.Get(val)
	if exists {
		// The Location exists, we will reference it.
		// Indicate a RefNum follows.
		e.buf.WriteBit(0)
		// Encode refNum.
		bitCount = e.buf.WriteUvarintCompact(entry.refNum)

		// Account written bits in the limiter.
		e.limiter.AddFrameBits(1 + bitCount)

		// Mark all fields non-modified recursively so that next Encode() correctly
		// encodes only fields that change after this.
		val.markUnmodifiedRecursively()
		return
	}

	// The Location does not exist in the dictionary. Add it to the dictionary.
	valInDict := val.Clone()
	entry = LocationEntry{refNum: uint64(e.dict.dict.Len()), val: valInDict}
	e.dict.dict.Set(valInDict, entry)
	e.dict.limiter.AddDictElemSize(valInDict.byteSize())

	// Indicate that an encoded Location follows.
	e.buf.WriteBit(1)
	bitCount += 1
	// TODO: optimize and merge WriteBit with the following WriteBits.
	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedLocationMapping |
				fieldModifiedLocationAddress |
				fieldModifiedLocationLines |
				fieldModifiedLocationIsFolded | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedLocationMapping != 0 {
		// Encode Mapping
		e.mappingEncoder.Encode(val.mapping)
	}

	if fieldMask&fieldModifiedLocationAddress != 0 {
		// Encode Address
		e.addressEncoder.Encode(val.address)
	}

	if fieldMask&fieldModifiedLocationLines != 0 {
		// Encode Lines
		e.linesEncoder.Encode(&val.lines)
	}

	if fieldMask&fieldModifiedLocationIsFolded != 0 {
		// Encode IsFolded
		e.isFoldedEncoder.Encode(val.isFolded)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *LocationEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Mapping field.
	if e.fieldCount <= 0 {
		return // Mapping and subsequent fields are skipped.
	}
	if !e.isMappingRecursive {
		e.mappingEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Address field.
	if e.fieldCount <= 1 {
		return // Address and subsequent fields are skipped.
	}

	e.addressEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Lines field.
	if e.fieldCount <= 2 {
		return // Lines and subsequent fields are skipped.
	}
	if !e.isLinesRecursive {
		e.linesEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect IsFolded field.
	if e.fieldCount <= 3 {
		return // IsFolded and subsequent fields are skipped.
	}

	e.isFoldedEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// LocationDecoder implements decoding of Location
type LocationDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Location
	lastVal    Location
	fieldCount uint

	mappingDecoder     *MappingDecoder
	isMappingRecursive bool

	addressDecoder encoders.Uint64Decoder

	linesDecoder     *LineArrayDecoder
	isLinesRecursive bool

	isFoldedDecoder encoders.BoolDecoder

	dict *LocationDecoderDict
}

// Init is called once in the lifetime of the stream.
func (d *LocationDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.LocationDecoder != nil {
		panic("cannot initialize LocationDecoder: already initialized")
	}
	state.LocationDecoder = d
	defer func() { state.LocationDecoder = nil }()

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("Location")
		if !ok {
			return fmt.Errorf("cannot find struct in override schema: %s", "Location")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 4
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal
	d.dict = &state.Location

	var err error

	if d.fieldCount <= 0 {
		return nil // Mapping and subsequent fields are skipped.
	}
	if state.MappingDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.mappingDecoder = state.MappingDecoder
		d.isMappingRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.mappingDecoder = new(MappingDecoder)
		err = d.mappingDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Address and subsequent fields are skipped.
	}
	err = d.addressDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Lines and subsequent fields are skipped.
	}
	if state.LineArrayDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.linesDecoder = state.LineArrayDecoder
		d.isLinesRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.linesDecoder = new(LineArrayDecoder)
		err = d.linesDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // IsFolded and subsequent fields are skipped.
	}
	err = d.isFoldedDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *LocationDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Mapping and subsequent fields are skipped.
	}

	if !d.isMappingRecursive {
		d.mappingDecoder.Continue()
	}

	if d.fieldCount <= 1 {
		return // Address and subsequent fields are skipped.
	}
	d.addressDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Lines and subsequent fields are skipped.
	}

	if !d.isLinesRecursive {
		d.linesDecoder.Continue()
	}

	if d.fieldCount <= 3 {
		return // IsFolded and subsequent fields are skipped.
	}
	d.isFoldedDecoder.Continue()
}

func (d *LocationDecoder) Reset() {

	if !d.isMappingRecursive {
		d.mappingDecoder.Reset()
	}

	d.addressDecoder.Reset()

	if !d.isLinesRecursive {
		d.linesDecoder.Reset()
	}

	d.isFoldedDecoder.Reset()
}

func (d *LocationDecoder) Decode(dstPtr **Location) error {
	// Check if the Location exists in the dictionary.
	dictFlag := d.buf.ReadBit()
	if dictFlag == 0 {
		refNum := d.buf.ReadUvarintCompact()
		if refNum >= uint64(len(d.dict.dict)) {
			return pkg.ErrInvalidRefNum
		}
		d.lastValPtr = d.dict.dict[refNum]
		*dstPtr = d.lastValPtr
		return nil
	}

	// lastValPtr here is pointing to a element in the dictionary. We are not allowed
	// to modify it. Make a clone of it and decode into the clone.
	val := d.lastValPtr.Clone()
	d.lastValPtr = val
	*dstPtr = val

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedLocationMapping != 0 {
		// Field is changed and is present, decode it.
		if val.mapping == nil {
			val.mapping = &Mapping{}
			val.mapping.init(&val.modifiedFields, fieldModifiedLocationMapping)
		}

		err = d.mappingDecoder.Decode(&val.mapping)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedLocationAddress != 0 {
		// Field is changed and is present, decode it.
		err = d.addressDecoder.Decode(&val.address)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedLocationLines != 0 {
		// Field is changed and is present, decode it.
		err = d.linesDecoder.Decode(&val.lines)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedLocationIsFolded != 0 {
		// Field is changed and is present, decode it.
		err = d.isFoldedDecoder.Decode(&val.isFolded)
		if err != nil {
			return err
		}
	}

	d.dict.dict = append(d.dict.dict, val)

	return nil
}

// LocationDecoderDict is the dictionary used by LocationDecoder
type LocationDecoderDict struct {
	dict []*Location
}

func (d *LocationDecoderDict) Init() {
	d.dict = d.dict[:0]
	d.dict = append(d.dict, nil) // nil Location is RefNum 0
}

// Reset the dictionary to initial state. Used when a frame is
// started with RestartDictionaries flag.
func (d *LocationDecoderDict) Reset() {
	d.Init()
}
