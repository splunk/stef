// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"math/rand/v2"

	"slices"

	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = (*encoders.StringEncoder)(nil)
var _ = (*strings.Builder)(nil)

// StringArray is a variable size array.
type StringArray struct {
	elems []string

	parentModifiedFields *modifiedFields
	parentModifiedBit    uint64
}

func (e *StringArray) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	e.parentModifiedFields = parentModifiedFields
	e.parentModifiedBit = parentModifiedBit
}

func (e *StringArray) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	e.init(parentModifiedFields, parentModifiedBit)
}

// reset the array to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (e *StringArray) reset() {
	e.elems = e.elems[:0]
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (e *StringArray) fixParent(parentModifiedFields *modifiedFields) {
	e.parentModifiedFields = parentModifiedFields
}

// Clone() creates a deep copy of StringArray
func (e *StringArray) Clone(allocators *Allocators) StringArray {
	var clone StringArray
	copyToNewStringArray(&clone, e, allocators)
	return clone
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (e *StringArray) byteSize() uint {
	if len(e.elems) == 0 {
		return 0
	}
	// TODO: add size of elements if they are clonable.
	size := uint(unsafe.Sizeof(e.elems[0]))*uint(len(e.elems)) + uint(unsafe.Sizeof(e))

	return size
}

// CopyFromSlice copies from a slice into this array. The length
// of the array will be equal to the length of slice and elements of
// the array will be assigned from elements of the slice.
func (e *StringArray) CopyFromSlice(src []string) {
	if !slices.Equal(e.elems, src) {
		e.elems = pkg.EnsureLen(e.elems, len(src))
		copy(e.elems, src)
		e.markModified()
	}
}

// Append a new element at the end of the array.
func (e *StringArray) Append(val string) {
	e.elems = append(e.elems, val)
	e.markModified()
}

func (e *StringArray) markModified() {
	e.parentModifiedFields.markModified(e.parentModifiedBit)
}

func (e *StringArray) markModifiedRecursively() {

}

func (e *StringArray) markUnmodifiedRecursively() {

}

// Copy from src to dst, overwriting existing data in dst.
func copyStringArray(dst *StringArray, src *StringArray) {
	isModified := false

	minLen := min(len(dst.elems), len(src.elems))
	if len(dst.elems) != len(src.elems) {
		dst.elems = pkg.EnsureLen(dst.elems, len(src.elems))
		isModified = true
	}

	i := 0

	// Copy elements in the part of the array that already had the necessary room.
	for ; i < minLen; i++ {
		if dst.elems[i] != src.elems[i] {
			dst.elems[i] = src.elems[i]
			isModified = true
		}
	}
	for ; i < len(dst.elems); i++ {
		if dst.elems[i] != src.elems[i] {
			dst.elems[i] = src.elems[i]
			isModified = true
		}
	}
	if isModified {
		dst.markModified()
	}
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewStringArray(dst *StringArray, src *StringArray, allocators *Allocators) {
	if len(src.elems) == 0 {
		return
	}

	dst.elems = pkg.EnsureLen(dst.elems, len(src.elems))
	for i := 0; i < len(dst.elems); i++ {
		dst.elems[i] = src.elems[i]
	}
}

// Len returns the number of elements in the array.
func (e *StringArray) Len() int {
	return len(e.elems)
}

// At returns element at index i.
func (m *StringArray) At(i int) string {
	return m.elems[i]
}

// EnsureLen ensures the length of the array is equal to newLen.
// It will grow or shrink the array if needed.
func (e *StringArray) EnsureLen(newLen int) {
	oldLen := len(e.elems)
	if newLen > oldLen {
		// Grow the array
		e.elems = append(e.elems, make([]string, newLen-oldLen)...)
		e.markModified()
	} else if oldLen > newLen {
		// Shrink it
		e.elems = e.elems[:newLen]
		e.markModified()
	}
}

// EnsureLen ensures the length of the array is equal to newLen.
// It will grow or shrink the array if needed.
func (e *StringArray) ensureLen(newLen int, allocators *Allocators) {
	oldLen := len(e.elems)
	if newLen > oldLen {
		// Grow the array
		e.elems = append(e.elems, make([]string, newLen-oldLen)...)
		e.markModified()
	} else if oldLen > newLen {
		// Shrink it
		e.elems = e.elems[:newLen]
		e.markModified()
	}
}

// IsEqual performs deep comparison and returns true if array is equal to val.
func (e *StringArray) IsEqual(val *StringArray) bool {
	if len(e.elems) != len(val.elems) {
		return false
	}
	for i := range e.elems {
		if !pkg.StringEqual(e.elems[i], val.elems[i]) {
			return false
		}
	}
	return true
}

// CmpStringArray performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpStringArray(left, right *StringArray) int {
	c := len(left.elems) - len(right.elems)
	if c != 0 {
		return c
	}
	for i := range left.elems {
		fc := strings.Compare(left.elems[i], right.elems[i])
		if fc < 0 {
			return -1
		}
		if fc > 0 {
			return 1
		}
	}
	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. If array elements contain structs/oneofs
// only fields that exist in the schema are mutated, allowing to generate data for
// specified schema.
func (a *StringArray) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	if random.IntN(20) == 0 {
		a.EnsureLen(a.Len() + 1)
	}
	if random.IntN(20) == 0 && a.Len() > 0 {
		a.EnsureLen(a.Len() - 1)
	}

	for i := range a.elems {
		_ = i
		if random.IntN(2*len(a.elems)) == 0 {
			v := pkg.StringRandom(random)
			if a.elems[i] != v {
				a.elems[i] = v
				a.markModified()
			}
		}
	}
}

type StringArrayEncoder struct {
	buf         pkg.BitsWriter
	limiter     *pkg.SizeLimiter
	elemEncoder *encoders.StringDictEncoder
	isRecursive bool
	state       *WriterState
}

func (e *StringArrayEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	e.state = state
	e.limiter = &state.limiter

	e.elemEncoder = new(encoders.StringDictEncoder)
	if err := e.elemEncoder.Init(&e.state.Comment, e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}

	return nil
}

func (e *StringArrayEncoder) Reset() {
	if !e.isRecursive {
		e.elemEncoder.Reset()
	}
}

func (e *StringArrayEncoder) Encode(arr *StringArray) {
	oldBitLen := e.buf.BitCount()

	// Write the length of the array.
	newLen := len(arr.elems)
	e.buf.WriteUvarintCompact(uint64(newLen))

	// Encode the elements of the array.
	for i := 0; i < newLen; i++ {
		e.elemEncoder.Encode(arr.elems[i])
	}

	// Account written bits in the limiter.
	newBitLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newBitLen - oldBitLen)
}

func (e *StringArrayEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	if !e.isRecursive {
		e.elemEncoder.CollectColumns(columnSet.At(0))
	}
}

type StringArrayDecoder struct {
	buf         pkg.BitsReader
	column      *pkg.ReadableColumn
	elemDecoder *encoders.StringDictDecoder
	isRecursive bool
	allocators  *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *StringArrayDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	d.column = columns.Column()
	d.elemDecoder = new(encoders.StringDictDecoder)
	err := d.elemDecoder.Init(&state.Comment, columns.AddSubColumn())
	if err != nil {
		return err
	}

	d.allocators = &state.Allocators

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *StringArrayDecoder) Continue() {
	d.buf.Reset(d.column.Data())
	if !d.isRecursive {
		d.elemDecoder.Continue()
	}
}

func (d *StringArrayDecoder) Reset() {
	if !d.isRecursive {
		d.elemDecoder.Reset()
	}
}

func (d *StringArrayDecoder) Decode(dst *StringArray) error {
	newLen := int(d.buf.ReadUvarintCompact())

	dst.ensureLen(newLen, d.allocators)

	for i := 0; i < newLen; i++ {
		err := d.elemDecoder.Decode(&dst.elems[i])
		if err != nil {
			return err
		}
	}

	return nil
}
