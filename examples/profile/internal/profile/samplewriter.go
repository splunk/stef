// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/splunk/stef/go/pkg"
)

type SampleWriter struct {
	Record Sample

	opts             pkg.WriterOptions
	dst              pkg.ChunkWriter
	frameEncoder     pkg.FrameEncoder
	encoder          SampleEncoder
	state            WriterState
	writeBufs        pkg.WriteBufs
	frameRecordCount uint64
	recordCount      uint64
}

func NewSampleWriter(dst pkg.ChunkWriter, opts pkg.WriterOptions) (*SampleWriter, error) {
	writer := &SampleWriter{
		dst:  dst,
		opts: opts,
	}

	// Set default options.
	if writer.opts.MaxUncompressedFrameByteSize == 0 {
		writer.opts.MaxUncompressedFrameByteSize = pkg.DefaultMaxFrameSize
	}
	if writer.opts.MaxTotalDictSize == 0 {
		writer.opts.MaxTotalDictSize = pkg.DefaultMaxTotalDictSize
	}

	if writer.opts.Schema != nil {
		// If the schema is overridden must include the descriptor so that the readers
		// can decode the data correctly.
		writer.opts.IncludeDescriptor = true

		ownSchema, err := SampleWireSchema()
		if err != nil {
			return nil, err
		}
		if _, err := ownSchema.Compatible(writer.opts.Schema); err != nil {
			return nil, fmt.Errorf("schema is not compatible with Writer: %w", err)
		}
	}

	writer.Record.Init()
	writer.state.Init(&writer.opts)
	writer.encoder.Init(&writer.state, &writer.writeBufs.Columns)

	if err := writer.frameEncoder.Init(dst, writer.opts.Compression); err != nil {
		return nil, err
	}

	if err := writer.writeFixedHeader(); err != nil {
		return nil, err
	}

	if err := writer.writeVarHeader(); err != nil {
		return nil, err
	}

	return writer, nil
}

func (f *SampleWriter) writeFixedHeader() error {
	var hdrTail []byte

	var versionAndType byte = pkg.HdrFormatVersion
	hdrTail = append(hdrTail, versionAndType)

	flags := byte(f.opts.Compression) & pkg.HdrFlagsCompressionMethod

	hdrTail = append(hdrTail, flags)
	hdrTailSize := uint64(len(hdrTail))

	var hdrFull []byte
	hdrFull = append(hdrFull, pkg.HdrSignature...)
	hdrFull = binary.AppendUvarint(hdrFull, hdrTailSize)
	hdrFull = append(hdrFull, hdrTail...)

	err := f.dst.WriteChunk(hdrFull, nil)
	return err
}

func (w *SampleWriter) writeVarHeader() error {
	// Serialize varheader
	hdr := pkg.VarHeader{}
	if w.opts.IncludeDescriptor {
		if w.opts.Schema != nil {
			var buf bytes.Buffer
			err := w.opts.Schema.Serialize(&buf)
			if err != nil {
				return fmt.Errorf("could not marshal schema: %w", err)
			}
			hdr.SchemaWireBytes = buf.Bytes()
		} else {
			hdr.SchemaWireBytes = []byte(wireSchemaSample)
		}
	}

	if len(w.opts.UserData) > 0 {
		hdr.UserData = w.opts.UserData
	}

	var buf bytes.Buffer
	err := hdr.Serialize(&buf)
	if err != nil {
		return err
	}

	// Write to the frame
	_, err = w.frameEncoder.Write(buf.Bytes())
	if err != nil {
		return err
	}

	// Close the the frame.
	if err := w.frameEncoder.CloseFrame(); err != nil {
		return err
	}

	// Open a new frame.
	w.frameEncoder.OpenFrame(0)

	return nil
}

func (w *SampleWriter) Write() error {
	w.encoder.Encode(&w.Record)
	w.frameRecordCount++

	nextFrameFlags := w.opts.FrameRestartFlags
	restartFrame := false
	if w.state.limiter.DictLimitReached() || (nextFrameFlags&pkg.RestartDictionaries != 0) {
		w.state.ResetDicts()
		nextFrameFlags = w.opts.FrameRestartFlags | pkg.RestartDictionaries
		restartFrame = true
	}

	if w.state.limiter.FrameLimitReached() {
		restartFrame = true
	}

	if restartFrame {
		if err := w.restartFrame(nextFrameFlags); err != nil {
			return err
		}
	}

	w.recordCount++

	return nil
}

func (w *SampleWriter) RecordCount() uint64 {
	return w.recordCount
}

func (w *SampleWriter) restartFrame(nextFrameFlags pkg.FrameFlags) error {
	if nextFrameFlags&pkg.RestartCodecs != 0 {
		w.encoder.Reset()
	}

	// Write record count.
	if _, err := w.frameEncoder.Write(binary.AppendUvarint(nil, w.frameRecordCount)); err != nil {
		return err
	}
	w.frameRecordCount = 0

	// Write from column buffers to the frame buffer.
	w.encoder.CollectColumns(&w.writeBufs.Columns)
	if err := w.writeBufs.WriteTo(&w.frameEncoder); err != nil {
		return err
	}

	// Close the current frame.
	if err := w.frameEncoder.CloseFrame(); err != nil {
		return err
	}

	// Open a new frame.
	w.frameEncoder.OpenFrame(nextFrameFlags)

	// Reset the frame size limiter, this is a new frame.
	w.state.limiter.ResetFrameSize()

	return nil
}

func (w *SampleWriter) Flush() error {
	if w.frameRecordCount == 0 {
		// Nothing to flush.
		return nil
	}
	return w.restartFrame(w.opts.FrameRestartFlags)
}
