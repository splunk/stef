// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"fmt"
	"math"

	"github.com/splunk/stef/go/pkg/schema"
)

// The STEF IDL string. Used for testing.
const allSchemaContent = "// STEF equivalent schema for pprof profile.proto (https://github.com/google/pprof/blob/main/proto/profile.proto)\n\npackage com.example.profile\n\nstruct Sample root {\n  Metadata  ProfileMetadata\n  Locations []Location\n  Values    []SampleValue\n  Labels    Labels\n}\n\nstruct Location dict(Location) {\n  Mapping   Mapping\n  Address   uint64\n  Lines     []Line\n  IsFolded  bool\n}\n\nstruct Mapping dict(Mapping) {\n  MemoryStart uint64\n  MemoryLimit uint64\n  FileOffset  uint64\n  Filename    string dict(Filename)\n  BuildId     string dict(BuildID)\n\n  HasFunctions     bool\n  HasFilenames     bool\n  HasLineNumbers   bool\n  HasInlineFrames  bool\n}\n\nstruct Line {\n  Function Function\n  Line     uint64\n  Column   uint64\n}\n\nstruct Function dict(Function) {\n  Name       string dict(FunctionName)\n  SystemName string dict(SystemName)\n  Filename   string dict(Filename)\n  StartLine  uint64\n}\n\nmultimap Labels {\n  key   string dict(LabelKey)\n  value LabelValue\n}\n\noneof LabelValue {\n  Str string dict(LabelValue)\n  Num NumValue\n}\n\nstruct NumValue {\n  Val  int64\n  Unit string dict(NumValueUnit)\n}\n\nstruct SampleValue {\n  Val  int64\n  Type SampleValueType\n}\n\nstruct SampleValueType dict(SampleValueType) {\n  Type string\n  Unit string\n}\n\nstruct ProfileMetadata {\n  DropFrames string dict(FunctionName)\n  KeepFrames string dict(FunctionName)\n\n  TimeNanos     int64\n  DurationNanos int64\n\n  PeriodType SampleValueType\n  Period     int64\n\n  Comments []string\n\n  DefaultSampleType SampleValueType\n}\n"

// StructFieldCounts is used to keep track of the number of fields in each struct
// of an associated schema and to iterate over the fields.
// Field counts will be fetched from the iterator if the struct is encountered
// for the first time and then remembered for subsequent calls (for the case when
// the same struct is used multiple times in the schema).
type StructFieldCounts struct {
	countFunction        uint // Number of fields in Function struct.
	countLabelValue      uint // Number of fields in LabelValue struct.
	countLine            uint // Number of fields in Line struct.
	countLocation        uint // Number of fields in Location struct.
	countMapping         uint // Number of fields in Mapping struct.
	countNumValue        uint // Number of fields in NumValue struct.
	countProfileMetadata uint // Number of fields in ProfileMetadata struct.
	countSample          uint // Number of fields in Sample struct.
	countSampleValue     uint // Number of fields in SampleValue struct.
	countSampleValueType uint // Number of fields in SampleValueType struct.

	// OverrideSchema is set if codec should perform a translation from specified schema.
	overrideSchema     bool
	overrideSchemaIter schema.WireSchemaIter
}

func (s *StructFieldCounts) Init(overrideSchema *schema.WireSchema) {
	if overrideSchema != nil {
		s.overrideSchema = true
		s.overrideSchemaIter = schema.NewWireSchemaIter(overrideSchema)
	}

	// Initialize all struct field counts to math.MaxUint, indicating that the field count
	// is not known.
	s.countFunction = math.MaxUint
	s.countLabelValue = math.MaxUint
	s.countLine = math.MaxUint
	s.countLocation = math.MaxUint
	s.countMapping = math.MaxUint
	s.countNumValue = math.MaxUint
	s.countProfileMetadata = math.MaxUint
	s.countSample = math.MaxUint
	s.countSampleValue = math.MaxUint
	s.countSampleValueType = math.MaxUint

}

// Get the field count for a specific struct/oneof.
// It is expected that the order in which this function is called matches
// the order in which the WireSchemaIter iterates over the structs (see WireSchema).
func getFieldCount(fieldCount *uint, fieldName string, overrideSchema bool, overrideSchemaIter *schema.WireSchemaIter, defaultCount uint) (uint, error) {
	if *fieldCount == math.MaxUint {
		// Field count is not known, we need to determine it.
		if overrideSchema {
			// Get the field count from the override schema.
			var err error
			*fieldCount, err = overrideSchemaIter.NextFieldCount()
			if err != nil {
				return 0, fmt.Errorf("cannot find struct %s in override schema: %v", fieldName, err)
			}
		} else {
			// Schema is not overridden. Use the compile-time struct field count.
			*fieldCount = defaultCount
		}
	} else {
		// Field count is already known, return it.
	}
	return *fieldCount, nil
}

func (s *StructFieldCounts) FunctionFieldCount() (uint, error) {
	return getFieldCount(&s.countFunction, "Function", s.overrideSchema, &s.overrideSchemaIter, 4)
}

func (s *StructFieldCounts) LabelValueFieldCount() (uint, error) {
	return getFieldCount(&s.countLabelValue, "LabelValue", s.overrideSchema, &s.overrideSchemaIter, 2)
}

func (s *StructFieldCounts) LineFieldCount() (uint, error) {
	return getFieldCount(&s.countLine, "Line", s.overrideSchema, &s.overrideSchemaIter, 3)
}

func (s *StructFieldCounts) LocationFieldCount() (uint, error) {
	return getFieldCount(&s.countLocation, "Location", s.overrideSchema, &s.overrideSchemaIter, 4)
}

func (s *StructFieldCounts) MappingFieldCount() (uint, error) {
	return getFieldCount(&s.countMapping, "Mapping", s.overrideSchema, &s.overrideSchemaIter, 9)
}

func (s *StructFieldCounts) NumValueFieldCount() (uint, error) {
	return getFieldCount(&s.countNumValue, "NumValue", s.overrideSchema, &s.overrideSchemaIter, 2)
}

func (s *StructFieldCounts) ProfileMetadataFieldCount() (uint, error) {
	return getFieldCount(&s.countProfileMetadata, "ProfileMetadata", s.overrideSchema, &s.overrideSchemaIter, 8)
}

func (s *StructFieldCounts) SampleFieldCount() (uint, error) {
	return getFieldCount(&s.countSample, "Sample", s.overrideSchema, &s.overrideSchemaIter, 4)
}

func (s *StructFieldCounts) SampleValueFieldCount() (uint, error) {
	return getFieldCount(&s.countSampleValue, "SampleValue", s.overrideSchema, &s.overrideSchemaIter, 2)
}

func (s *StructFieldCounts) SampleValueTypeFieldCount() (uint, error) {
	return getFieldCount(&s.countSampleValueType, "SampleValueType", s.overrideSchema, &s.overrideSchemaIter, 2)
}

func (s *StructFieldCounts) AllFetched() bool {
	return s.overrideSchema == false || s.overrideSchemaIter.Done()
}

type Allocators struct {
	Function        FunctionAllocator
	LabelValue      LabelValueAllocator
	Line            LineAllocator
	Location        LocationAllocator
	Mapping         MappingAllocator
	NumValue        NumValueAllocator
	ProfileMetadata ProfileMetadataAllocator
	Sample          SampleAllocator
	SampleValue     SampleValueAllocator
	SampleValueType SampleValueTypeAllocator
}
