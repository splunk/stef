// Code generated by stefc. DO NOT EDIT.
package profile

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"modernc.org/b/v2"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type SampleValueType struct {
	type_ string
	unit  string

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const SampleValueTypeStructName = "SampleValueType"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedSampleValueTypeType = uint64(1 << iota)
	fieldModifiedSampleValueTypeUnit
)

// Init must be called once, before the SampleValueType is used.
func (s *SampleValueType) Init() {
	s.init(nil, 0)
}

func NewSampleValueType() *SampleValueType {
	var s SampleValueType
	s.init(nil, 0)
	return &s
}

func (s *SampleValueType) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

}

func (s *SampleValueType) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *SampleValueType) reset() {
	s.type_ = ""
	s.unit = ""
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *SampleValueType) fixParent(parentModifiedFields *modifiedFields) {
	s.modifiedFields.parent = parentModifiedFields
}

// Freeze the struct. Any attempt to modify it after this will panic.
// This marks the struct as eligible for safely sharing by pointer without cloning,
// which can improve encoding performance.
func (s *SampleValueType) Freeze() {
	s.modifiedFields.freeze()
}

func (s *SampleValueType) isFrozen() bool {
	return s.modifiedFields.isFrozen()
}

func (s *SampleValueType) Type() string {
	return s.type_
}

// SetType sets the value of Type field.
func (s *SampleValueType) SetType(v string) {
	if s.type_ != v {
		s.type_ = v
		s.modifiedFields.markModified(fieldModifiedSampleValueTypeType)
	}
}

func (s *SampleValueType) markTypeModified() {
	s.modifiedFields.markModified(fieldModifiedSampleValueTypeType)
}

// IsTypeModified returns true the value of Type field was modified since
// SampleValueType was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *SampleValueType) IsTypeModified() bool {
	return s.modifiedFields.mask&fieldModifiedSampleValueTypeType != 0
}

func (s *SampleValueType) Unit() string {
	return s.unit
}

// SetUnit sets the value of Unit field.
func (s *SampleValueType) SetUnit(v string) {
	if s.unit != v {
		s.unit = v
		s.modifiedFields.markModified(fieldModifiedSampleValueTypeUnit)
	}
}

func (s *SampleValueType) markUnitModified() {
	s.modifiedFields.markModified(fieldModifiedSampleValueTypeUnit)
}

// IsUnitModified returns true the value of Unit field was modified since
// SampleValueType was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *SampleValueType) IsUnitModified() bool {
	return s.modifiedFields.mask&fieldModifiedSampleValueTypeUnit != 0
}

func (s *SampleValueType) setModifiedRecursively() {
	s.modifiedFields.mask =
		fieldModifiedSampleValueTypeType |
			fieldModifiedSampleValueTypeUnit | 0
}

func (s *SampleValueType) setUnmodifiedRecursively() {
	s.modifiedFields.mask = 0
}

// computeDiff compares s and val and returns true if they differ.
// All fields that are different in s will be marked as modified.
func (s *SampleValueType) computeDiff(val *SampleValueType) (ret bool) {
	// Compare Type field.
	if s.type_ != val.type_ {
		s.modifiedFields.setModified(fieldModifiedSampleValueTypeType)
		ret = true
	}
	// Compare Unit field.
	if s.unit != val.unit {
		s.modifiedFields.setModified(fieldModifiedSampleValueTypeUnit)
		ret = true
	}
	return ret
}

// canBeShared returns true if s is safe to share by pointer without cloning (for example if s is frozen).
func (s *SampleValueType) canBeShared() bool {
	return s.isFrozen()
}

// CloneShared returns a clone of s. It may return s if it is safe to share without cloning
// (for example if s is frozen).
func (s *SampleValueType) CloneShared(allocators *Allocators) *SampleValueType {
	if s.isFrozen() {
		// If s is frozen it means it is safe to share without cloning.
		return s
	}
	return s.Clone(allocators)
}

func (s *SampleValueType) Clone(allocators *Allocators) *SampleValueType {
	c := allocators.SampleValueType.Alloc()
	*c = SampleValueType{
		type_: s.type_,
		unit:  s.unit,
	}
	return c
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *SampleValueType) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		0
}

// Copy from src to dst, overwriting existing data in dst.
func copySampleValueType(dst *SampleValueType, src *SampleValueType) {
	dst.SetType(src.type_)
	dst.SetUnit(src.unit)
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewSampleValueType(dst *SampleValueType, src *SampleValueType, allocators *Allocators) {
	dst.SetType(src.type_)
	dst.SetUnit(src.unit)
}

// CopyFrom() performs a deep copy from src.
func (s *SampleValueType) CopyFrom(src *SampleValueType) {
	copySampleValueType(s, src)
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *SampleValueType) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("SampleValueType")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "SampleValueType", err))
	}

	const randRange = max(2, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Type and all subsequent fields are skipped.
	}
	// Maybe mutate Type
	if random.IntN(randRange) == 0 {
		s.SetType(pkg.StringRandom(random))
	}
	if fieldCount <= 1 {
		return // Unit and all subsequent fields are skipped.
	}
	// Maybe mutate Unit
	if random.IntN(randRange) == 0 {
		s.SetUnit(pkg.StringRandom(random))
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *SampleValueType) IsEqual(right *SampleValueType) bool {
	// Compare Type field.
	if !pkg.StringEqual(s.type_, right.type_) {
		return false
	}
	// Compare Unit field.
	if !pkg.StringEqual(s.unit, right.unit) {
		return false
	}

	return true
}

func SampleValueTypeEqual(left, right *SampleValueType) bool {
	return left.IsEqual(right)
}

// CmpSampleValueType performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpSampleValueType(left, right *SampleValueType) int {
	// Dict-based structs may be nil, so check for that first.
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}
	// Compare Type field.
	if c := strings.Compare(left.type_, right.type_); c != 0 {
		return c
	}
	// Compare Unit field.
	if c := strings.Compare(left.unit, right.unit); c != 0 {
		return c
	}
	return 0
}

// SampleValueTypeEncoder implements encoding of SampleValueType
type SampleValueTypeEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to a mask to force the next encoding operation
	// write the fields, whether they are modified or no. This is used after frame
	// restarts so that the data can be decoded from the frame start.
	forceModifiedFields uint64

	type_Encoder encoders.StringEncoder
	unitEncoder  encoders.StringEncoder

	allocators *Allocators
	dict       *SampleValueTypeEncoderDict

	keepFieldMask uint64
	fieldCount    uint
}

// SampleValueTypeEncoderDict is the dictionary used by SampleValueTypeEncoder
type SampleValueTypeEncoderDict struct {
	dict       b.Tree[*SampleValueType, uint32] // Searchable map of items seen in the past.
	slice      []*SampleValueType               // The same items in order of RefNum.
	allocators *Allocators
	limiter    *pkg.SizeLimiter
}

func (d *SampleValueTypeEncoderDict) Init(limiter *pkg.SizeLimiter) {
	d.dict = *b.TreeNew[*SampleValueType, uint32](CmpSampleValueType)
	d.slice = make([]*SampleValueType, 1) // refNum 0 is reserved for nil SampleValueType
	d.dict.Set(nil, 0)                    // nil SampleValueType is RefNum 0
	d.limiter = limiter
}

func (d *SampleValueTypeEncoderDict) Get(val *SampleValueType) (uint32, bool) {
	refNum := val.modifiedFields.refNum
	if refNum != 0 {
		// We have a cached refNum, verify that it is still valid. It may become invalid
		// if for example the dictionaries are reset during encoding and refNums are reused.
		if int(refNum) < len(d.slice) && d.slice[refNum] == val {
			return refNum, true
		}
	}
	return d.dict.Get(val)
}

func (d *SampleValueTypeEncoderDict) Add(val *SampleValueType) {
	refNum := uint32(d.dict.Len())     // Obtain a new refNum.
	val.modifiedFields.refNum = refNum // Cache the refNum
	d.slice = append(d.slice, val)     // Remember the value by refNum.

	d.limiter.AddDictElemSize(val.byteSize())
	if val.isFrozen() {
		// If val is frozen it means it is safe to share without cloning.
		d.dict.Set(val, refNum)
		return
	}
	clone := val.Clone(d.allocators) // Clone before adding to dictionary.
	clone.Freeze()                   // Freeze the clone so that it can be safely shared by pointer.
	d.dict.Set(clone, refNum)
}

func (d *SampleValueTypeEncoderDict) Reset() {
	d.dict.Clear()
	d.dict.Set(nil, 0) // nil SampleValueType is RefNum 0
	d.slice = d.slice[:1]
}

func (e *SampleValueTypeEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.SampleValueTypeEncoder != nil {
		panic("cannot initialize SampleValueTypeEncoder: already initialized")
	}
	state.SampleValueTypeEncoder = e
	defer func() { state.SampleValueTypeEncoder = nil }()

	e.limiter = &state.limiter
	e.allocators = &state.Allocators
	e.dict = &state.SampleValueType
	e.dict.allocators = e.allocators

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.SampleValueTypeFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "SampleValueType", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Type field.
	if e.fieldCount <= 0 {
		return nil // Type and all subsequent fields are skipped.
	}
	err = e.type_Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Unit field.
	if e.fieldCount <= 1 {
		return nil // Unit and all subsequent fields are skipped.
	}
	err = e.unitEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *SampleValueTypeEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = e.keepFieldMask

	if e.fieldCount <= 0 {
		return // Type and all subsequent fields are skipped.
	}
	e.type_Encoder.Reset()
	if e.fieldCount <= 1 {
		return // Unit and all subsequent fields are skipped.
	}
	e.unitEncoder.Reset()
}

// Encode encodes val into buf
func (e *SampleValueTypeEncoder) Encode(val *SampleValueType) {
	var bitCount uint

	// Check if the SampleValueType exists in the dictionary.
	if refNum, exists := e.dict.Get(val); exists {
		// The SampleValueType exists, we will reference it.
		// Indicate a RefNum follows.
		e.buf.WriteBit(0)
		// Encode refNum.
		bitCount = e.buf.WriteUvarintCompact(uint64(refNum))

		// Account written bits in the limiter.
		e.limiter.AddFrameBits(1 + bitCount)

		// Mark all fields non-modified recursively so that next Encode() correctly
		// encodes only fields that change after this.
		val.setUnmodifiedRecursively()
		return
	}

	// The SampleValueType does not exist in the dictionary. Add it to the dictionary.
	e.dict.Add(val)

	// Indicate that an encoded SampleValueType follows.
	e.buf.WriteBit(1)
	bitCount += 1
	// TODO: optimize and merge WriteBit with the following WriteBits.
	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	fieldMask |= e.forceModifiedFields
	e.forceModifiedFields = 0

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedSampleValueTypeType != 0 {
		// Encode Type
		e.type_Encoder.Encode(val.type_)
	}

	if fieldMask&fieldModifiedSampleValueTypeUnit != 0 {
		// Encode Unit
		e.unitEncoder.Encode(val.unit)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *SampleValueTypeEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0
	// Collect Type field.
	if e.fieldCount <= 0 {
		return // Type and subsequent fields are skipped.
	}
	e.type_Encoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
	// Collect Unit field.
	if e.fieldCount <= 1 {
		return // Unit and subsequent fields are skipped.
	}
	e.unitEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// SampleValueTypeDecoder implements decoding of SampleValueType
type SampleValueTypeDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	fieldCount uint

	type_Decoder encoders.StringDecoder

	unitDecoder encoders.StringDecoder

	dict       *SampleValueTypeDecoderDict
	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *SampleValueTypeDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.SampleValueTypeDecoder != nil {
		panic("cannot initialize SampleValueTypeDecoder: already initialized")
	}
	state.SampleValueTypeDecoder = d
	defer func() { state.SampleValueTypeDecoder = nil }()

	d.allocators = &state.Allocators

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.SampleValueTypeFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "SampleValueType", err)
	}

	d.column = columns.Column()
	d.dict = &state.SampleValueType

	if d.fieldCount <= 0 {
		return nil // Type and subsequent fields are skipped.
	}
	err = d.type_Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Unit and subsequent fields are skipped.
	}
	err = d.unitDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *SampleValueTypeDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Type and subsequent fields are skipped.
	}
	d.type_Decoder.Continue()
	if d.fieldCount <= 1 {
		return // Unit and subsequent fields are skipped.
	}
	d.unitDecoder.Continue()
}

func (d *SampleValueTypeDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Type and all subsequent fields are skipped.
	}
	d.type_Decoder.Reset()
	if d.fieldCount <= 1 {
		return // Unit and all subsequent fields are skipped.
	}
	d.unitDecoder.Reset()
}

func (d *SampleValueTypeDecoder) Decode(dstPtr **SampleValueType) error {
	// Check if this is a dictionary-based decoding.
	dictFlag := d.buf.PeekBit()
	d.buf.Consume(1)
	if dictFlag == 0 {
		refNum := d.buf.ReadUvarintCompact()
		if refNum >= uint64(len(d.dict.dict)) {
			return pkg.ErrInvalidRefNum
		}
		*dstPtr = d.dict.dict[refNum]
		return d.buf.Error()
	}

	// *dstPtr is pointing to a element in the dictionary. We are not allowed
	// to modify it. Make a clone of it and decode into the clone.
	val := (*dstPtr).Clone(d.allocators)
	*dstPtr = val

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.PeekBits(d.fieldCount)
	d.buf.Consume(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedSampleValueTypeType != 0 {
		// Field is changed and is present, decode it.
		err = d.type_Decoder.Decode(&val.type_)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSampleValueTypeUnit != 0 {
		// Field is changed and is present, decode it.
		err = d.unitDecoder.Decode(&val.unit)
		if err != nil {
			return err
		}
	}

	d.dict.dict = append(d.dict.dict, val)
	// Freeze the value. It is now in the dictionary and must not be modified.
	// This also improves performance of any encode operations that use this
	// value as it can be safely shared in encoder's dictionary without cloning.
	val.Freeze()

	return d.buf.Error()
}

// SampleValueTypeDecoderDict is the dictionary used by SampleValueTypeDecoder
type SampleValueTypeDecoderDict struct {
	dict []*SampleValueType
}

func (d *SampleValueTypeDecoderDict) Init() {
	d.dict = d.dict[:0]
	d.dict = append(d.dict, nil) // nil SampleValueType is RefNum 0
}

// Reset the dictionary to initial state. Used when a frame is
// started with RestartDictionaries flag.
func (d *SampleValueTypeDecoderDict) Reset() {
	d.Init()
}

// SampleValueTypeAllocator implements a custom allocator for SampleValueType.
// It maintains a pool of pre-allocated SampleValueType and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type SampleValueTypeAllocator struct {
	pool []SampleValueType
	ofs  int
}

// Alloc returns the next available SampleValueType from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *SampleValueTypeAllocator) Alloc() *SampleValueType {
	if a.ofs < len(a.pool) {
		// Get the next available SampleValueType from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *SampleValueTypeAllocator) prealloc() *SampleValueType {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]SampleValueType, newLen)
	a.ofs = 1
	return &a.pool[0]
}
