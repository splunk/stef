// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

// LabelValue is a oneof struct.
type LabelValue struct {
	// The current type of the oneof.
	typ LabelValueType

	str string
	num NumValue

	// Pointer to parent's modifiedFields
	parentModifiedFields *modifiedFields
	// Bit to set in parent's modifiedFields when this oneof is modified.
	parentModifiedBit uint64
}

// Init must be called once, before the LabelValue is used.
func (s *LabelValue) Init() {
	s.init(nil, 0)
}

func (s *LabelValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.num.init(parentModifiedFields, parentModifiedBit)
}

func (s *LabelValue) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.num.initAlloc(parentModifiedFields, parentModifiedBit, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *LabelValue) reset() {
	s.typ = LabelValueTypeNone
	// We don't need to reset the state of the field since that will be done
	// when the type is changed, see SetType().
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *LabelValue) fixParent(parentModifiedFields *modifiedFields) {
	s.parentModifiedFields = parentModifiedFields

	s.num.fixParent(parentModifiedFields)
}

type LabelValueType byte

const (
	LabelValueTypeNone = LabelValueType(iota)
	LabelValueTypeStr
	LabelValueTypeNum
	LabelValueTypeCount
)

// Type returns the type of the value currently contained in LabelValue.
func (s *LabelValue) Type() LabelValueType {
	return s.typ
}

// resetContained resets the currently contained value, if any.
// Normally used after switching to a different type to make sure
// the value contained is in blank state.
func (s *LabelValue) resetContained() {
	switch s.typ {
	case LabelValueTypeNum:
		s.num.reset()
	}
}

// SetType sets the type of the value currently contained in LabelValue.
func (s *LabelValue) SetType(typ LabelValueType) {
	if s.typ != typ {
		s.typ = typ
		s.resetContained()
		switch typ {
		}
		s.markParentModified()
	}
}

// Str returns the value if the contained type is currently LabelValueTypeStr.
// The caller must check the type via Type() before attempting to call this function.
func (s *LabelValue) Str() string {
	return s.str
}

// SetStr sets the value to the specified value and sets the type to LabelValueTypeStr.
func (s *LabelValue) SetStr(v string) {
	if s.typ != LabelValueTypeStr || !pkg.StringEqual(s.str, v) {
		s.str = v
		s.typ = LabelValueTypeStr
		s.markParentModified()
	}
}

// Num returns the value if the contained type is currently LabelValueTypeNum.
// The caller must check the type via Type() before attempting to call this function.
func (s *LabelValue) Num() *NumValue {
	return &s.num
}

// canBeShared returns true if s is safe to share without cloning (for example if s is frozen).
func (s *LabelValue) canBeShared() bool {
	return false // oneof cannot be shared
}

func (s *LabelValue) CloneShared(allocators *Allocators) LabelValue {
	// Clone and CloneShared are the same for oneof.
	return s.Clone(allocators)
}

func (s *LabelValue) Clone(allocators *Allocators) LabelValue {
	return LabelValue{
		str: s.str,
		num: s.num.Clone(allocators),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *LabelValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.num.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copyLabelValue(dst *LabelValue, src *LabelValue) {
	if dst == src {
		return
	}
	switch src.typ {
	case LabelValueTypeStr:
		dst.SetStr(src.str)
	case LabelValueTypeNum:
		dst.SetType(src.typ)
		copyNumValue(&dst.num, &src.num)
	case LabelValueTypeNone:
		dst.SetType(src.typ)
	default:
		panic("copyLabelValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewLabelValue(dst *LabelValue, src *LabelValue, allocators *Allocators) {
	dst.typ = src.typ
	switch src.typ {
	case LabelValueTypeStr:
		dst.str = src.str
	case LabelValueTypeNum:
		copyToNewNumValue(&dst.num, &src.num, allocators)
	case LabelValueTypeNone:
	default:
		panic("copyLabelValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// CopyFrom() performs a deep copy from src.
func (s *LabelValue) CopyFrom(src *LabelValue) {
	copyLabelValue(s, src)
}

func (s *LabelValue) markParentModified() {
	s.parentModifiedFields.markModified(s.parentModifiedBit)
}

func (s *LabelValue) markModifiedRecursively() {
	switch s.typ {
	case LabelValueTypeStr:
	case LabelValueTypeNum:
		s.num.markModifiedRecursively()
	}
}

func (s *LabelValue) markUnmodifiedRecursively() {
	switch s.typ {
	case LabelValueTypeStr:
	case LabelValueTypeNum:
		s.num.markUnmodifiedRecursively()
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *LabelValue) IsEqual(val *LabelValue) bool {
	if e.typ != val.typ {
		return false
	}
	switch e.typ {
	case LabelValueTypeStr:
		return pkg.StringEqual(e.str, val.str)
	case LabelValueTypeNum:
		return e.num.IsEqual(&val.num)
	}

	return true
}

func LabelValueEqual(left, right *LabelValue) bool {
	return left.IsEqual(right)
}

// CmpLabelValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpLabelValue(left, right *LabelValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	c := pkg.Uint64Compare(uint64(left.typ), uint64(right.typ))
	if c != 0 {
		return c
	}
	switch left.typ {
	case LabelValueTypeStr:
		return strings.Compare(left.str, right.str)
	case LabelValueTypeNum:
		return CmpNumValue(&left.num, &right.num)
	}

	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schema are mutated, allowing to generate data for specified schema.
func (s *LabelValue) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this oneof from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// the type of the oneof to the choices that are not in the schema.
	fieldCount, err := schem.FieldCount("LabelValue")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "LabelValue", err))
	}

	typeChanged := false
	if random.IntN(10) == 0 {
		s.SetType(LabelValueType(random.IntN(fieldCount + 1)))
		typeChanged = true
	}

	switch s.typ {
	case LabelValueTypeStr:
		if typeChanged || random.IntN(2) == 0 {
			s.SetStr(pkg.StringRandom(random))
		}
	case LabelValueTypeNum:
		if typeChanged || random.IntN(2) == 0 {
			s.num.mutateRandom(random, schem)
		}
	}
}

// LabelValueEncoder implements encoding of LabelValue
type LabelValueEncoder struct {
	buf        pkg.BitsWriter
	limiter    *pkg.SizeLimiter
	prevType   LabelValueType
	fieldCount uint

	// Field encoders.

	strEncoder encoders.StringDictEncoder

	numEncoder     *NumValueEncoder
	isNumRecursive bool // Indicates Num field's type is recursive.

}

func (e *LabelValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.LabelValueEncoder != nil {
		panic("cannot initialize LabelValueEncoder: already initialized")
	}
	state.LabelValueEncoder = e
	defer func() { state.LabelValueEncoder = nil }()

	e.limiter = &state.limiter

	var err error
	e.fieldCount, err = state.StructFieldCounts.LabelValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "LabelValue", err)
	}

	// Init encoder for Str field.
	if e.fieldCount <= 0 {
		// Str and all subsequent fields are skipped.
		return nil
	}
	err = e.strEncoder.Init(&state.LabelValue, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Num field.
	if e.fieldCount <= 1 {
		// Num and all subsequent fields are skipped.
		return nil
	}
	if state.NumValueEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.numEncoder = state.NumValueEncoder
		e.isNumRecursive = true
	} else {
		e.numEncoder = new(NumValueEncoder)
		err = e.numEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *LabelValueEncoder) Reset() {
	e.prevType = 0

	if e.fieldCount <= 0 {
		return // Str and all subsequent fields are skipped.
	}
	e.strEncoder.Reset()
	if e.fieldCount <= 1 {
		return // Num and all subsequent fields are skipped.
	}

	if !e.isNumRecursive {
		e.numEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *LabelValueEncoder) Encode(val *LabelValue) {
	typ := val.typ
	if uint(typ) > e.fieldCount {
		// The current field type is not supported in target schema. Encode the type as None.
		typ = LabelValueTypeNone
	}

	// Compute type delta. 0 means the type is the same as the last time.
	typDelta := int(typ) - int(e.prevType)
	e.prevType = typ
	bitCount := e.buf.WriteVarintCompact(int64(typDelta))

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Encode currently selected field.
	switch typ {
	case LabelValueTypeStr:
		// Encode Str
		e.strEncoder.Encode(val.str)
	case LabelValueTypeNum:
		// Encode Num
		e.numEncoder.Encode(&val.num)
	}
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *LabelValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Str field.
	if e.fieldCount <= 0 {
		return // Str and subsequent fields are skipped.
	}

	e.strEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Num field.
	if e.fieldCount <= 1 {
		return // Num and subsequent fields are skipped.
	}
	if !e.isNumRecursive {
		e.numEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// LabelValueDecoder implements decoding of LabelValue
type LabelValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *LabelValue
	lastVal    LabelValue
	fieldCount uint

	prevType LabelValueType

	// Field decoders.

	strDecoder encoders.StringDictDecoder

	numDecoder     *NumValueDecoder
	isNumRecursive bool

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *LabelValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.LabelValueDecoder != nil {
		panic("cannot initialize LabelValueDecoder: already initialized")
	}
	state.LabelValueDecoder = d
	defer func() { state.LabelValueDecoder = nil }()

	d.allocators = &state.Allocators

	var err error
	d.fieldCount, err = state.StructFieldCounts.LabelValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "LabelValue", err)
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal
	if d.fieldCount <= 0 {
		return nil // Str and subsequent fields are skipped.
	}
	err = d.strDecoder.Init(&state.LabelValue, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Num and subsequent fields are skipped.
	}
	if state.NumValueDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.numDecoder = state.NumValueDecoder
		d.isNumRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.numDecoder = new(NumValueDecoder)
		err = d.numDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *LabelValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Str and subsequent fields are skipped.
	}
	d.strDecoder.Continue()

	if d.fieldCount <= 1 {
		return // Num and subsequent fields are skipped.
	}

	if !d.isNumRecursive {
		d.numDecoder.Continue()
	}

}

func (d *LabelValueDecoder) Reset() {
	d.prevType = 0

	if d.fieldCount <= 0 {
		return // Str and all subsequent fields are skipped.
	}
	d.strDecoder.Reset()
	if d.fieldCount <= 1 {
		return // Num and all subsequent fields are skipped.
	}

	if !d.isNumRecursive {
		d.numDecoder.Reset()
	}

}

func (d *LabelValueDecoder) Decode(dstPtr *LabelValue) error {
	// Read Type delta
	typeDelta := d.buf.ReadVarintCompact()

	// Calculate and validate the new Type
	typ := int(d.prevType) + int(typeDelta)
	if typ < 0 || typ >= int(LabelValueTypeCount) {
		return pkg.ErrInvalidOneOfType
	}

	dst := dstPtr
	if dst.typ != LabelValueType(typ) {
		dst.typ = LabelValueType(typ)
		dst.resetContained()
	}
	d.prevType = LabelValueType(dst.typ)

	// Decode selected field
	switch dst.typ {
	case LabelValueTypeStr:
		// Decode Str
		err := d.strDecoder.Decode(&dst.str)
		if err != nil {
			return err
		}
	case LabelValueTypeNum:
		// Decode Num
		err := d.numDecoder.Decode(&dst.num)
		if err != nil {
			return err
		}
	}
	return nil
}

// LabelValueAllocator implements a custom allocator for LabelValue.
// It maintains a pool of pre-allocated LabelValue and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type LabelValueAllocator struct {
	pool []LabelValue
	ofs  int
}

// Alloc returns the next available LabelValue from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *LabelValueAllocator) Alloc() *LabelValue {
	if a.ofs < len(a.pool) {
		// Get the next available LabelValue from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *LabelValueAllocator) prealloc() *LabelValue {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]LabelValue, newLen)
	a.ofs = 1
	return &a.pool[0]
}
