// Code generated by stefgen. DO NOT EDIT.
package profile

import (
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

// LabelValue is a oneof struct.
type LabelValue struct {
	// The current type of the oneof.
	typ LabelValueType

	str string
	num NumValue

	// Pointer to parent's modifiedFields
	parentModifiedFields *modifiedFields
	// Bit to set in parent's modifiedFields when this oneof is modified.
	parentModifiedBit uint64
}

// Init must be called once, before the LabelValue is used.
func (s *LabelValue) Init() {
	s.init(nil, 0)
}

func (s *LabelValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.num.init(parentModifiedFields, parentModifiedBit)
}

type LabelValueType byte

const (
	LabelValueTypeNone = LabelValueType(iota)
	LabelValueTypeStr
	LabelValueTypeNum
	LabelValueTypeCount
)

// Type returns the type of the value currently contained in LabelValue.
func (s *LabelValue) Type() LabelValueType {
	return s.typ
}

// SetType sets the type of the value currently contained in LabelValue.
func (s *LabelValue) SetType(typ LabelValueType) {
	if s.typ != typ {
		s.typ = typ
		s.markParentModified()
	}
}

// Str returns the value if the contained type is currently LabelValueTypeStr.
// The caller must check the type via Type() before attempting to call this function.
func (s *LabelValue) Str() string {
	return s.str
}

// SetStr sets the value to the specified value and sets the type to LabelValueTypeStr.
func (s *LabelValue) SetStr(v string) {
	if s.typ != LabelValueTypeStr || !pkg.StringEqual(s.str, v) {
		s.str = v
		s.typ = LabelValueTypeStr
		s.markParentModified()
	}
}

// Num returns the value if the contained type is currently LabelValueTypeNum.
// The caller must check the type via Type() before attempting to call this function.
func (s *LabelValue) Num() *NumValue {
	return &s.num
}

func (s *LabelValue) Clone() LabelValue {
	return LabelValue{
		str: s.str,
		num: s.num.Clone(),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *LabelValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.num.byteSize() + 0
}

func copyLabelValue(dst *LabelValue, src *LabelValue) {
	switch src.typ {
	case LabelValueTypeStr:
		dst.SetStr(src.str)
	case LabelValueTypeNum:
		dst.SetType(src.typ)
		copyNumValue(&dst.num, &src.num)
	case LabelValueTypeNone:
		dst.SetType(src.typ)
	default:
		panic("copyLabelValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// CopyFrom() performs a deep copy from src.
func (s *LabelValue) CopyFrom(src *LabelValue) {
	copyLabelValue(s, src)
}

func (s *LabelValue) markParentModified() {
	s.parentModifiedFields.markModified(s.parentModifiedBit)
}

func (s *LabelValue) markUnmodified() {
	s.num.markUnmodified()
}

func (s *LabelValue) markModifiedRecursively() {
	switch s.typ {
	case LabelValueTypeStr:
	case LabelValueTypeNum:
		s.num.markModifiedRecursively()
	}
}

func (s *LabelValue) markUnmodifiedRecursively() {
	switch s.typ {
	case LabelValueTypeStr:
	case LabelValueTypeNum:
		s.num.markUnmodifiedRecursively()
	}
}

// markDiffModified marks fields in this struct modified if they differ from
// the corresponding fields in v.
func (s *LabelValue) markDiffModified(v *LabelValue) (modified bool) {
	if s.typ != v.typ {
		modified = true
		s.markModifiedRecursively()
		return modified
	}

	switch s.typ {
	case LabelValueTypeStr:
		if !pkg.StringEqual(s.str, v.str) {
			s.markParentModified()
			modified = true
		}
	case LabelValueTypeNum:
		if s.num.markDiffModified(&v.num) {
			s.markParentModified()
			modified = true
		}
	}
	return modified
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *LabelValue) IsEqual(val *LabelValue) bool {
	if e.typ != val.typ {
		return false
	}
	switch e.typ {
	case LabelValueTypeStr:
		return pkg.StringEqual(e.str, val.str)
	case LabelValueTypeNum:
		return e.num.IsEqual(&val.num)
	}

	return true
}

func LabelValueEqual(left, right *LabelValue) bool {
	return left.IsEqual(right)
}

// CmpLabelValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpLabelValue(left, right *LabelValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	c := pkg.Uint64Compare(uint64(left.typ), uint64(right.typ))
	if c != 0 {
		return c
	}
	switch left.typ {
	case LabelValueTypeStr:
		return strings.Compare(left.str, right.str)
	case LabelValueTypeNum:
		return CmpNumValue(&left.num, &right.num)
	}

	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *LabelValue) mutateRandom(random *rand.Rand) {
	const fieldCount = 2
	typeChanged := false
	if random.IntN(10) == 0 {
		s.SetType(LabelValueType(random.IntN(fieldCount + 1)))
		typeChanged = true
	}

	switch s.typ {
	case LabelValueTypeStr:
		if typeChanged || random.IntN(2) == 0 {
			s.SetStr(pkg.StringRandom(random))
		}
	case LabelValueTypeNum:
		if typeChanged || random.IntN(2) == 0 {
			s.num.mutateRandom(random)
		}
	}
}

// LabelValueEncoder implements encoding of LabelValue
type LabelValueEncoder struct {
	buf        pkg.BitsWriter
	limiter    *pkg.SizeLimiter
	prevType   LabelValueType
	fieldCount uint

	strEncoder encoders.StringEncoder
	numEncoder NumValueEncoder
}

func (e *LabelValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.LabelValueEncoder != nil {
		panic("cannot initialize LabelValueEncoder: already initialized")
	}
	state.LabelValueEncoder = e
	defer func() { state.LabelValueEncoder = nil }()

	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("LabelValue")
		if !ok {
			return fmt.Errorf("cannot find oneof in override schema: %s", "LabelValue")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 2
	}

	var err error

	if e.fieldCount <= 0 {
		return nil
	}
	err = e.strEncoder.Init(&state.LabelValue, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil
	}
	err = e.numEncoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	return nil
}

func (e *LabelValueEncoder) Reset() {
	e.prevType = 0
	e.strEncoder.Reset()
	e.numEncoder.Reset()
}

// Encode encodes val into buf
func (e *LabelValueEncoder) Encode(val *LabelValue) {
	typ := val.typ
	if uint(typ) > e.fieldCount {
		// The current field type is not supported in target schema. Encode the type as None.
		typ = LabelValueTypeNone
	}

	// Compute type delta. 0 means the type is the same as the last time.
	typDelta := int(typ) - int(e.prevType)
	e.prevType = typ
	bitCount := e.buf.WriteVarintCompact(int64(typDelta))

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Encode currently selected field.
	switch typ {
	case LabelValueTypeStr:
		// Encode Str
		e.strEncoder.Encode(val.str)
	case LabelValueTypeNum:
		// Encode Num
		e.numEncoder.Encode(&val.num)
	}
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *LabelValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Str and subsequent fields are skipped.
	}
	e.strEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // Num and subsequent fields are skipped.
	}
	e.numEncoder.CollectColumns(columnSet.At(1))
}

// LabelValueDecoder implements decoding of LabelValue
type LabelValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *LabelValue
	lastVal    LabelValue
	fieldCount uint

	prevType LabelValueType

	strDecoder encoders.StringDecoder
	numDecoder NumValueDecoder
}

// Init is called once in the lifetime of the stream.
func (d *LabelValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.LabelValueDecoder != nil {
		panic("cannot initialize LabelValueDecoder: already initialized")
	}
	state.LabelValueDecoder = d
	defer func() { state.LabelValueDecoder = nil }()

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("LabelValue")
		if !ok {
			return fmt.Errorf("cannot find oneof in override schema: %s", "LabelValue")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 2
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error
	if d.fieldCount <= 0 {
		return nil // Str and subsequent fields are skipped.
	}
	err = d.strDecoder.Init(&state.LabelValue, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Num and subsequent fields are skipped.
	}
	err = d.numDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *LabelValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Str and subsequent fields are skipped.
	}
	d.strDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Num and subsequent fields are skipped.
	}
	d.numDecoder.Continue()
}

func (d *LabelValueDecoder) Reset() {
	d.prevType = 0
	d.strDecoder.Reset()
	d.numDecoder.Reset()
}

func (d *LabelValueDecoder) Decode(dstPtr *LabelValue) error {
	// Read Type delta
	typeDelta := d.buf.ReadVarintCompact()

	// Calculate and validate the new Type
	typ := int(d.prevType) + int(typeDelta)
	if typ < 0 || typ >= int(LabelValueTypeCount) {
		return pkg.ErrInvalidOneOfType
	}

	dst := dstPtr
	dst.typ = LabelValueType(typ)
	d.prevType = LabelValueType(dst.typ)

	// Decode selected field
	switch dst.typ {
	case LabelValueTypeStr:
		// Decode Str
		err := d.strDecoder.Decode(&dst.str)
		if err != nil {
			return err
		}
	case LabelValueTypeNum:
		// Decode Num
		err := d.numDecoder.Decode(&dst.num)
		if err != nil {
			return err
		}
	}
	return nil
}
