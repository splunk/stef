// Code generated by stefgen. DO NOT EDIT.
package jsonstef

import (
	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = (*encoders.StringEncoder)(nil)

type WriterState struct {
	limiter pkg.SizeLimiter

	// OverrideSchema is set if encoding should perform a translation into the target
	// schema. The specified schema must be compatible with encoders' schema.
	OverrideSchema *schema.WireSchema

	// Dictionaries

	// Encoders that are being Init-ed, to detect recursion.
	JsonObjectEncoder     *JsonObjectEncoder
	JsonValueEncoder      *JsonValueEncoder
	JsonValueArrayEncoder *JsonValueArrayEncoder
	RecordEncoder         *RecordEncoder
}

func (d *WriterState) Init(opts *pkg.WriterOptions) {
	d.limiter.Init(opts)
	d.OverrideSchema = opts.Schema

	// Init dictionaries

}

func (d *WriterState) ResetDicts() {
	d.limiter.ResetDict()
}
