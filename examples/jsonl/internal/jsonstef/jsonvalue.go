// Code generated by stefgen. DO NOT EDIT.
package jsonstef

import (
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

// JsonValue is a oneof struct.
type JsonValue struct {
	// The current type of the oneof.
	typ JsonValueType

	object JsonObject
	array  JsonValueArray
	string string
	number float64
	bool   bool

	// Pointer to parent's modifiedFields
	parentModifiedFields *modifiedFields
	// Bit to set in parent's modifiedFields when this oneof is modified.
	parentModifiedBit uint64
}

// Init must be called once, before the JsonValue is used.
func (s *JsonValue) Init() {
	s.init(nil, 0)
}

func (s *JsonValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.object.init(parentModifiedFields, parentModifiedBit)
	s.array.init(parentModifiedFields, parentModifiedBit)
}

func (s *JsonValue) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.object.initAlloc(parentModifiedFields, parentModifiedBit, allocators)
	s.array.initAlloc(parentModifiedFields, parentModifiedBit, allocators)
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *JsonValue) reset() {
	s.typ = JsonValueTypeNone
	// We don't need to reset the state of the field since that will be done
	// when the type is changed, see SetType().
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *JsonValue) fixParent(parentModifiedFields *modifiedFields) {
	s.parentModifiedFields = parentModifiedFields

	s.object.fixParent(parentModifiedFields)
	s.array.fixParent(parentModifiedFields)
}

type JsonValueType byte

const (
	JsonValueTypeNone = JsonValueType(iota)
	JsonValueTypeObject
	JsonValueTypeArray
	JsonValueTypeString
	JsonValueTypeNumber
	JsonValueTypeBool
	JsonValueTypeCount
)

// Type returns the type of the value currently contained in JsonValue.
func (s *JsonValue) Type() JsonValueType {
	return s.typ
}

// resetContained resets the currently contained value, if any.
// Normally used after switching to a different type to make sure
// the value contained is in blank state.
func (s *JsonValue) resetContained() {
	switch s.typ {
	case JsonValueTypeObject:
		s.object.reset()
	case JsonValueTypeArray:
		s.array.reset()
	}
}

// SetType sets the type of the value currently contained in JsonValue.
func (s *JsonValue) SetType(typ JsonValueType) {
	if s.typ != typ {
		s.typ = typ
		s.resetContained()
		switch typ {
		}
		s.markParentModified()
	}
}

// Object returns the value if the contained type is currently JsonValueTypeObject.
// The caller must check the type via Type() before attempting to call this function.
func (s *JsonValue) Object() *JsonObject {
	return &s.object
}

// Array returns the value if the contained type is currently JsonValueTypeArray.
// The caller must check the type via Type() before attempting to call this function.
func (s *JsonValue) Array() *JsonValueArray {
	return &s.array
}

// String returns the value if the contained type is currently JsonValueTypeString.
// The caller must check the type via Type() before attempting to call this function.
func (s *JsonValue) String() string {
	return s.string
}

// SetString sets the value to the specified value and sets the type to JsonValueTypeString.
func (s *JsonValue) SetString(v string) {
	if s.typ != JsonValueTypeString || !pkg.StringEqual(s.string, v) {
		s.string = v
		s.typ = JsonValueTypeString
		s.markParentModified()
	}
}

// Number returns the value if the contained type is currently JsonValueTypeNumber.
// The caller must check the type via Type() before attempting to call this function.
func (s *JsonValue) Number() float64 {
	return s.number
}

// SetNumber sets the value to the specified value and sets the type to JsonValueTypeNumber.
func (s *JsonValue) SetNumber(v float64) {
	if s.typ != JsonValueTypeNumber || !pkg.Float64Equal(s.number, v) {
		s.number = v
		s.typ = JsonValueTypeNumber
		s.markParentModified()
	}
}

// Bool returns the value if the contained type is currently JsonValueTypeBool.
// The caller must check the type via Type() before attempting to call this function.
func (s *JsonValue) Bool() bool {
	return s.bool
}

// SetBool sets the value to the specified value and sets the type to JsonValueTypeBool.
func (s *JsonValue) SetBool(v bool) {
	if s.typ != JsonValueTypeBool || !pkg.BoolEqual(s.bool, v) {
		s.bool = v
		s.typ = JsonValueTypeBool
		s.markParentModified()
	}
}

func (s *JsonValue) Clone(allocators *Allocators) *JsonValue {
	return &JsonValue{
		object: s.object.Clone(allocators),
		array:  s.array.Clone(allocators),
		string: s.string,
		number: s.number,
		bool:   s.bool,
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *JsonValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.object.byteSize() + s.array.byteSize() + 0
}

// Copy from src to dst, overwriting existing data in dst.
func copyJsonValue(dst *JsonValue, src *JsonValue) {
	switch src.typ {
	case JsonValueTypeObject:
		dst.SetType(src.typ)
		copyJsonObject(&dst.object, &src.object)
	case JsonValueTypeArray:
		dst.SetType(src.typ)
		copyJsonValueArray(&dst.array, &src.array)
	case JsonValueTypeString:
		dst.SetString(src.string)
	case JsonValueTypeNumber:
		dst.SetNumber(src.number)
	case JsonValueTypeBool:
		dst.SetBool(src.bool)
	case JsonValueTypeNone:
		dst.SetType(src.typ)
	default:
		panic("copyJsonValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNewJsonValue(dst *JsonValue, src *JsonValue, allocators *Allocators) {
	dst.typ = src.typ
	switch src.typ {
	case JsonValueTypeObject:
		copyToNewJsonObject(&dst.object, &src.object, allocators)
	case JsonValueTypeArray:
		copyToNewJsonValueArray(&dst.array, &src.array, allocators)
	case JsonValueTypeString:
		dst.string = src.string
	case JsonValueTypeNumber:
		dst.number = src.number
	case JsonValueTypeBool:
		dst.bool = src.bool
	case JsonValueTypeNone:
	default:
		panic("copyJsonValue: unexpected type: " + fmt.Sprint(src.typ))
	}
}

// CopyFrom() performs a deep copy from src.
func (s *JsonValue) CopyFrom(src *JsonValue) {
	copyJsonValue(s, src)
}

func (s *JsonValue) markParentModified() {
	s.parentModifiedFields.markModified(s.parentModifiedBit)
}

func (s *JsonValue) markModifiedRecursively() {
	switch s.typ {
	case JsonValueTypeObject:
		s.object.markModifiedRecursively()
	case JsonValueTypeArray:
		s.array.markModifiedRecursively()
	case JsonValueTypeString:
	case JsonValueTypeNumber:
	case JsonValueTypeBool:
	}
}

func (s *JsonValue) markUnmodifiedRecursively() {
	switch s.typ {
	case JsonValueTypeObject:
		s.object.markUnmodifiedRecursively()
	case JsonValueTypeArray:
		s.array.markUnmodifiedRecursively()
	case JsonValueTypeString:
	case JsonValueTypeNumber:
	case JsonValueTypeBool:
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *JsonValue) IsEqual(val *JsonValue) bool {
	if e.typ != val.typ {
		return false
	}
	switch e.typ {
	case JsonValueTypeObject:
		return e.object.IsEqual(&val.object)
	case JsonValueTypeArray:
		return e.array.IsEqual(&val.array)
	case JsonValueTypeString:
		return pkg.StringEqual(e.string, val.string)
	case JsonValueTypeNumber:
		return pkg.Float64Equal(e.number, val.number)
	case JsonValueTypeBool:
		return pkg.BoolEqual(e.bool, val.bool)
	}

	return true
}

func JsonValueEqual(left, right *JsonValue) bool {
	return left.IsEqual(right)
}

func (s *JsonValue) Hash() uint64 {
	hash := uint64(s.typ) + 4449424576139903557
	switch s.typ {
	case JsonValueTypeObject:
		hash ^= s.object.Hash()
	case JsonValueTypeArray:
		hash ^= s.array.Hash()
	case JsonValueTypeString:
		hash ^= pkg.StringHash(s.string)
	case JsonValueTypeNumber:
		hash ^= pkg.Float64Hash(s.number)
	case JsonValueTypeBool:
		hash ^= pkg.BoolHash(s.bool)
	}
	return hash
}

// CmpJsonValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpJsonValue(left, right *JsonValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	c := pkg.Uint64Compare(uint64(left.typ), uint64(right.typ))
	if c != 0 {
		return c
	}
	switch left.typ {
	case JsonValueTypeObject:
		return CmpJsonObject(&left.object, &right.object)
	case JsonValueTypeArray:
		return CmpJsonValueArray(&left.array, &right.array)
	case JsonValueTypeString:
		return strings.Compare(left.string, right.string)
	case JsonValueTypeNumber:
		return pkg.Float64Compare(left.number, right.number)
	case JsonValueTypeBool:
		return pkg.BoolCompare(left.bool, right.bool)
	}

	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schema are mutated, allowing to generate data for specified schema.
func (s *JsonValue) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this oneof from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// the type of the oneof to the choices that are not in the schema.
	fieldCount, err := schem.FieldCount("JsonValue")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "JsonValue", err))
	}

	typeChanged := false
	if random.IntN(10) == 0 {
		s.SetType(JsonValueType(random.IntN(fieldCount + 1)))
		typeChanged = true
	}

	switch s.typ {
	case JsonValueTypeObject:
		if typeChanged || random.IntN(2) == 0 {
			s.object.mutateRandom(random, schem)
		}
	case JsonValueTypeArray:
		if typeChanged || random.IntN(2) == 0 {
			s.array.mutateRandom(random, schem)
		}
	case JsonValueTypeString:
		if typeChanged || random.IntN(2) == 0 {
			s.SetString(pkg.StringRandom(random))
		}
	case JsonValueTypeNumber:
		if typeChanged || random.IntN(2) == 0 {
			s.SetNumber(pkg.Float64Random(random))
		}
	case JsonValueTypeBool:
		if typeChanged || random.IntN(2) == 0 {
			s.SetBool(pkg.BoolRandom(random))
		}
	}
}

// JsonValueEncoder implements encoding of JsonValue
type JsonValueEncoder struct {
	buf        pkg.BitsWriter
	limiter    *pkg.SizeLimiter
	prevType   JsonValueType
	fieldCount uint

	// Field encoders.

	objectEncoder     *JsonObjectEncoder
	isObjectRecursive bool // Indicates Object field's type is recursive.

	arrayEncoder     *JsonValueArrayEncoder
	isArrayRecursive bool // Indicates Array field's type is recursive.

	stringEncoder encoders.StringEncoder

	numberEncoder encoders.Float64Encoder

	boolEncoder encoders.BoolEncoder
}

func (e *JsonValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.JsonValueEncoder != nil {
		panic("cannot initialize JsonValueEncoder: already initialized")
	}
	state.JsonValueEncoder = e
	defer func() { state.JsonValueEncoder = nil }()

	e.limiter = &state.limiter

	var err error
	e.fieldCount, err = state.StructFieldCounts.JsonValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "JsonValue", err)
	}

	// Init encoder for Object field.
	if e.fieldCount <= 0 {
		// Object and all subsequent fields are skipped.
		return nil
	}
	if state.JsonObjectEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.objectEncoder = state.JsonObjectEncoder
		e.isObjectRecursive = true
	} else {
		e.objectEncoder = new(JsonObjectEncoder)
		err = e.objectEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for Array field.
	if e.fieldCount <= 1 {
		// Array and all subsequent fields are skipped.
		return nil
	}
	if state.JsonValueArrayEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.arrayEncoder = state.JsonValueArrayEncoder
		e.isArrayRecursive = true
	} else {
		e.arrayEncoder = new(JsonValueArrayEncoder)
		err = e.arrayEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	// Init encoder for String field.
	if e.fieldCount <= 2 {
		// String and all subsequent fields are skipped.
		return nil
	}
	err = e.stringEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Number field.
	if e.fieldCount <= 3 {
		// Number and all subsequent fields are skipped.
		return nil
	}
	err = e.numberEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	// Init encoder for Bool field.
	if e.fieldCount <= 4 {
		// Bool and all subsequent fields are skipped.
		return nil
	}
	err = e.boolEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

func (e *JsonValueEncoder) Reset() {
	e.prevType = 0

	if e.fieldCount <= 0 {
		return // Object and all subsequent fields are skipped.
	}

	if !e.isObjectRecursive {
		e.objectEncoder.Reset()
	}

	if e.fieldCount <= 1 {
		return // Array and all subsequent fields are skipped.
	}

	if !e.isArrayRecursive {
		e.arrayEncoder.Reset()
	}

	if e.fieldCount <= 2 {
		return // String and all subsequent fields are skipped.
	}
	e.stringEncoder.Reset()
	if e.fieldCount <= 3 {
		return // Number and all subsequent fields are skipped.
	}
	e.numberEncoder.Reset()
	if e.fieldCount <= 4 {
		return // Bool and all subsequent fields are skipped.
	}
	e.boolEncoder.Reset()
}

// Encode encodes val into buf
func (e *JsonValueEncoder) Encode(val *JsonValue) {
	typ := val.typ
	if uint(typ) > e.fieldCount {
		// The current field type is not supported in target schema. Encode the type as None.
		typ = JsonValueTypeNone
	}

	// Compute type delta. 0 means the type is the same as the last time.
	typDelta := int(typ) - int(e.prevType)
	e.prevType = typ
	bitCount := e.buf.WriteVarintCompact(int64(typDelta))

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Encode currently selected field.
	switch typ {
	case JsonValueTypeObject:
		// Encode Object
		e.objectEncoder.Encode(&val.object)
	case JsonValueTypeArray:
		// Encode Array
		e.arrayEncoder.Encode(&val.array)
	case JsonValueTypeString:
		// Encode String
		e.stringEncoder.Encode(val.string)
	case JsonValueTypeNumber:
		// Encode Number
		e.numberEncoder.Encode(val.number)
	case JsonValueTypeBool:
		// Encode Bool
		e.boolEncoder.Encode(val.bool)
	}
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *JsonValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Object field.
	if e.fieldCount <= 0 {
		return // Object and subsequent fields are skipped.
	}
	if !e.isObjectRecursive {
		e.objectEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect Array field.
	if e.fieldCount <= 1 {
		return // Array and subsequent fields are skipped.
	}
	if !e.isArrayRecursive {
		e.arrayEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}

	// Collect String field.
	if e.fieldCount <= 2 {
		return // String and subsequent fields are skipped.
	}

	e.stringEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Number field.
	if e.fieldCount <= 3 {
		return // Number and subsequent fields are skipped.
	}

	e.numberEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++

	// Collect Bool field.
	if e.fieldCount <= 4 {
		return // Bool and subsequent fields are skipped.
	}

	e.boolEncoder.CollectColumns(columnSet.At(colIdx))
	colIdx++
}

// JsonValueDecoder implements decoding of JsonValue
type JsonValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *JsonValue
	lastVal    JsonValue
	fieldCount uint

	prevType JsonValueType

	// Field decoders.

	objectDecoder     *JsonObjectDecoder
	isObjectRecursive bool

	arrayDecoder     *JsonValueArrayDecoder
	isArrayRecursive bool

	stringDecoder encoders.StringDecoder

	numberDecoder encoders.Float64Decoder

	boolDecoder encoders.BoolDecoder

	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *JsonValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.JsonValueDecoder != nil {
		panic("cannot initialize JsonValueDecoder: already initialized")
	}
	state.JsonValueDecoder = d
	defer func() { state.JsonValueDecoder = nil }()

	d.allocators = &state.Allocators

	var err error
	d.fieldCount, err = state.StructFieldCounts.JsonValueFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "JsonValue", err)
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal
	if d.fieldCount <= 0 {
		return nil // Object and subsequent fields are skipped.
	}
	if state.JsonObjectDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.objectDecoder = state.JsonObjectDecoder
		d.isObjectRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.objectDecoder = new(JsonObjectDecoder)
		err = d.objectDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Array and subsequent fields are skipped.
	}
	if state.JsonValueArrayDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.arrayDecoder = state.JsonValueArrayDecoder
		d.isArrayRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.arrayDecoder = new(JsonValueArrayDecoder)
		err = d.arrayDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // String and subsequent fields are skipped.
	}
	err = d.stringDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Number and subsequent fields are skipped.
	}
	err = d.numberDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // Bool and subsequent fields are skipped.
	}
	err = d.boolDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *JsonValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Object and subsequent fields are skipped.
	}

	if !d.isObjectRecursive {
		d.objectDecoder.Continue()
	}

	if d.fieldCount <= 1 {
		return // Array and subsequent fields are skipped.
	}

	if !d.isArrayRecursive {
		d.arrayDecoder.Continue()
	}

	if d.fieldCount <= 2 {
		return // String and subsequent fields are skipped.
	}
	d.stringDecoder.Continue()

	if d.fieldCount <= 3 {
		return // Number and subsequent fields are skipped.
	}
	d.numberDecoder.Continue()

	if d.fieldCount <= 4 {
		return // Bool and subsequent fields are skipped.
	}
	d.boolDecoder.Continue()

}

func (d *JsonValueDecoder) Reset() {
	d.prevType = 0

	if d.fieldCount <= 0 {
		return // Object and all subsequent fields are skipped.
	}

	if !d.isObjectRecursive {
		d.objectDecoder.Reset()
	}

	if d.fieldCount <= 1 {
		return // Array and all subsequent fields are skipped.
	}

	if !d.isArrayRecursive {
		d.arrayDecoder.Reset()
	}

	if d.fieldCount <= 2 {
		return // String and all subsequent fields are skipped.
	}
	d.stringDecoder.Reset()
	if d.fieldCount <= 3 {
		return // Number and all subsequent fields are skipped.
	}
	d.numberDecoder.Reset()
	if d.fieldCount <= 4 {
		return // Bool and all subsequent fields are skipped.
	}
	d.boolDecoder.Reset()
}

func (d *JsonValueDecoder) Decode(dstPtr *JsonValue) error {
	// Read Type delta
	typeDelta := d.buf.ReadVarintCompact()

	// Calculate and validate the new Type
	typ := int(d.prevType) + int(typeDelta)
	if typ < 0 || typ >= int(JsonValueTypeCount) {
		return pkg.ErrInvalidOneOfType
	}

	dst := dstPtr
	if dst.typ != JsonValueType(typ) {
		dst.typ = JsonValueType(typ)
		dst.resetContained()
	}
	d.prevType = JsonValueType(dst.typ)

	// Decode selected field
	switch dst.typ {
	case JsonValueTypeObject:
		// Decode Object
		err := d.objectDecoder.Decode(&dst.object)
		if err != nil {
			return err
		}
	case JsonValueTypeArray:
		// Decode Array
		err := d.arrayDecoder.Decode(&dst.array)
		if err != nil {
			return err
		}
	case JsonValueTypeString:
		// Decode String
		err := d.stringDecoder.Decode(&dst.string)
		if err != nil {
			return err
		}
	case JsonValueTypeNumber:
		// Decode Number
		err := d.numberDecoder.Decode(&dst.number)
		if err != nil {
			return err
		}
	case JsonValueTypeBool:
		// Decode Bool
		err := d.boolDecoder.Decode(&dst.bool)
		if err != nil {
			return err
		}
	}
	return nil
}

// JsonValueAllocator implements a custom allocator for JsonValue.
// It maintains a pool of pre-allocated JsonValue and grows the pool
// dynamically as needed, up to a maximum size of 64 elements.
type JsonValueAllocator struct {
	pool []JsonValue
	ofs  int
}

// Alloc returns the next available JsonValue from the pool.
// If the pool is exhausted, it grows the pool by doubling its size
// up to a maximum of 64 elements.
func (a *JsonValueAllocator) Alloc() *JsonValue {
	if a.ofs < len(a.pool) {
		// Get the next available JsonValue from the pool
		a.ofs++
		return &a.pool[a.ofs-1]
	}
	// We've exhausted the current pool, prealloc a new pool.
	return a.prealloc()
}

//go:noinline
func (a *JsonValueAllocator) prealloc() *JsonValue {
	// prealloc expands the pool by doubling its size, up to a maximum of 64 elements.
	// If the pool is empty, it starts with 1 element.
	newLen := min(max(len(a.pool)*2, 1), 64)
	a.pool = make([]JsonValue, newLen)
	a.ofs = 1
	return &a.pool[0]
}
