// Code generated by stefgen. DO NOT EDIT.
package jsonstef

import (
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

// JsonValue is a oneof struct.
type JsonValue struct {
	// The current type of the oneof.
	typ JsonValueType

	object JsonObject
	array  JsonValueArray
	string string
	number float64
	bool   bool

	// Pointer to parent's modifiedFields
	parentModifiedFields *modifiedFields
	// Bit to set in parent's modifiedFields when this oneof is modified.
	parentModifiedBit uint64
}

// Init must be called once, before the JsonValue is used.
func (s *JsonValue) Init() {
	s.init(nil, 0)
}

func (s *JsonValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.object.init(parentModifiedFields, parentModifiedBit)
	s.array.init(parentModifiedFields, parentModifiedBit)
}

type JsonValueType byte

const (
	JsonValueTypeNone = JsonValueType(iota)
	JsonValueTypeObject
	JsonValueTypeArray
	JsonValueTypeString
	JsonValueTypeNumber
	JsonValueTypeBool
	JsonValueTypeCount
)

// Type returns the type of the value currently contained in JsonValue.
func (s *JsonValue) Type() JsonValueType {
	return s.typ
}

// SetType sets the type of the value currently contained in JsonValue.
func (s *JsonValue) SetType(typ JsonValueType) {
	if s.typ != typ {
		s.typ = typ
		s.markParentModified()
	}
}

// Object returns the value if the contained type is currently JsonValueTypeObject.
// The caller must check the type via Type() before attempting to call this function.
func (s *JsonValue) Object() *JsonObject {
	return &s.object
}

// Array returns the value if the contained type is currently JsonValueTypeArray.
// The caller must check the type via Type() before attempting to call this function.
func (s *JsonValue) Array() *JsonValueArray {
	return &s.array
}

// String returns the value if the contained type is currently JsonValueTypeString.
// The caller must check the type via Type() before attempting to call this function.
func (s *JsonValue) String() string {
	return s.string
}

// SetString sets the value to the specified value and sets the type to JsonValueTypeString.
func (s *JsonValue) SetString(v string) {
	if !pkg.StringEqual(s.string, v) || s.typ != JsonValueTypeString {
		s.string = v
		s.typ = JsonValueTypeString
		s.markParentModified()
	}
}

// Number returns the value if the contained type is currently JsonValueTypeNumber.
// The caller must check the type via Type() before attempting to call this function.
func (s *JsonValue) Number() float64 {
	return s.number
}

// SetNumber sets the value to the specified value and sets the type to JsonValueTypeNumber.
func (s *JsonValue) SetNumber(v float64) {
	if !pkg.Float64Equal(s.number, v) || s.typ != JsonValueTypeNumber {
		s.number = v
		s.typ = JsonValueTypeNumber
		s.markParentModified()
	}
}

// Bool returns the value if the contained type is currently JsonValueTypeBool.
// The caller must check the type via Type() before attempting to call this function.
func (s *JsonValue) Bool() bool {
	return s.bool
}

// SetBool sets the value to the specified value and sets the type to JsonValueTypeBool.
func (s *JsonValue) SetBool(v bool) {
	if !pkg.BoolEqual(s.bool, v) || s.typ != JsonValueTypeBool {
		s.bool = v
		s.typ = JsonValueTypeBool
		s.markParentModified()
	}
}

func (s *JsonValue) Clone() JsonValue {
	return JsonValue{
		object: s.object.Clone(),
		array:  s.array.Clone(),
		string: s.string,
		number: s.number,
		bool:   s.bool,
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *JsonValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.object.byteSize() + s.array.byteSize() + 0
}

func copyJsonValue(dst *JsonValue, src *JsonValue) {
	switch src.typ {
	case JsonValueTypeObject:
		copyJsonObject(&dst.object, &src.object)
	case JsonValueTypeArray:
		copyJsonValueArray(&dst.array, &src.array)
	case JsonValueTypeString:
		dst.SetString(src.string)
	case JsonValueTypeNumber:
		dst.SetNumber(src.number)
	case JsonValueTypeBool:
		dst.SetBool(src.bool)
	}
	dst.SetType(src.typ)
}

// CopyFrom() performs a deep copy from src.
func (s *JsonValue) CopyFrom(src *JsonValue) {
	copyJsonValue(s, src)
}

func (s *JsonValue) markParentModified() {
	s.parentModifiedFields.markModified(s.parentModifiedBit)
}

func (s *JsonValue) markUnmodified() {
	s.object.markUnmodified()
	s.array.markUnmodified()
}

func (s *JsonValue) markUnmodifiedRecursively() {
	switch s.typ {
	case JsonValueTypeObject:
		s.object.markUnmodifiedRecursively()
	case JsonValueTypeArray:
		s.array.markUnmodifiedRecursively()
	case JsonValueTypeString:
	case JsonValueTypeNumber:
	case JsonValueTypeBool:
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *JsonValue) IsEqual(val *JsonValue) bool {
	if e.typ != val.typ {
		return false
	}
	switch e.typ {
	case JsonValueTypeObject:
		if !e.object.IsEqual(&val.object) {
			return false
		}
	case JsonValueTypeArray:
		if !e.array.IsEqual(&val.array) {
			return false
		}
	case JsonValueTypeString:
		if !pkg.StringEqual(e.string, val.string) {
			return false
		}
	case JsonValueTypeNumber:
		if !pkg.Float64Equal(e.number, val.number) {
			return false
		}
	case JsonValueTypeBool:
		if !pkg.BoolEqual(e.bool, val.bool) {
			return false
		}
	}

	return true
}

func JsonValueEqual(left, right *JsonValue) bool {
	return left.IsEqual(right)
}

// CmpJsonValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpJsonValue(left, right *JsonValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	c := pkg.Uint64Compare(uint64(left.typ), uint64(right.typ))
	if c != 0 {
		return c
	}
	switch left.typ {
	case JsonValueTypeObject:
		if c := CmpJsonObject(&left.object, &right.object); c != 0 {
			return c
		}
	case JsonValueTypeArray:
		if c := CmpJsonValueArray(&left.array, &right.array); c != 0 {
			return c
		}
	case JsonValueTypeString:
		if c := strings.Compare(left.string, right.string); c != 0 {
			return c
		}
	case JsonValueTypeNumber:
		if c := pkg.Float64Compare(left.number, right.number); c != 0 {
			return c
		}
	case JsonValueTypeBool:
		if c := pkg.BoolCompare(left.bool, right.bool); c != 0 {
			return c
		}
	}

	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator.
func (s *JsonValue) mutateRandom(random *rand.Rand) {
	const fieldCount = 5
	typeChanged := false
	if random.IntN(10) == 0 {
		s.SetType(JsonValueType(random.IntN(fieldCount + 1)))
		typeChanged = true
	}

	switch s.typ {
	case JsonValueTypeObject:
		if typeChanged || random.IntN(2) == 0 {
			s.object.mutateRandom(random)
		}
	case JsonValueTypeArray:
		if typeChanged || random.IntN(2) == 0 {
			s.array.mutateRandom(random)
		}
	case JsonValueTypeString:
		if typeChanged || random.IntN(2) == 0 {
			s.SetString(pkg.StringRandom(random))
		}
	case JsonValueTypeNumber:
		if typeChanged || random.IntN(2) == 0 {
			s.SetNumber(pkg.Float64Random(random))
		}
	case JsonValueTypeBool:
		if typeChanged || random.IntN(2) == 0 {
			s.SetBool(pkg.BoolRandom(random))
		}
	}
}

// JsonValueEncoder implements encoding of JsonValue
type JsonValueEncoder struct {
	buf        pkg.BitsWriter
	limiter    *pkg.SizeLimiter
	prevType   JsonValueType
	fieldCount uint

	objectEncoder JsonObjectEncoder
	arrayEncoder  JsonValueArrayEncoder
	stringEncoder encoders.StringEncoder
	numberEncoder encoders.Float64Encoder
	boolEncoder   encoders.BoolEncoder
}

func (e *JsonValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.JsonValueEncoder = e
	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("JsonValue")
		if !ok {
			return fmt.Errorf("cannot find oneof in override schema: %s", "JsonValue")
		}

		// Number of fields in the target schema.
		e.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 5
	}

	var err error

	if e.fieldCount <= 0 {
		return nil
	}
	err = e.objectEncoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil
	}
	err = e.arrayEncoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 2 {
		return nil
	}
	err = e.stringEncoder.Init(nil, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 3 {
		return nil
	}
	err = e.numberEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 4 {
		return nil
	}
	err = e.boolEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	return nil
}

func (e *JsonValueEncoder) Reset() {
	e.prevType = 0
	e.objectEncoder.Reset()
	e.arrayEncoder.Reset()
	e.stringEncoder.Reset()
	e.numberEncoder.Reset()
	e.boolEncoder.Reset()
}

// Encode encodes val into buf
func (e *JsonValueEncoder) Encode(val *JsonValue) {
	oldLen := e.buf.BitCount()

	typ := val.typ
	if uint(typ) > e.fieldCount {
		// The current field type is not supported in target schema. Encode the type as None.
		typ = JsonValueTypeNone
	}

	// Compute type delta. 0 means the type is the same as the last time.
	typDelta := int(typ) - int(e.prevType)
	e.prevType = typ
	e.buf.WriteVarintCompact(int64(typDelta))

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Encode currently selected field.
	switch typ {
	case JsonValueTypeObject:
		// Encode Object
		e.objectEncoder.Encode(&val.object)
	case JsonValueTypeArray:
		// Encode Array
		e.arrayEncoder.Encode(&val.array)
	case JsonValueTypeString:
		// Encode String
		e.stringEncoder.Encode(val.string)
	case JsonValueTypeNumber:
		// Encode Number
		e.numberEncoder.Encode(val.number)
	case JsonValueTypeBool:
		// Encode Bool
		e.boolEncoder.Encode(val.bool)
	}
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *JsonValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Object and subsequent fields are skipped.
	}
	e.objectEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // Array and subsequent fields are skipped.
	}
	e.arrayEncoder.CollectColumns(columnSet.At(1))
	if e.fieldCount <= 2 {
		return // String and subsequent fields are skipped.
	}
	e.stringEncoder.CollectColumns(columnSet.At(2))
	if e.fieldCount <= 3 {
		return // Number and subsequent fields are skipped.
	}
	e.numberEncoder.CollectColumns(columnSet.At(3))
	if e.fieldCount <= 4 {
		return // Bool and subsequent fields are skipped.
	}
	e.boolEncoder.CollectColumns(columnSet.At(4))
}

// JsonValueDecoder implements decoding of JsonValue
type JsonValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *JsonValue
	lastVal    JsonValue
	fieldCount uint

	prevType JsonValueType

	objectDecoder JsonObjectDecoder
	arrayDecoder  JsonValueArrayDecoder
	stringDecoder encoders.StringDecoder
	numberDecoder encoders.Float64Decoder
	boolDecoder   encoders.BoolDecoder
}

// Init is called once in the lifetime of the stream.
func (d *JsonValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.JsonValueDecoder = d

	if state.OverrideSchema != nil {
		fieldCount, ok := state.OverrideSchema.FieldCount("JsonValue")
		if !ok {
			return fmt.Errorf("cannot find oneof in override schema: %s", "JsonValue")
		}

		// Number of fields in the target schema.
		d.fieldCount = fieldCount
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 5
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error
	if d.fieldCount <= 0 {
		return nil // Object and subsequent fields are skipped.
	}
	err = d.objectDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Array and subsequent fields are skipped.
	}
	err = d.arrayDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // String and subsequent fields are skipped.
	}
	err = d.stringDecoder.Init(nil, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Number and subsequent fields are skipped.
	}
	err = d.numberDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 4 {
		return nil // Bool and subsequent fields are skipped.
	}
	err = d.boolDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *JsonValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Object and subsequent fields are skipped.
	}
	d.objectDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Array and subsequent fields are skipped.
	}
	d.arrayDecoder.Continue()
	if d.fieldCount <= 2 {
		return // String and subsequent fields are skipped.
	}
	d.stringDecoder.Continue()
	if d.fieldCount <= 3 {
		return // Number and subsequent fields are skipped.
	}
	d.numberDecoder.Continue()
	if d.fieldCount <= 4 {
		return // Bool and subsequent fields are skipped.
	}
	d.boolDecoder.Continue()
}

func (d *JsonValueDecoder) Reset() {
	d.prevType = 0
	d.objectDecoder.Reset()
	d.arrayDecoder.Reset()
	d.stringDecoder.Reset()
	d.numberDecoder.Reset()
	d.boolDecoder.Reset()
}

func (d *JsonValueDecoder) Decode(dstPtr *JsonValue) error {
	// Read Type delta
	typeDelta, err := d.buf.ReadVarintCompact()
	if err != nil {
		return err
	}

	// Calculate and validate the new Type
	typ := int(d.prevType) + int(typeDelta)
	if typ < 0 || typ >= int(JsonValueTypeCount) {
		return pkg.ErrInvalidOneOfType
	}

	dst := dstPtr
	dst.typ = JsonValueType(typ)
	d.prevType = JsonValueType(dst.typ)

	// Decode selected field
	switch dst.typ {
	case JsonValueTypeObject:
		// Decode Object
		err = d.objectDecoder.Decode(&dst.object)
		if err != nil {
			return err
		}
	case JsonValueTypeArray:
		// Decode Array
		err = d.arrayDecoder.Decode(&dst.array)
		if err != nil {
			return err
		}
	case JsonValueTypeString:
		// Decode String
		err = d.stringDecoder.Decode(&dst.string)
		if err != nil {
			return err
		}
	case JsonValueTypeNumber:
		// Decode Number
		err = d.numberDecoder.Decode(&dst.number)
		if err != nil {
			return err
		}
	case JsonValueTypeBool:
		// Decode Bool
		err = d.boolDecoder.Decode(&dst.bool)
		if err != nil {
			return err
		}
	}
	return nil
}
