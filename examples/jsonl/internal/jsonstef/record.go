// Code generated by stefgen. DO NOT EDIT.
package jsonstef

import (
	"bytes"
	"fmt"
	"math/rand/v2"
	"strings"
	"unsafe"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}
var _ = schema.WireSchema{}
var _ = bytes.NewBuffer

type Record struct {
	value *JsonValue

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

const RecordStructName = "Record"

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedRecordValue = uint64(1 << iota)
)

// Init must be called once, before the Record is used.
func (s *Record) Init() {
	s.init(nil, 0)
}

func NewRecord() *Record {
	var s Record
	s.init(nil, 0)
	return &s
}

func (s *Record) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.value = &JsonValue{}
	s.value.init(&s.modifiedFields, fieldModifiedRecordValue)
}

func (s *Record) Value() *JsonValue {
	return s.value
}

func (s *Record) markValueModified() {
	s.modifiedFields.markModified(fieldModifiedRecordValue)
}

// IsValueModified returns true the value of Value field was modified since
// Record was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Record) IsValueModified() bool {
	return s.modifiedFields.mask&fieldModifiedRecordValue != 0
}

func (s *Record) markModifiedRecursively() {

	s.value.markModifiedRecursively()

	s.modifiedFields.mask =
		fieldModifiedRecordValue | 0
}

func (s *Record) markUnmodifiedRecursively() {

	if s.IsValueModified() {
		s.value.markUnmodifiedRecursively()
	}

	s.modifiedFields.mask = 0
}

// markDiffModified marks fields in this struct modified if they differ from
// the corresponding fields in v.
func (s *Record) markDiffModified(v *Record) (modified bool) {
	if s.value.markDiffModified(v.value) {
		s.modifiedFields.markModified(fieldModifiedRecordValue)
		modified = true
	}

	return modified
}

func (s *Record) Clone() Record {
	return Record{
		value: s.value.Clone(),
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Record) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.value.byteSize() + 0
}

func copyRecord(dst *Record, src *Record) {
	if src.value != nil {
		if dst.value == nil {
			dst.value = &JsonValue{}
			dst.value.init(&dst.modifiedFields, fieldModifiedRecordValue)
		}
		copyJsonValue(dst.value, src.value)
	}
}

// CopyFrom() performs a deep copy from src.
func (s *Record) CopyFrom(src *Record) {
	copyRecord(s, src)
}

func (s *Record) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Record) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.value.markUnmodified()
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schem are mutated, allowing to generate data for specified schema.
func (s *Record) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	// Get the field count for this struct from the schema. If the schema specifies
	// fewer field count than the one we have in this code then we will not mutate
	// fields that are not in the schema.
	fieldCount, err := schem.FieldCount("Record")
	if err != nil {
		panic(fmt.Sprintf("cannot get field count for %s: %v", "Record", err))
	}

	const randRange = max(1, 2) // At least 2 to ensure we don't recurse infinitely if there is only 1 field.

	if fieldCount <= 0 {
		return // Value and all subsequent fields are skipped.
	}
	// Maybe mutate Value
	if random.IntN(randRange) == 0 {
		s.value.mutateRandom(random, schem)
	}
}

// IsEqual performs deep comparison and returns true if struct is equal to right.
func (s *Record) IsEqual(right *Record) bool {
	// Compare Value field.
	if !s.value.IsEqual(right.value) {
		return false
	}

	return true
}

func RecordEqual(left, right *Record) bool {
	return left.IsEqual(right)
}

// CmpRecord performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpRecord(left, right *Record) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	// Compare Value field.
	if c := CmpJsonValue(left.value, right.value); c != 0 {
		return c
	}

	return 0
}

// RecordEncoder implements encoding of Record
type RecordEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	valueEncoder     *JsonValueEncoder
	isValueRecursive bool // Indicates Value field's type is recursive.

	keepFieldMask uint64
	fieldCount    uint
}

func (e *RecordEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	// Remember this encoder in the state so that we can detect recursion.
	if state.RecordEncoder != nil {
		panic("cannot initialize RecordEncoder: already initialized")
	}
	state.RecordEncoder = e
	defer func() { state.RecordEncoder = nil }()

	e.limiter = &state.limiter

	// Number of fields in the output data schema.
	var err error
	e.fieldCount, err = state.StructFieldCounts.RecordFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Record", err)
	}
	// Set that many 1 bits in the keepFieldMask. All fields with higher number
	// will be skipped when encoding.
	e.keepFieldMask = ^(^uint64(0) << e.fieldCount)

	// Init encoder for Value field.
	if e.fieldCount <= 0 {
		return nil // Value and all subsequent fields are skipped.
	}
	if state.JsonValueEncoder != nil {
		// Recursion detected, use the existing encoder.
		e.valueEncoder = state.JsonValueEncoder
		e.isValueRecursive = true
	} else {
		e.valueEncoder = new(JsonValueEncoder)
		err = e.valueEncoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

func (e *RecordEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true

	if e.fieldCount <= 0 {
		return // Value and all subsequent fields are skipped.
	}

	if !e.isValueRecursive {
		e.valueEncoder.Reset()
	}

}

// Encode encodes val into buf
func (e *RecordEncoder) Encode(val *Record) {
	var bitCount uint

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedRecordValue | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)
	bitCount += e.fieldCount

	// Encode modified, present fields.

	if fieldMask&fieldModifiedRecordValue != 0 {
		// Encode Value
		e.valueEncoder.Encode(val.value)
	}

	// Account written bits in the limiter.
	e.limiter.AddFrameBits(bitCount)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *RecordEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	colIdx := 0

	// Collect Value field.
	if e.fieldCount <= 0 {
		return // Value and subsequent fields are skipped.
	}
	if !e.isValueRecursive {
		e.valueEncoder.CollectColumns(columnSet.At(colIdx))
		colIdx++
	}
}

// RecordDecoder implements decoding of Record
type RecordDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Record
	lastVal    Record
	fieldCount uint

	valueDecoder     *JsonValueDecoder
	isValueRecursive bool
}

// Init is called once in the lifetime of the stream.
func (d *RecordDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	// Remember this decoder in the state so that we can detect recursion.
	if state.RecordDecoder != nil {
		panic("cannot initialize RecordDecoder: already initialized")
	}
	state.RecordDecoder = d
	defer func() { state.RecordDecoder = nil }()

	// Number of fields in the input data schema.
	var err error
	d.fieldCount, err = state.StructFieldCounts.RecordFieldCount()
	if err != nil {
		return fmt.Errorf("cannot find struct %s in override schema: %v", "Record", err)
	}

	d.column = columns.Column()

	d.lastVal.Init()
	d.lastValPtr = &d.lastVal

	if d.fieldCount <= 0 {
		return nil // Value and subsequent fields are skipped.
	}
	if state.JsonValueDecoder != nil {
		// Recursion detected, use the existing decoder.
		d.valueDecoder = state.JsonValueDecoder
		d.isValueRecursive = true // Mark that we are using a recursive decoder.
	} else {
		d.valueDecoder = new(JsonValueDecoder)
		err = d.valueDecoder.Init(state, columns.AddSubColumn())
	}
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *RecordDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Value and subsequent fields are skipped.
	}

	if !d.isValueRecursive {
		d.valueDecoder.Continue()
	}

}

func (d *RecordDecoder) Reset() {

	if d.fieldCount <= 0 {
		return // Value and all subsequent fields are skipped.
	}

	if !d.isValueRecursive {
		d.valueDecoder.Reset()
	}

}

func (d *RecordDecoder) Decode(dstPtr *Record) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedRecordValue != 0 {
		// Field is changed and is present, decode it.
		if val.value == nil {
			val.value = &JsonValue{}
			val.value.init(&val.modifiedFields, fieldModifiedRecordValue)
		}

		err = d.valueDecoder.Decode(val.value)
		if err != nil {
			return err
		}
	}

	return nil
}

var wireSchemaRecord = []byte{0x02, 0x01, 0x05}

func RecordWireSchema() (schema.WireSchema, error) {
	var w schema.WireSchema
	if err := w.Deserialize(bytes.NewBuffer([]byte(wireSchemaRecord))); err != nil {
		return w, err
	}
	return w, nil
}
