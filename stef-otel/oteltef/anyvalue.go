// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/tigrannajaryan/stef/stef-go/pkg"
	"github.com/tigrannajaryan/stef/stef-go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

// AnyValue is a oneof struct.
type AnyValue struct {
	// The current type of the oneof.
	typ AnyValueType

	string  string
	bool    bool
	int64   int64
	float64 float64
	array   AnyValueArray
	kVList  KeyValueList
	bytes   pkg.Bytes

	// Pointer to parent's modifiedFields
	parentModifiedFields *modifiedFields
	// Bit to set in parent's modifiedFields when this oneof is modified.
	parentModifiedBit uint64
}

// Init must be called once, before the AnyValue is used.
func (s *AnyValue) Init() {
	s.init(nil, 0)
}

func (s *AnyValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.array.init(parentModifiedFields, parentModifiedBit)
	s.kVList.init(parentModifiedFields, parentModifiedBit)
}

type AnyValueType byte

const (
	AnyValueTypeNone = AnyValueType(iota)
	AnyValueTypeString
	AnyValueTypeBool
	AnyValueTypeInt64
	AnyValueTypeFloat64
	AnyValueTypeArray
	AnyValueTypeKVList
	AnyValueTypeBytes
	AnyValueTypeCount
)

// Type returns the type of the value currently contained in AnyValue.
func (s *AnyValue) Type() AnyValueType {
	return s.typ
}

// SetType sets the type of the value currently contained in AnyValue.
func (s *AnyValue) SetType(typ AnyValueType) {
	if s.typ != typ {
		s.typ = typ
		s.markParentModified()
	}
}

// String returns the value if the contained type is currently AnyValueTypeString.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) String() string {
	return s.string
}

// SetString sets the value to the specified value and sets the type to AnyValueTypeString.
func (s *AnyValue) SetString(v string) {
	if !pkg.StringEqual(s.string, v) || s.typ != AnyValueTypeString {
		s.string = v
		s.typ = AnyValueTypeString
		s.markParentModified()
	}
}

// Bool returns the value if the contained type is currently AnyValueTypeBool.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) Bool() bool {
	return s.bool
}

// SetBool sets the value to the specified value and sets the type to AnyValueTypeBool.
func (s *AnyValue) SetBool(v bool) {
	if !pkg.BoolEqual(s.bool, v) || s.typ != AnyValueTypeBool {
		s.bool = v
		s.typ = AnyValueTypeBool
		s.markParentModified()
	}
}

// Int64 returns the value if the contained type is currently AnyValueTypeInt64.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) Int64() int64 {
	return s.int64
}

// SetInt64 sets the value to the specified value and sets the type to AnyValueTypeInt64.
func (s *AnyValue) SetInt64(v int64) {
	if !pkg.Int64Equal(s.int64, v) || s.typ != AnyValueTypeInt64 {
		s.int64 = v
		s.typ = AnyValueTypeInt64
		s.markParentModified()
	}
}

// Float64 returns the value if the contained type is currently AnyValueTypeFloat64.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) Float64() float64 {
	return s.float64
}

// SetFloat64 sets the value to the specified value and sets the type to AnyValueTypeFloat64.
func (s *AnyValue) SetFloat64(v float64) {
	if !pkg.Float64Equal(s.float64, v) || s.typ != AnyValueTypeFloat64 {
		s.float64 = v
		s.typ = AnyValueTypeFloat64
		s.markParentModified()
	}
}

// Array returns the value if the contained type is currently AnyValueTypeArray.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) Array() *AnyValueArray {
	return &s.array
}

// KVList returns the value if the contained type is currently AnyValueTypeKVList.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) KVList() *KeyValueList {
	return &s.kVList
}

// Bytes returns the value if the contained type is currently AnyValueTypeBytes.
// The caller must check the type via Type() before attempting to call this function.
func (s *AnyValue) Bytes() pkg.Bytes {
	return s.bytes
}

// SetBytes sets the value to the specified value and sets the type to AnyValueTypeBytes.
func (s *AnyValue) SetBytes(v pkg.Bytes) {
	if !pkg.BytesEqual(s.bytes, v) || s.typ != AnyValueTypeBytes {
		s.bytes = v
		s.typ = AnyValueTypeBytes
		s.markParentModified()
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *AnyValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.array.byteSize() + s.kVList.byteSize() + 0
}

func copyAnyValue(dst *AnyValue, src *AnyValue) {
	switch src.typ {
	case AnyValueTypeString:
		dst.SetString(src.string)
	case AnyValueTypeBool:
		dst.SetBool(src.bool)
	case AnyValueTypeInt64:
		dst.SetInt64(src.int64)
	case AnyValueTypeFloat64:
		dst.SetFloat64(src.float64)
	case AnyValueTypeArray:
		copyAnyValueArray(&dst.array, &src.array)
	case AnyValueTypeKVList:
		copyKeyValueList(&dst.kVList, &src.kVList)
	case AnyValueTypeBytes:
		dst.SetBytes(src.bytes)
	}
	dst.SetType(src.typ)
}

// CopyFrom() performs a deep copy from src.
func (s *AnyValue) CopyFrom(src *AnyValue) {
	copyAnyValue(s, src)
}

func (s *AnyValue) markParentModified() {
	s.parentModifiedFields.markModified(s.parentModifiedBit)
}

func (s *AnyValue) markUnmodified() {
	s.array.markUnmodified()
	s.kVList.markUnmodified()
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *AnyValue) IsEqual(val *AnyValue) bool {
	if e.typ != val.typ {
		return false
	}
	switch e.typ {
	case AnyValueTypeString:
		if !pkg.StringEqual(e.string, val.string) {
			return false
		}
	case AnyValueTypeBool:
		if !pkg.BoolEqual(e.bool, val.bool) {
			return false
		}
	case AnyValueTypeInt64:
		if !pkg.Int64Equal(e.int64, val.int64) {
			return false
		}
	case AnyValueTypeFloat64:
		if !pkg.Float64Equal(e.float64, val.float64) {
			return false
		}
	case AnyValueTypeArray:
		if !e.array.IsEqual(&val.array) {
			return false
		}
	case AnyValueTypeKVList:
		if !e.kVList.IsEqual(&val.kVList) {
			return false
		}
	case AnyValueTypeBytes:
		if !pkg.BytesEqual(e.bytes, val.bytes) {
			return false
		}
	}

	return true
}

func AnyValueEqual(left, right *AnyValue) bool {
	return left.IsEqual(right)
}

// CmpAnyValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpAnyValue(left, right *AnyValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	c := pkg.Uint64Compare(uint64(left.typ), uint64(right.typ))
	if c != 0 {
		return c
	}
	switch left.typ {
	case AnyValueTypeString:
		if c := strings.Compare(left.string, right.string); c != 0 {
			return c
		}
	case AnyValueTypeBool:
		if c := pkg.BoolCompare(left.bool, right.bool); c != 0 {
			return c
		}
	case AnyValueTypeInt64:
		if c := pkg.Int64Compare(left.int64, right.int64); c != 0 {
			return c
		}
	case AnyValueTypeFloat64:
		if c := pkg.Float64Compare(left.float64, right.float64); c != 0 {
			return c
		}
	case AnyValueTypeArray:
		if c := CmpAnyValueArray(&left.array, &right.array); c != 0 {
			return c
		}
	case AnyValueTypeKVList:
		if c := CmpKeyValueList(&left.kVList, &right.kVList); c != 0 {
			return c
		}
	case AnyValueTypeBytes:
		if c := pkg.BytesCompare(left.bytes, right.bytes); c != 0 {
			return c
		}
	}

	return 0
}

// AnyValueEncoder implements encoding of AnyValue
type AnyValueEncoder struct {
	buf        pkg.BitsWriter
	limiter    *pkg.SizeLimiter
	prevType   AnyValueType
	fieldCount uint

	stringEncoder  encoders.StringEncoder
	boolEncoder    encoders.BoolEncoder
	int64Encoder   encoders.Int64Encoder
	float64Encoder encoders.Float64Encoder
	arrayEncoder   AnyValueArrayEncoder
	kVListEncoder  KeyValueListEncoder
	bytesEncoder   encoders.BytesEncoder
}

func (e *AnyValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.AnyValueEncoder = e
	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		overrideSchema, ok := state.OverrideSchema.Structs["AnyValue"]
		if !ok || overrideSchema == nil {
			return fmt.Errorf("cannot find oneof in override schema: %s", "AnyValue")
		}

		// Number of fields in the target schema.
		e.fieldCount = uint(len(overrideSchema.Fields))
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 7
	}

	var err error

	if e.fieldCount <= 0 {
		return nil
	}
	err = e.stringEncoder.Init(&state.AnyValueString, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil
	}
	err = e.boolEncoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 2 {
		return nil
	}
	err = e.int64Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 3 {
		return nil
	}
	err = e.float64Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 4 {
		return nil
	}
	err = e.arrayEncoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 5 {
		return nil
	}
	err = e.kVListEncoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 6 {
		return nil
	}
	err = e.bytesEncoder.Init(nil, e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	return nil
}

func (e *AnyValueEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.prevType = 0
	e.stringEncoder.Reset()
	e.boolEncoder.Reset()
	e.int64Encoder.Reset()
	e.float64Encoder.Reset()
	e.arrayEncoder.Reset()
	e.kVListEncoder.Reset()
	e.bytesEncoder.Reset()
}

// Encode encodes val into buf
func (e *AnyValueEncoder) Encode(val *AnyValue) {
	oldLen := e.buf.BitCount()

	typ := val.typ
	if uint(typ) > e.fieldCount {
		// The current field type is not supported in target schema. Encode the type as None.
		typ = AnyValueTypeNone
	}

	// Compute type delta. 0 means the type is the same as the last time.
	typDelta := int(typ) - int(e.prevType)
	e.prevType = typ
	e.buf.WriteVarintCompact(int64(typDelta))

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Encode currently selected field.
	switch typ {
	case AnyValueTypeString:
		// Encode String
		e.stringEncoder.Encode(val.string)
	case AnyValueTypeBool:
		// Encode Bool
		e.boolEncoder.Encode(val.bool)
	case AnyValueTypeInt64:
		// Encode Int64
		e.int64Encoder.Encode(val.int64)
	case AnyValueTypeFloat64:
		// Encode Float64
		e.float64Encoder.Encode(val.float64)
	case AnyValueTypeArray:
		// Encode Array
		e.arrayEncoder.Encode(&val.array)
	case AnyValueTypeKVList:
		// Encode KVList
		e.kVListEncoder.Encode(&val.kVList)
	case AnyValueTypeBytes:
		// Encode Bytes
		e.bytesEncoder.Encode(val.bytes)
	}
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *AnyValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // String and subsequent fields are skipped.
	}
	e.stringEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // Bool and subsequent fields are skipped.
	}
	e.boolEncoder.CollectColumns(columnSet.At(1))
	if e.fieldCount <= 2 {
		return // Int64 and subsequent fields are skipped.
	}
	e.int64Encoder.CollectColumns(columnSet.At(2))
	if e.fieldCount <= 3 {
		return // Float64 and subsequent fields are skipped.
	}
	e.float64Encoder.CollectColumns(columnSet.At(3))
	if e.fieldCount <= 4 {
		return // Array and subsequent fields are skipped.
	}
	e.arrayEncoder.CollectColumns(columnSet.At(4))
	if e.fieldCount <= 5 {
		return // KVList and subsequent fields are skipped.
	}
	e.kVListEncoder.CollectColumns(columnSet.At(5))
	if e.fieldCount <= 6 {
		return // Bytes and subsequent fields are skipped.
	}
	e.bytesEncoder.CollectColumns(columnSet.At(6))
}

// AnyValueDecoder implements decoding of AnyValue
type AnyValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *AnyValue
	lastVal    AnyValue
	fieldCount uint

	prevType AnyValueType

	stringDecoder  encoders.StringDecoder
	boolDecoder    encoders.BoolDecoder
	int64Decoder   encoders.Int64Decoder
	float64Decoder encoders.Float64Decoder
	arrayDecoder   AnyValueArrayDecoder
	kVListDecoder  KeyValueListDecoder
	bytesDecoder   encoders.BytesDecoder
}

// Init is called once in the lifetime of the stream.
func (d *AnyValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.AnyValueDecoder = d

	if state.OverrideSchema != nil {
		overrideSchema, ok := state.OverrideSchema.Structs["AnyValue"]
		if !ok || overrideSchema == nil {
			return fmt.Errorf("cannot find oneof in override schema: %s", "AnyValue")
		}

		// Number of fields in the target schema.
		d.fieldCount = uint(len(overrideSchema.Fields))
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 7
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error
	err = d.stringDecoder.Init(&state.AnyValueString, columns.AddSubColumn())
	if err != nil {
		return err
	}
	err = d.boolDecoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	err = d.int64Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	err = d.float64Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	err = d.arrayDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	err = d.kVListDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	err = d.bytesDecoder.Init(nil, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *AnyValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // String and subsequent fields are skipped.
	}
	d.stringDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Bool and subsequent fields are skipped.
	}
	d.boolDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Int64 and subsequent fields are skipped.
	}
	d.int64Decoder.Continue()
	if d.fieldCount <= 3 {
		return // Float64 and subsequent fields are skipped.
	}
	d.float64Decoder.Continue()
	if d.fieldCount <= 4 {
		return // Array and subsequent fields are skipped.
	}
	d.arrayDecoder.Continue()
	if d.fieldCount <= 5 {
		return // KVList and subsequent fields are skipped.
	}
	d.kVListDecoder.Continue()
	if d.fieldCount <= 6 {
		return // Bytes and subsequent fields are skipped.
	}
	d.bytesDecoder.Continue()
}

func (d *AnyValueDecoder) Reset() {
	d.prevType = 0
	d.stringDecoder.Reset()
	d.boolDecoder.Reset()
	d.int64Decoder.Reset()
	d.float64Decoder.Reset()
	d.arrayDecoder.Reset()
	d.kVListDecoder.Reset()
	d.bytesDecoder.Reset()
}

func (d *AnyValueDecoder) Decode(dstPtr *AnyValue) error {
	// Read Type delta
	typeDelta, err := d.buf.ReadVarintCompact()
	if err != nil {
		return err
	}

	// Calculate and validate the new Type
	typ := int(d.prevType) + int(typeDelta)
	if typ < 0 || typ >= int(AnyValueTypeCount) {
		return pkg.ErrInvalidOneOfType
	}

	dst := dstPtr
	dst.typ = AnyValueType(typ)
	d.prevType = AnyValueType(dst.typ)

	// Decode selected field
	switch dst.typ {
	case AnyValueTypeString:
		// Decode String
		err = d.stringDecoder.Decode(&dst.string)
		if err != nil {
			return err
		}
	case AnyValueTypeBool:
		// Decode Bool
		err = d.boolDecoder.Decode(&dst.bool)
		if err != nil {
			return err
		}
	case AnyValueTypeInt64:
		// Decode Int64
		err = d.int64Decoder.Decode(&dst.int64)
		if err != nil {
			return err
		}
	case AnyValueTypeFloat64:
		// Decode Float64
		err = d.float64Decoder.Decode(&dst.float64)
		if err != nil {
			return err
		}
	case AnyValueTypeArray:
		// Decode Array
		err = d.arrayDecoder.Decode(&dst.array)
		if err != nil {
			return err
		}
	case AnyValueTypeKVList:
		// Decode KVList
		err = d.kVListDecoder.Decode(&dst.kVList)
		if err != nil {
			return err
		}
	case AnyValueTypeBytes:
		// Decode Bytes
		err = d.bytesDecoder.Decode(&dst.bytes)
		if err != nil {
			return err
		}
	}
	return nil
}
