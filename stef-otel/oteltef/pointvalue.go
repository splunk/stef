// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/tigrannajaryan/stef/stef-go/pkg"
	"github.com/tigrannajaryan/stef/stef-go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

// PointValue is a oneof struct.
type PointValue struct {
	// The current type of the oneof.
	typ PointValueType

	int64     int64
	float64   float64
	histogram HistogramValue

	// Pointer to parent's modifiedFields
	parentModifiedFields *modifiedFields
	// Bit to set in parent's modifiedFields when this oneof is modified.
	parentModifiedBit uint64
}

// Init must be called once, before the PointValue is used.
func (s *PointValue) Init() {
	s.init(nil, 0)
}

func (s *PointValue) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.parentModifiedFields = parentModifiedFields
	s.parentModifiedBit = parentModifiedBit

	s.histogram.init(parentModifiedFields, parentModifiedBit)
}

type PointValueType byte

const (
	PointValueTypeNone = PointValueType(iota)
	PointValueTypeInt64
	PointValueTypeFloat64
	PointValueTypeHistogram
	PointValueTypeCount
)

// Type returns the type of the value currently contained in PointValue.
func (s *PointValue) Type() PointValueType {
	return s.typ
}

// SetType sets the type of the value currently contained in PointValue.
func (s *PointValue) SetType(typ PointValueType) {
	if s.typ != typ {
		s.typ = typ
		s.markParentModified()
	}
}

// Int64 returns the value if the contained type is currently PointValueTypeInt64.
// The caller must check the type via Type() before attempting to call this function.
func (s *PointValue) Int64() int64 {
	return s.int64
}

// SetInt64 sets the value to the specified value and sets the type to PointValueTypeInt64.
func (s *PointValue) SetInt64(v int64) {
	if !pkg.Int64Equal(s.int64, v) || s.typ != PointValueTypeInt64 {
		s.int64 = v
		s.typ = PointValueTypeInt64
		s.markParentModified()
	}
}

// Float64 returns the value if the contained type is currently PointValueTypeFloat64.
// The caller must check the type via Type() before attempting to call this function.
func (s *PointValue) Float64() float64 {
	return s.float64
}

// SetFloat64 sets the value to the specified value and sets the type to PointValueTypeFloat64.
func (s *PointValue) SetFloat64(v float64) {
	if !pkg.Float64Equal(s.float64, v) || s.typ != PointValueTypeFloat64 {
		s.float64 = v
		s.typ = PointValueTypeFloat64
		s.markParentModified()
	}
}

// Histogram returns the value if the contained type is currently PointValueTypeHistogram.
// The caller must check the type via Type() before attempting to call this function.
func (s *PointValue) Histogram() *HistogramValue {
	return &s.histogram
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *PointValue) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.histogram.byteSize() + 0
}

func copyPointValue(dst *PointValue, src *PointValue) {
	switch src.typ {
	case PointValueTypeInt64:
		dst.SetInt64(src.int64)
	case PointValueTypeFloat64:
		dst.SetFloat64(src.float64)
	case PointValueTypeHistogram:
		copyHistogramValue(&dst.histogram, &src.histogram)
	}
	dst.SetType(src.typ)
}

// CopyFrom() performs a deep copy from src.
func (s *PointValue) CopyFrom(src *PointValue) {
	copyPointValue(s, src)
}

func (s *PointValue) markParentModified() {
	s.parentModifiedFields.markModified(s.parentModifiedBit)
}

func (s *PointValue) markUnmodified() {
	s.histogram.markUnmodified()
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *PointValue) IsEqual(val *PointValue) bool {
	if e.typ != val.typ {
		return false
	}
	switch e.typ {
	case PointValueTypeInt64:
		if !pkg.Int64Equal(e.int64, val.int64) {
			return false
		}
	case PointValueTypeFloat64:
		if !pkg.Float64Equal(e.float64, val.float64) {
			return false
		}
	case PointValueTypeHistogram:
		if !e.histogram.IsEqual(&val.histogram) {
			return false
		}
	}

	return true
}

func PointValueEqual(left, right *PointValue) bool {
	return left.IsEqual(right)
}

// CmpPointValue performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpPointValue(left, right *PointValue) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	c := pkg.Uint64Compare(uint64(left.typ), uint64(right.typ))
	if c != 0 {
		return c
	}
	switch left.typ {
	case PointValueTypeInt64:
		if c := pkg.Int64Compare(left.int64, right.int64); c != 0 {
			return c
		}
	case PointValueTypeFloat64:
		if c := pkg.Float64Compare(left.float64, right.float64); c != 0 {
			return c
		}
	case PointValueTypeHistogram:
		if c := CmpHistogramValue(&left.histogram, &right.histogram); c != 0 {
			return c
		}
	}

	return 0
}

// PointValueEncoder implements encoding of PointValue
type PointValueEncoder struct {
	buf        pkg.BitsWriter
	limiter    *pkg.SizeLimiter
	prevType   PointValueType
	fieldCount uint

	int64Encoder     encoders.Int64Encoder
	float64Encoder   encoders.Float64Encoder
	histogramEncoder HistogramValueEncoder
}

func (e *PointValueEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.PointValueEncoder = e
	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		overrideSchema, ok := state.OverrideSchema.Structs["PointValue"]
		if !ok || overrideSchema == nil {
			return fmt.Errorf("cannot find oneof in override schema: %s", "PointValue")
		}

		// Number of fields in the target schema.
		e.fieldCount = uint(len(overrideSchema.Fields))
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 3
	}

	var err error

	if e.fieldCount <= 0 {
		return nil
	}
	err = e.int64Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil
	}
	err = e.float64Encoder.Init(e.limiter, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if e.fieldCount <= 2 {
		return nil
	}
	err = e.histogramEncoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	return nil
}

func (e *PointValueEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.prevType = 0
	e.int64Encoder.Reset()
	e.float64Encoder.Reset()
	e.histogramEncoder.Reset()
}

// Encode encodes val into buf
func (e *PointValueEncoder) Encode(val *PointValue) {
	oldLen := e.buf.BitCount()

	typ := val.typ
	if uint(typ) > e.fieldCount {
		// The current field type is not supported in target schema. Encode the type as None.
		typ = PointValueTypeNone
	}

	// Compute type delta. 0 means the type is the same as the last time.
	typDelta := int(typ) - int(e.prevType)
	e.prevType = typ
	e.buf.WriteVarintCompact(int64(typDelta))

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Encode currently selected field.
	switch typ {
	case PointValueTypeInt64:
		// Encode Int64
		e.int64Encoder.Encode(val.int64)
	case PointValueTypeFloat64:
		// Encode Float64
		e.float64Encoder.Encode(val.float64)
	case PointValueTypeHistogram:
		// Encode Histogram
		e.histogramEncoder.Encode(&val.histogram)
	}
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *PointValueEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Int64 and subsequent fields are skipped.
	}
	e.int64Encoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // Float64 and subsequent fields are skipped.
	}
	e.float64Encoder.CollectColumns(columnSet.At(1))
	if e.fieldCount <= 2 {
		return // Histogram and subsequent fields are skipped.
	}
	e.histogramEncoder.CollectColumns(columnSet.At(2))
}

// PointValueDecoder implements decoding of PointValue
type PointValueDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *PointValue
	lastVal    PointValue
	fieldCount uint

	prevType PointValueType

	int64Decoder     encoders.Int64Decoder
	float64Decoder   encoders.Float64Decoder
	histogramDecoder HistogramValueDecoder
}

// Init is called once in the lifetime of the stream.
func (d *PointValueDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.PointValueDecoder = d

	if state.OverrideSchema != nil {
		overrideSchema, ok := state.OverrideSchema.Structs["PointValue"]
		if !ok || overrideSchema == nil {
			return fmt.Errorf("cannot find oneof in override schema: %s", "PointValue")
		}

		// Number of fields in the target schema.
		d.fieldCount = uint(len(overrideSchema.Fields))
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 3
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error
	err = d.int64Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	err = d.float64Decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	err = d.histogramDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *PointValueDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Int64 and subsequent fields are skipped.
	}
	d.int64Decoder.Continue()
	if d.fieldCount <= 1 {
		return // Float64 and subsequent fields are skipped.
	}
	d.float64Decoder.Continue()
	if d.fieldCount <= 2 {
		return // Histogram and subsequent fields are skipped.
	}
	d.histogramDecoder.Continue()
}

func (d *PointValueDecoder) Reset() {
	d.prevType = 0
	d.int64Decoder.Reset()
	d.float64Decoder.Reset()
	d.histogramDecoder.Reset()
}

func (d *PointValueDecoder) Decode(dstPtr *PointValue) error {
	// Read Type delta
	typeDelta, err := d.buf.ReadVarintCompact()
	if err != nil {
		return err
	}

	// Calculate and validate the new Type
	typ := int(d.prevType) + int(typeDelta)
	if typ < 0 || typ >= int(PointValueTypeCount) {
		return pkg.ErrInvalidOneOfType
	}

	dst := dstPtr
	dst.typ = PointValueType(typ)
	d.prevType = PointValueType(dst.typ)

	// Decode selected field
	switch dst.typ {
	case PointValueTypeInt64:
		// Decode Int64
		err = d.int64Decoder.Decode(&dst.int64)
		if err != nil {
			return err
		}
	case PointValueTypeFloat64:
		// Decode Float64
		err = d.float64Decoder.Decode(&dst.float64)
		if err != nil {
			return err
		}
	case PointValueTypeHistogram:
		// Decode Histogram
		err = d.histogramDecoder.Decode(&dst.histogram)
		if err != nil {
			return err
		}
	}
	return nil
}
