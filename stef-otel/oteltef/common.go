// Code generated by stefgen. DO NOT EDIT.
package oteltef

type modifiedFields struct {
	// mask is a bitfield that tracks the state of the modified fields of the containing struct.
	// mask has a 1 bit set for all modified fields.
	mask uint64

	// When any field on this struct is modified, we also mark this struct as modified
	// in its containing parent struct. To be able to do that we keep a pointer to parent
	// and the bit to set.

	// parent's modifiedFields
	parent *modifiedFields

	// the bit that corresponds to this struct's field in the parent struct
	parentBit uint64
}

func (m *modifiedFields) markModified(fieldBit uint64) {
	if m != nil && m.mask&fieldBit == 0 {
		m.markModifiedSlow(fieldBit)
	}
}

func (m *modifiedFields) isModified(fieldBit uint64) bool {
	return m != nil && m.mask&fieldBit != 0
}

func (m *modifiedFields) markModifiedSlow(fieldBit uint64) {
	m.mask |= fieldBit
	child := m
	parent := m.parent
	for parent != nil {
		if parent.mask&child.parentBit == 0 {
			parent.mask |= child.parentBit
			child = parent
			parent = parent.parent
		} else {
			break
		}
	}
}

func (m *modifiedFields) markUnmodified() {
	m.mask = 0
}
