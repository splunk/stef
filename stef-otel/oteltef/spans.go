// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/tigrannajaryan/stef/stef-go/pkg"
	"github.com/tigrannajaryan/stef/stef-go/pkg/encoders"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

type Spans struct {
	envelope Envelope
	resource *Resource
	scope    *Scope
	span     Span

	// modifiedFields keeps track of which fields are modified.
	modifiedFields modifiedFields
}

// Bitmasks for "modified" flags for each field.
const (
	fieldModifiedSpansEnvelope = uint64(1 << iota)
	fieldModifiedSpansResource
	fieldModifiedSpansScope
	fieldModifiedSpansSpan
)

// Init must be called once, before the Spans is used.
func (s *Spans) Init() {
	s.init(nil, 0)
}

func NewSpans() *Spans {
	var s Spans
	s.init(nil, 0)
	return &s
}

func (s *Spans) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	s.modifiedFields.parent = parentModifiedFields
	s.modifiedFields.parentBit = parentModifiedBit

	s.envelope.init(&s.modifiedFields, fieldModifiedSpansEnvelope)
	s.resource = &Resource{}
	s.resource.init(&s.modifiedFields, fieldModifiedSpansResource)
	s.scope = &Scope{}
	s.scope.init(&s.modifiedFields, fieldModifiedSpansScope)
	s.span.init(&s.modifiedFields, fieldModifiedSpansSpan)
}

func (s *Spans) Envelope() *Envelope {
	return &s.envelope
}

// IsEnvelopeModified returns true the value of Envelope field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsEnvelopeModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansEnvelope != 0
}

func (s *Spans) Resource() *Resource {
	return s.resource
}

// IsResourceModified returns true the value of Resource field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsResourceModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansResource != 0
}

func (s *Spans) Scope() *Scope {
	return s.scope
}

// IsScopeModified returns true the value of Scope field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsScopeModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansScope != 0
}

func (s *Spans) Span() *Span {
	return &s.span
}

// IsSpanModified returns true the value of Span field was modified since
// Spans was created, encoded or decoded. If the field is modified
// it will be encoded by the next Write() operation. If the field is decoded by the
// next Read() operation the modified flag will be set.
func (s *Spans) IsSpanModified() bool {
	return s.modifiedFields.mask&fieldModifiedSpansSpan != 0
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *Spans) byteSize() uint {
	return uint(unsafe.Sizeof(*s)) +
		s.envelope.byteSize() + s.resource.byteSize() + s.scope.byteSize() + s.span.byteSize() + 0
}

func copySpans(dst *Spans, src *Spans) {
	copyEnvelope(&dst.envelope, &src.envelope)
	copyResource(dst.resource, src.resource)
	copyScope(dst.scope, src.scope)
	copySpan(&dst.span, &src.span)
}

// CopyFrom() performs a deep copy from src.
func (s *Spans) CopyFrom(src *Spans) {
	copySpans(s, src)
}

func (s *Spans) markParentModified() {
	s.modifiedFields.parent.markModified(s.modifiedFields.parentBit)
}

func (s *Spans) markUnmodified() {
	s.modifiedFields.markUnmodified()
	s.envelope.markUnmodified()
	s.resource.markUnmodified()
	s.scope.markUnmodified()
	s.span.markUnmodified()
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *Spans) IsEqual(val *Spans) bool {
	if !e.envelope.IsEqual(&val.envelope) {
		return false
	}
	if !e.resource.IsEqual(val.resource) {
		return false
	}
	if !e.scope.IsEqual(val.scope) {
		return false
	}
	if !e.span.IsEqual(&val.span) {
		return false
	}

	return true
}

func SpansEqual(left, right *Spans) bool {
	return left.IsEqual(right)
}

// CmpSpans performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpSpans(left, right *Spans) int {
	if left == nil {
		if right == nil {
			return 0
		}
		return -1
	}
	if right == nil {
		return 1
	}

	if c := CmpEnvelope(&left.envelope, &right.envelope); c != 0 {
		return c
	}
	if c := CmpResource(left.resource, right.resource); c != 0 {
		return c
	}
	if c := CmpScope(left.scope, right.scope); c != 0 {
		return c
	}
	if c := CmpSpan(&left.span, &right.span); c != 0 {
		return c
	}

	return 0
}

// SpansEncoder implements encoding of Spans
type SpansEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter

	// forceModifiedFields is set to true if the next encoding operation
	// must write all fields, whether they are modified or no.
	// This is used after frame restarts so that the data can be decoded
	// from the frame start.
	forceModifiedFields bool

	envelopeEncoder EnvelopeEncoder
	resourceEncoder ResourceEncoder
	scopeEncoder    ScopeEncoder
	spanEncoder     SpanEncoder

	keepFieldMask uint64
	fieldCount    uint
}

func (e *SpansEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	state.SpansEncoder = e
	e.limiter = &state.limiter

	if state.OverrideSchema != nil {
		overrideSchema, ok := state.OverrideSchema.Structs["Spans"]
		if !ok || overrideSchema == nil {
			return fmt.Errorf("cannot find struct in override schema: %s", "Spans")
		}

		// Number of fields in the target schema.
		e.fieldCount = uint(len(overrideSchema.Fields))

		// Set that many 1 bits in the keepFieldMask. All fields with higher number
		// will be skipped when encoding.
		e.keepFieldMask = ^(^uint64(0) << e.fieldCount)
	} else {
		// Keep all fields when encoding.
		e.fieldCount = 4
		e.keepFieldMask = ^uint64(0)
	}

	if e.fieldCount <= 0 {
		return nil // Envelope and subsequent fields are skipped.
	}
	if err := e.envelopeEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 1 {
		return nil // Resource and subsequent fields are skipped.
	}
	if err := e.resourceEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 2 {
		return nil // Scope and subsequent fields are skipped.
	}
	if err := e.scopeEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}
	if e.fieldCount <= 3 {
		return nil // Span and subsequent fields are skipped.
	}
	if err := e.spanEncoder.Init(state, columns.AddSubColumn()); err != nil {
		return err
	}

	return nil
}

func (e *SpansEncoder) Reset() {
	// Since we are resetting the state of encoder make sure the next Encode()
	// call forcedly writes all fields and does not attempt to skip.
	e.forceModifiedFields = true
	e.envelopeEncoder.Reset()
	e.resourceEncoder.Reset()
	e.scopeEncoder.Reset()
	e.spanEncoder.Reset()
}

// Encode encodes val into buf
func (e *SpansEncoder) Encode(val *Spans) {
	oldLen := e.buf.BitCount()

	// Mask that describes what fields are encoded. Start with all modified fields.
	fieldMask := val.modifiedFields.mask

	// If forceModifiedFields we need to set to 1 all bits so that we
	// force writing of all fields.
	if e.forceModifiedFields {
		fieldMask =
			fieldModifiedSpansEnvelope |
				fieldModifiedSpansResource |
				fieldModifiedSpansScope |
				fieldModifiedSpansSpan | 0
	}

	// Only write fields that we want to write. See Init() for keepFieldMask.
	fieldMask &= e.keepFieldMask

	// Write bits to indicate which fields follow.
	e.buf.WriteBits(fieldMask, e.fieldCount)

	// Encode modified, present fields.

	if fieldMask&fieldModifiedSpansEnvelope != 0 {
		// Encode Envelope
		e.envelopeEncoder.Encode(&val.envelope)
	}

	if fieldMask&fieldModifiedSpansResource != 0 {
		// Encode Resource
		e.resourceEncoder.Encode(val.resource)
	}

	if fieldMask&fieldModifiedSpansScope != 0 {
		// Encode Scope
		e.scopeEncoder.Encode(val.scope)
	}

	if fieldMask&fieldModifiedSpansSpan != 0 {
		// Encode Span
		e.spanEncoder.Encode(&val.span)
	}

	// Account written bits in the limiter.
	newLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newLen - oldLen)

	// Mark all fields non-modified so that next Encode() correctly
	// encodes only fields that change after this.
	val.modifiedFields.mask = 0
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *SpansEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)

	if e.fieldCount <= 0 {
		return // Envelope and subsequent fields are skipped.
	}
	e.envelopeEncoder.CollectColumns(columnSet.At(0))
	if e.fieldCount <= 1 {
		return // Resource and subsequent fields are skipped.
	}
	e.resourceEncoder.CollectColumns(columnSet.At(1))
	if e.fieldCount <= 2 {
		return // Scope and subsequent fields are skipped.
	}
	e.scopeEncoder.CollectColumns(columnSet.At(2))
	if e.fieldCount <= 3 {
		return // Span and subsequent fields are skipped.
	}
	e.spanEncoder.CollectColumns(columnSet.At(3))
}

// SpansDecoder implements decoding of Spans
type SpansDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	lastValPtr *Spans
	lastVal    Spans
	fieldCount uint

	envelopeDecoder EnvelopeDecoder
	resourceDecoder ResourceDecoder
	scopeDecoder    ScopeDecoder
	spanDecoder     SpanDecoder
}

// Init is called once in the lifetime of the stream.
func (d *SpansDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	state.SpansDecoder = d

	if state.OverrideSchema != nil {
		overrideSchema, ok := state.OverrideSchema.Structs["Spans"]
		if !ok || overrideSchema == nil {
			return fmt.Errorf("cannot find struct in override schema: %s", "Spans")
		}

		// Number of fields in the target schema.
		d.fieldCount = uint(len(overrideSchema.Fields))
	} else {
		// Keep all fields when encoding.
		d.fieldCount = 4
	}

	d.column = columns.Column()

	d.lastVal.init(nil, 0)
	d.lastValPtr = &d.lastVal

	var err error

	if d.fieldCount <= 0 {
		return nil // Envelope and subsequent fields are skipped.
	}
	err = d.envelopeDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 1 {
		return nil // Resource and subsequent fields are skipped.
	}
	err = d.resourceDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 2 {
		return nil // Scope and subsequent fields are skipped.
	}
	err = d.scopeDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}
	if d.fieldCount <= 3 {
		return nil // Span and subsequent fields are skipped.
	}
	err = d.spanDecoder.Init(state, columns.AddSubColumn())
	if err != nil {
		return err
	}

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *SpansDecoder) Continue() {
	d.buf.Reset(d.column.Data())

	if d.fieldCount <= 0 {
		return // Envelope and subsequent fields are skipped.
	}
	d.envelopeDecoder.Continue()
	if d.fieldCount <= 1 {
		return // Resource and subsequent fields are skipped.
	}
	d.resourceDecoder.Continue()
	if d.fieldCount <= 2 {
		return // Scope and subsequent fields are skipped.
	}
	d.scopeDecoder.Continue()
	if d.fieldCount <= 3 {
		return // Span and subsequent fields are skipped.
	}
	d.spanDecoder.Continue()
}

func (d *SpansDecoder) Reset() {
	d.envelopeDecoder.Reset()
	d.resourceDecoder.Reset()
	d.scopeDecoder.Reset()
	d.spanDecoder.Reset()
}

func (d *SpansDecoder) Decode(dstPtr *Spans) error {
	val := dstPtr

	var err error

	// Read bits that indicate which fields follow.
	val.modifiedFields.mask = d.buf.ReadBits(d.fieldCount)

	if val.modifiedFields.mask&fieldModifiedSpansEnvelope != 0 {
		// Field is changed and is present, decode it.
		err = d.envelopeDecoder.Decode(&val.envelope)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSpansResource != 0 {
		// Field is changed and is present, decode it.
		err = d.resourceDecoder.Decode(&val.resource)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSpansScope != 0 {
		// Field is changed and is present, decode it.
		err = d.scopeDecoder.Decode(&val.scope)
		if err != nil {
			return err
		}
	}

	if val.modifiedFields.mask&fieldModifiedSpansSpan != 0 {
		// Field is changed and is present, decode it.
		err = d.spanDecoder.Decode(&val.span)
		if err != nil {
			return err
		}
	}

	return nil
}
