// Code generated by stefgen. DO NOT EDIT.
package oteltef

import (
	"slices"

	"unsafe"

	"github.com/tigrannajaryan/stef/stef-go/pkg"
	"github.com/tigrannajaryan/stef/stef-go/pkg/encoders"
)

var _ = encoders.StringEncoder{}

// Int64Array is a variable size array.
type Int64Array struct {
	elems []int64

	parentModifiedFields *modifiedFields
	parentModifiedBit    uint64
}

func (e *Int64Array) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	e.parentModifiedFields = parentModifiedFields
	e.parentModifiedBit = parentModifiedBit
}

// Clone() creates a deep copy of Int64Array
func (e *Int64Array) Clone() Int64Array {
	var clone Int64Array
	copyInt64Array(&clone, e)
	return clone
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (e *Int64Array) byteSize() uint {
	if len(e.elems) == 0 {
		return 0
	}
	// TODO: add size of elements if they are clonable.
	size := uint(unsafe.Sizeof(e.elems[0]))*uint(len(e.elems)) + uint(unsafe.Sizeof(e))

	return size
}

// CopyFromSlice copies from a slice into this array. The length
// of the array will be equal to the length of slice and elements of
// the array will be assigned from elements of the slice.
func (e *Int64Array) CopyFromSlice(src []int64) {
	if !slices.Equal(e.elems, src) {
		e.elems = pkg.EnsureLen(e.elems, len(src))
		copy(e.elems, src)
		e.markModified()
	}
}

// Append a new element at the end of the array.
func (e *Int64Array) Append(val int64) {
	e.elems = append(e.elems, val)
	e.markModified()
}

func (e *Int64Array) markModified() {
	e.parentModifiedFields.markModified(e.parentModifiedBit)
}

func (e *Int64Array) markUnmodified() {
	e.parentModifiedFields.markUnmodified()
}

func copyInt64Array(dst *Int64Array, src *Int64Array) {
	if len(dst.elems) != len(src.elems) {
		n := min(len(dst.elems), len(src.elems))
		dst.elems = pkg.EnsureLen(dst.elems, len(src.elems))

		i := 0
		for ; i < n; i++ {
			if dst.elems[i] != src.elems[i] {
				dst.elems[i] = src.elems[i]
			}
		}
		for ; i < len(dst.elems); i++ {
			dst.elems[i] = src.elems[i]
		}
		dst.markModified()
	} else {
		modified := false
		for i := 0; i < len(dst.elems); i++ {
			if dst.elems[i] != src.elems[i] {
				dst.elems[i] = src.elems[i]
				modified = true
			}
		}
		if modified {
			dst.markModified()
		}
	}
}

// Len returns the number of elements in the array.
func (e *Int64Array) Len() int {
	return len(e.elems)
}

// At returns element at index i.
func (m *Int64Array) At(i int) int64 {
	return m.elems[i]
}

// EnsureLen ensures the length of the array is equal to newLen.
// It will grow or shrink the array if needed.
func (e *Int64Array) EnsureLen(newLen int) {
	oldLen := len(e.elems)
	if newLen > oldLen {
		// Grow the array
		e.elems = append(e.elems, make([]int64, newLen-oldLen)...)
		e.markModified()
	} else if oldLen > newLen {
		// Shrink it
		e.elems = e.elems[:newLen]
		e.markModified()
	}
}

// IsEqual performs deep comparison and returns true if array is equal to val.
func (e *Int64Array) IsEqual(val *Int64Array) bool {
	if len(e.elems) != len(val.elems) {
		return false
	}
	for i := range e.elems {
		if !pkg.Int64Equal(e.elems[i], val.elems[i]) {
			return false
		}
	}
	return true
}

// CmpInt64Array performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func CmpInt64Array(left, right *Int64Array) int {
	c := len(left.elems) - len(right.elems)
	if c != 0 {
		return c
	}
	for i := range left.elems {
		fc := pkg.Int64Compare(left.elems[i], right.elems[i])
		if fc < 0 {
			return -1
		}
		if fc > 0 {
			return 1
		}
	}
	return 0
}

type Int64ArrayEncoder struct {
	buf     pkg.BitsWriter
	limiter *pkg.SizeLimiter
	encoder encoders.Int64Encoder
	prevLen int
	state   *WriterState
	lastVal int64
}

func (e *Int64ArrayEncoder) Init(state *WriterState, columns *pkg.WriteColumnSet) error {
	e.state = state
	e.limiter = &state.limiter
	if err := e.encoder.Init(e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	return nil
}

func (e *Int64ArrayEncoder) Reset() {
	e.prevLen = 0
	e.encoder.Reset()
}

func (e *Int64ArrayEncoder) Encode(arr *Int64Array) {
	newLen := len(arr.elems)
	oldBitLen := e.buf.BitCount()

	lenDelta := newLen - e.prevLen
	e.prevLen = newLen
	e.buf.WriteVarintCompact(int64(lenDelta))

	for i := 0; i < newLen; i++ {
		e.encoder.Encode(arr.elems[i])
	}

	// Account written bits in the limiter.
	newBitLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newBitLen - oldBitLen)
}

func (e *Int64ArrayEncoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	e.encoder.CollectColumns(columnSet.At(0))
}

type Int64ArrayDecoder struct {
	buf        pkg.BitsReader
	column     *pkg.ReadableColumn
	decoder    encoders.Int64Decoder
	prevLen    int
	lastVal    int64
	lastValPtr *int64
}

// Init is called once in the lifetime of the stream.
func (d *Int64ArrayDecoder) Init(state *ReaderState, columns *pkg.ReadColumnSet) error {
	d.column = columns.Column()
	err := d.decoder.Init(columns.AddSubColumn())
	if err != nil {
		return err
	}
	d.lastValPtr = &d.lastVal

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *Int64ArrayDecoder) Continue() {
	d.buf.Reset(d.column.Data())
	d.decoder.Continue()
}

func (d *Int64ArrayDecoder) Reset() {
	d.decoder.Reset()
}

func (d *Int64ArrayDecoder) Decode(dst *Int64Array) error {
	lenDelta, err := d.buf.ReadVarintCompact()
	if err != nil {
		return err
	}

	newLen := d.prevLen + int(lenDelta)

	dst.EnsureLen(newLen)

	d.prevLen = newLen

	for i := 0; i < newLen; i++ {
		err = d.decoder.Decode(&d.lastVal)
		if err != nil {
			return err
		}
		dst.elems[i] = d.lastVal
	}

	return nil
}
