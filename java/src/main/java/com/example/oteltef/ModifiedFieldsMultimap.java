// Code generated by stefc. DO NOT EDIT.
// com.example.oteltef.ModifiedFields Java class generated from template
package com.example.oteltef;

/**
 * ModifiedFieldsMultimap tracks modified elements of a multimap.
 */
public class ModifiedFieldsMultimap {
    // Bit in modifiedFields that indicates if the key or value at the particular index
    // of multimap elems array is modified.
    // For multimaps larger than 63 elements we don't track individual element
    // modifications and just mark that the entire multimap is modified.
    ModifiedFields keys = new ModifiedFields();
    ModifiedFields vals = new ModifiedFields();

    // Indicates if the length of the multimap elems array was modified.
    boolean modifiedLen;

    void init(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        keys.init(parentModifiedFields, parentModifiedBit);
        vals.init(parentModifiedFields, parentModifiedBit);
    }

    void fixParent(ModifiedFields parentModifiedFields) {
        this.keys.parent = parentModifiedFields;
        this.vals.parent = parentModifiedFields;
    }
    
    // Returns a bitmask to be set in keys or vals to mark modification of
    // multimap element at index.
    long maskForIndex(int index) {
        if (index >= 64) {
            // For multimaps larger than 63 elements we don't track individual element
            // modifications and just mark that the entire multimap is modified.
            // Set all bits to indicate that an element with index 64 or higher is modified.
            return ~0L;
        } else {
            return 1L << index;
        }
    }
    
    void markKeyModified(int index) {
        if (index >= 64) {
            keys.markModified(~0L);
        } else {
            keys.markModified(1 << index);
        }
    }
    
    void markValModified(int index) {
        if (index >= 64) {
            vals.markModified(~0L);
        } else {
            vals.markModified(1 << index);
        }
    }
    
    void markUnmodifiedAll() {
        keys.markUnmodifiedAll();
        vals.markUnmodifiedAll();
        modifiedLen = false;
    }
    
    void changeLen(int oldLen, int newLen) {
        // Even if no elems changed in this object (e.g. it was shrunk),
        // we still need to mark this object as modified in the parent since
        // the length has changed.
        keys.markParentModified();
        modifiedLen = true;
    
        if (newLen >= 64) {
            // If the new length is 64 or more, we just mark all elements as modified.
            keys.markModified(~0L);
            vals.markModified(~0L);
            return;
        }
    
        // Clear bits (unmodify) for elements that are now out of length range.
        long unmodifiedMask = ~(~0L << newLen);
        keys.mask &= unmodifiedMask;
        vals.mask &= unmodifiedMask;
    
        if (newLen >= oldLen) {
            // Mark newly created elements in [oldLen,newLen] range as modified since they
            // didn't exist before.
            long modifiedMask = unmodifiedMask & (~0L << oldLen);
    
            keys.mask |= modifiedMask;
            vals.mask |= modifiedMask;
        }
    }
    
    // areKeysModified returns true if the length or any key was modified.
    boolean areKeysModified() {
        return modifiedLen || keys.mask!=0;
    }
}
