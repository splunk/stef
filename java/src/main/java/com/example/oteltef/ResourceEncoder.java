// Code generated by stefgen. DO NOT EDIT.
// ResourceEncoder implements encoding of Resource
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class ResourceEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;

    // forceModifiedFields is set to true if the next encoding operation
    // must write all fields, whether they are modified or not.
    // This is used after frame restarts so that the data can be decoded
    // from the frame start.
    private boolean forceModifiedFields;

    
    private StringEncoder schemaURLEncoder = new StringEncoder();
    private AttributesEncoder attributesEncoder = new AttributesEncoder();
    private Uint64Encoder droppedAttributesCountEncoder = new Uint64Encoder();
    
    private ResourceEncoderDict dict;
    

    private long keepFieldMask;
    private int fieldCount;

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.ResourceEncoder != null) {
            throw new IllegalStateException("cannot initialize ResourceEncoder: already initialized");
        }
        state.ResourceEncoder = this;

        try {
            this.limiter = state.getLimiter();
            this.dict = state.Resource;

            if (state.getOverrideSchema() != null) {
                int fieldCount = state.getOverrideSchema().getFieldCount("Resource");
                this.fieldCount = fieldCount;
                this.keepFieldMask = ~((~0L) << this.fieldCount);
            } else {
                this.fieldCount = 3;
                this.keepFieldMask = ~0L;
            }

            
            if (this.fieldCount <= 0) {
                return; // SchemaURL and subsequent fields are skipped.
            }
            this.schemaURLEncoder.init(state.SchemaURL, this.limiter, columns.addSubColumn());
            if (this.fieldCount <= 1) {
                return; // Attributes and subsequent fields are skipped.
            }
            this.attributesEncoder.init(state, columns.addSubColumn());
            if (this.fieldCount <= 2) {
                return; // DroppedAttributesCount and subsequent fields are skipped.
            }
            this.droppedAttributesCountEncoder.init(this.limiter, columns.addSubColumn());
        } finally {
            state.ResourceEncoder = null;
        }
    }

    public void reset() {
        // Since we are resetting the state of encoder make sure the next encode()
        // call forcedly writes all fields and does not attempt to skip.
        this.forceModifiedFields = true;
        this.schemaURLEncoder.reset();
        this.attributesEncoder.reset();
        this.droppedAttributesCountEncoder.reset();
    }

    // encode encodes val into buf
    public void encode(Resource val) throws IOException {
        int oldLen = this.buf.bitCount();

        
        // Check if the Resource exists in the dictionary.
        ResourceEncoderDict.Entry entry = this.dict.get(val);
        if (entry != null) {
            // The Resource exists, we will reference it.
            // Indicate a RefNum follows.
            this.buf.writeBit(0);
            // Encode refNum.
            this.buf.writeUvarintCompact(entry.refNum);
            // Account written bits in the limiter.
            int newLen = this.buf.bitCount();
            this.limiter.addFrameBits(newLen - oldLen);
            // Mark all fields non-modified recursively so that next encode() correctly
            // encodes only fields that change after this.
            val.markUnmodifiedRecursively();
            return;
        }

        // The Resource does not exist in the dictionary. Add it to the dictionary.
        Resource valInDict = val.clone();
        entry = new ResourceEncoderDict.Entry(this.dict.size(), valInDict);
        this.dict.set(valInDict, entry);
        this.limiter.addDictElemSize(valInDict.byteSize());
        // Indicate that an encoded Resource follows.
        this.buf.writeBit(1); // TODO: optimize and merge writeBit with the following writeBits.
        

        // Mask that describes what fields are encoded. Start with all modified fields.
        long fieldMask = val.modifiedFields.mask;
        // If forceModifiedFields we need to set to 1 all bits so that we
        // force writing of all fields.
        if (this.forceModifiedFields) {
            fieldMask =
                Resource.fieldModifiedSchemaURL | 
                Resource.fieldModifiedAttributes | 
                Resource.fieldModifiedDroppedAttributesCount | 0L;
        }

        // Only write fields that we want to write. See init() for keepFieldMask.
        fieldMask &= this.keepFieldMask;

        // Write bits to indicate which fields follow.
        this.buf.writeBits(fieldMask, this.fieldCount);
        
        // Encode modified, present fields.
        
        if ((fieldMask & Resource.fieldModifiedSchemaURL) != 0) {
            // Encode SchemaURL
            this.schemaURLEncoder.encode(val.schemaURL);
        }
        
        if ((fieldMask & Resource.fieldModifiedAttributes) != 0) {
            // Encode Attributes
            this.attributesEncoder.encode(val.attributes);
        }
        
        if ((fieldMask & Resource.fieldModifiedDroppedAttributesCount) != 0) {
            // Encode DroppedAttributesCount
            this.droppedAttributesCountEncoder.encode(val.droppedAttributesCount);
        }
        
        // Account written bits in the limiter.
        int newLen = this.buf.bitCount();
        this.limiter.addFrameBits(newLen - oldLen);

        // Mark all fields non-modified so that next encode() correctly
        // encodes only fields that change after this.
        val.modifiedFields.mask = 0;
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        
        if (this.fieldCount <= 0) {
            return; // SchemaURL and subsequent fields are skipped.
        }
        this.schemaURLEncoder.collectColumns(columnSet.at(0));
        if (this.fieldCount <= 1) {
            return; // Attributes and subsequent fields are skipped.
        }
        this.attributesEncoder.collectColumns(columnSet.at(1));
        if (this.fieldCount <= 2) {
            return; // DroppedAttributesCount and subsequent fields are skipped.
        }
        this.droppedAttributesCountEncoder.collectColumns(columnSet.at(2));
    }
}

