// Code generated by stefc. DO NOT EDIT.
// SummaryValueEncoder implements encoding of SummaryValue
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class SummaryValueEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;

    // forceModifiedFields is set to true if the next encoding operation
    // must write all fields, whether they are modified or not.
    // This is used after frame restarts so that the data can be decoded
    // from the frame start.
    private boolean forceModifiedFields;

    
    private Uint64Encoder countEncoder;
    private boolean isCountRecursive = false; // Indicates Count field's type is recursive.
    private Float64Encoder sumEncoder;
    private boolean isSumRecursive = false; // Indicates Sum field's type is recursive.
    private QuantileValueArrayEncoder quantileValuesEncoder;
    private boolean isQuantileValuesRecursive = false; // Indicates QuantileValues field's type is recursive.
    

    private long keepFieldMask;
    private int fieldCount;

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.SummaryValueEncoder != null) {
            throw new IllegalStateException("cannot initialize SummaryValueEncoder: already initialized");
        }
        state.SummaryValueEncoder = this;

        try {
            this.limiter = state.getLimiter();

            this.fieldCount = state.getStructFieldCounts().getSummaryValueFieldCount();
            this.keepFieldMask = ~((~0L) << this.fieldCount);
            
            // Init encoder for Count field.
            if (this.fieldCount <= 0) {
                return; // Count and subsequent fields are skipped.
            }
            countEncoder = new Uint64Encoder();
            countEncoder.init(limiter, columns.addSubColumn());
            // Init encoder for Sum field.
            if (this.fieldCount <= 1) {
                return; // Sum and subsequent fields are skipped.
            }
            sumEncoder = new Float64Encoder();
            sumEncoder.init(limiter, columns.addSubColumn());
            // Init encoder for QuantileValues field.
            if (this.fieldCount <= 2) {
                return; // QuantileValues and subsequent fields are skipped.
            }
            if (state.QuantileValueArrayEncoder != null) {
                // Recursion detected, use the existing encoder.
                quantileValuesEncoder = state.QuantileValueArrayEncoder;
                isQuantileValuesRecursive = true;
            } else {
                quantileValuesEncoder = new QuantileValueArrayEncoder();
                quantileValuesEncoder.init(state, columns.addSubColumn());
            }
        } finally {
            state.SummaryValueEncoder = null;
        }
    }

    public void reset() {
        // Since we are resetting the state of encoder make sure the next encode()
        // call forcefully writes all fields and does not attempt to skip.
        this.forceModifiedFields = true;
        
        if (fieldCount <= 0) {
            return; // Count and all subsequent fields are skipped.
        }
        countEncoder.reset();
        if (fieldCount <= 1) {
            return; // Sum and all subsequent fields are skipped.
        }
        sumEncoder.reset();
        if (fieldCount <= 2) {
            return; // QuantileValues and all subsequent fields are skipped.
        }
        
        if (!isQuantileValuesRecursive) {
            quantileValuesEncoder.reset();
        }
        
    }

    // encode encodes val into buf
    public void encode(SummaryValue val) throws IOException {
        int oldLen = this.buf.bitCount();

        

        // Mask that describes what fields are encoded. Start with all modified fields.
        long fieldMask = val.modifiedFields.mask;
        // If forceModifiedFields we need to set to 1 all bits so that we
        // force writing of all fields.
        if (this.forceModifiedFields) {
            fieldMask =
                SummaryValue.fieldModifiedCount | 
                SummaryValue.fieldModifiedSum | 
                SummaryValue.fieldModifiedQuantileValues | 0L;
        }

        // Only write fields that we want to write. See init() for keepFieldMask.
        fieldMask &= this.keepFieldMask;

        // Write bits to indicate which fields follow.
        this.buf.writeBits(fieldMask, this.fieldCount);
        
        // Encode modified, present fields.
        
        if ((fieldMask & SummaryValue.fieldModifiedCount) != 0) {
            // Encode Count
            this.countEncoder.encode(val.count);
        }
        
        if ((fieldMask & SummaryValue.fieldModifiedSum) != 0) {
            // Encode Sum
            this.sumEncoder.encode(val.sum);
        }
        
        if ((fieldMask & SummaryValue.fieldModifiedQuantileValues) != 0) {
            // Encode QuantileValues
            this.quantileValuesEncoder.encode(val.quantileValues);
        }
        
        // Account written bits in the limiter.
        int newLen = this.buf.bitCount();
        this.limiter.addFrameBits(newLen - oldLen);

        // Mark all fields non-modified so that next encode() correctly
        // encodes only fields that change after this.
        val.modifiedFields.mask = 0;
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        int colIdx = 0;
        
        // Collect Count field.
        if (this.fieldCount <= 0) {
            return; // Count and subsequent fields are skipped.
        }
        
        countEncoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
        // Collect Sum field.
        if (this.fieldCount <= 1) {
            return; // Sum and subsequent fields are skipped.
        }
        
        sumEncoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
        // Collect QuantileValues field.
        if (this.fieldCount <= 2) {
            return; // QuantileValues and subsequent fields are skipped.
        }
        if (!isQuantileValuesRecursive) {
            quantileValuesEncoder.collectColumns(columnSet.at(colIdx));
            colIdx++;
        }
        
    }
}

