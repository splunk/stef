// Code generated by stefgen. DO NOT EDIT.
// SpanEncoder implements encoding of Span
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class SpanEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;

    // forceModifiedFields is set to true if the next encoding operation
    // must write all fields, whether they are modified or not.
    // This is used after frame restarts so that the data can be decoded
    // from the frame start.
    private boolean forceModifiedFields;

    
    private BytesEncoder traceIDEncoder = new BytesEncoder();
    private BytesEncoder spanIDEncoder = new BytesEncoder();
    private StringEncoder traceStateEncoder = new StringEncoder();
    private BytesEncoder parentSpanIDEncoder = new BytesEncoder();
    private Uint64Encoder flagsEncoder = new Uint64Encoder();
    private StringEncoder nameEncoder = new StringEncoder();
    private Uint64Encoder kindEncoder = new Uint64Encoder();
    private Uint64Encoder startTimeUnixNanoEncoder = new Uint64Encoder();
    private Uint64Encoder endTimeUnixNanoEncoder = new Uint64Encoder();
    private AttributesEncoder attributesEncoder = new AttributesEncoder();
    private Uint64Encoder droppedAttributesCountEncoder = new Uint64Encoder();
    private EventArrayEncoder eventsEncoder = new EventArrayEncoder();
    private LinkArrayEncoder linksEncoder = new LinkArrayEncoder();
    private SpanStatusEncoder statusEncoder = new SpanStatusEncoder();
    

    private long keepFieldMask;
    private int fieldCount;

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        state.SpanEncoder = this;
        this.limiter = state.getLimiter();

        if (state.getOverrideSchema() != null) {
            int fieldCount = state.getOverrideSchema().getFieldCount("Span");
            this.fieldCount = fieldCount;
            this.keepFieldMask = ~((~0L) << this.fieldCount);
        } else {
            this.fieldCount = 14;
            this.keepFieldMask = ~0L;
        }

        
        if (this.fieldCount <= 0) {
            return; // TraceID and subsequent fields are skipped.
        }
        this.traceIDEncoder.init(null, this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 1) {
            return; // SpanID and subsequent fields are skipped.
        }
        this.spanIDEncoder.init(null, this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 2) {
            return; // TraceState and subsequent fields are skipped.
        }
        this.traceStateEncoder.init(null, this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 3) {
            return; // ParentSpanID and subsequent fields are skipped.
        }
        this.parentSpanIDEncoder.init(null, this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 4) {
            return; // Flags and subsequent fields are skipped.
        }
        this.flagsEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 5) {
            return; // Name and subsequent fields are skipped.
        }
        this.nameEncoder.init(state.SpanName, this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 6) {
            return; // Kind and subsequent fields are skipped.
        }
        this.kindEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 7) {
            return; // StartTimeUnixNano and subsequent fields are skipped.
        }
        this.startTimeUnixNanoEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 8) {
            return; // EndTimeUnixNano and subsequent fields are skipped.
        }
        this.endTimeUnixNanoEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 9) {
            return; // Attributes and subsequent fields are skipped.
        }
        this.attributesEncoder.init(state, columns.addSubColumn());
        if (this.fieldCount <= 10) {
            return; // DroppedAttributesCount and subsequent fields are skipped.
        }
        this.droppedAttributesCountEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 11) {
            return; // Events and subsequent fields are skipped.
        }
        this.eventsEncoder.init(state, columns.addSubColumn());
        if (this.fieldCount <= 12) {
            return; // Links and subsequent fields are skipped.
        }
        this.linksEncoder.init(state, columns.addSubColumn());
        if (this.fieldCount <= 13) {
            return; // Status and subsequent fields are skipped.
        }
        this.statusEncoder.init(state, columns.addSubColumn());
    }

    public void reset() {
        // Since we are resetting the state of encoder make sure the next encode()
        // call forcedly writes all fields and does not attempt to skip.
        this.forceModifiedFields = true;
        this.traceIDEncoder.reset();
        this.spanIDEncoder.reset();
        this.traceStateEncoder.reset();
        this.parentSpanIDEncoder.reset();
        this.flagsEncoder.reset();
        this.nameEncoder.reset();
        this.kindEncoder.reset();
        this.startTimeUnixNanoEncoder.reset();
        this.endTimeUnixNanoEncoder.reset();
        this.attributesEncoder.reset();
        this.droppedAttributesCountEncoder.reset();
        this.eventsEncoder.reset();
        this.linksEncoder.reset();
        this.statusEncoder.reset();
    }

    // encode encodes val into buf
    public void encode(Span val) throws IOException {
        int oldLen = this.buf.bitCount();

        

        // Mask that describes what fields are encoded. Start with all modified fields.
        long fieldMask = val.modifiedFields.mask;
        // If forceModifiedFields we need to set to 1 all bits so that we
        // force writing of all fields.
        if (this.forceModifiedFields) {
            fieldMask =
                Span.fieldModifiedTraceID | 
                Span.fieldModifiedSpanID | 
                Span.fieldModifiedTraceState | 
                Span.fieldModifiedParentSpanID | 
                Span.fieldModifiedFlags | 
                Span.fieldModifiedName | 
                Span.fieldModifiedKind | 
                Span.fieldModifiedStartTimeUnixNano | 
                Span.fieldModifiedEndTimeUnixNano | 
                Span.fieldModifiedAttributes | 
                Span.fieldModifiedDroppedAttributesCount | 
                Span.fieldModifiedEvents | 
                Span.fieldModifiedLinks | 
                Span.fieldModifiedStatus | 0L;
        }

        // Only write fields that we want to write. See init() for keepFieldMask.
        fieldMask &= this.keepFieldMask;

        // Write bits to indicate which fields follow.
        this.buf.writeBits(fieldMask, this.fieldCount);
        
        // Encode modified, present fields.
        
        if ((fieldMask & Span.fieldModifiedTraceID) != 0) {
            // Encode TraceID
            this.traceIDEncoder.encode(val.traceID);
        }
        
        if ((fieldMask & Span.fieldModifiedSpanID) != 0) {
            // Encode SpanID
            this.spanIDEncoder.encode(val.spanID);
        }
        
        if ((fieldMask & Span.fieldModifiedTraceState) != 0) {
            // Encode TraceState
            this.traceStateEncoder.encode(val.traceState);
        }
        
        if ((fieldMask & Span.fieldModifiedParentSpanID) != 0) {
            // Encode ParentSpanID
            this.parentSpanIDEncoder.encode(val.parentSpanID);
        }
        
        if ((fieldMask & Span.fieldModifiedFlags) != 0) {
            // Encode Flags
            this.flagsEncoder.encode(val.flags);
        }
        
        if ((fieldMask & Span.fieldModifiedName) != 0) {
            // Encode Name
            this.nameEncoder.encode(val.name);
        }
        
        if ((fieldMask & Span.fieldModifiedKind) != 0) {
            // Encode Kind
            this.kindEncoder.encode(val.kind);
        }
        
        if ((fieldMask & Span.fieldModifiedStartTimeUnixNano) != 0) {
            // Encode StartTimeUnixNano
            this.startTimeUnixNanoEncoder.encode(val.startTimeUnixNano);
        }
        
        if ((fieldMask & Span.fieldModifiedEndTimeUnixNano) != 0) {
            // Encode EndTimeUnixNano
            this.endTimeUnixNanoEncoder.encode(val.endTimeUnixNano);
        }
        
        if ((fieldMask & Span.fieldModifiedAttributes) != 0) {
            // Encode Attributes
            this.attributesEncoder.encode(val.attributes);
        }
        
        if ((fieldMask & Span.fieldModifiedDroppedAttributesCount) != 0) {
            // Encode DroppedAttributesCount
            this.droppedAttributesCountEncoder.encode(val.droppedAttributesCount);
        }
        
        if ((fieldMask & Span.fieldModifiedEvents) != 0) {
            // Encode Events
            this.eventsEncoder.encode(val.events);
        }
        
        if ((fieldMask & Span.fieldModifiedLinks) != 0) {
            // Encode Links
            this.linksEncoder.encode(val.links);
        }
        
        if ((fieldMask & Span.fieldModifiedStatus) != 0) {
            // Encode Status
            this.statusEncoder.encode(val.status);
        }
        
        // Account written bits in the limiter.
        int newLen = this.buf.bitCount();
        this.limiter.addFrameBits(newLen - oldLen);

        // Mark all fields non-modified so that next encode() correctly
        // encodes only fields that change after this.
        val.modifiedFields.mask = 0;
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        
        if (this.fieldCount <= 0) {
            return; // TraceID and subsequent fields are skipped.
        }
        this.traceIDEncoder.collectColumns(columnSet.at(0));
        if (this.fieldCount <= 1) {
            return; // SpanID and subsequent fields are skipped.
        }
        this.spanIDEncoder.collectColumns(columnSet.at(1));
        if (this.fieldCount <= 2) {
            return; // TraceState and subsequent fields are skipped.
        }
        this.traceStateEncoder.collectColumns(columnSet.at(2));
        if (this.fieldCount <= 3) {
            return; // ParentSpanID and subsequent fields are skipped.
        }
        this.parentSpanIDEncoder.collectColumns(columnSet.at(3));
        if (this.fieldCount <= 4) {
            return; // Flags and subsequent fields are skipped.
        }
        this.flagsEncoder.collectColumns(columnSet.at(4));
        if (this.fieldCount <= 5) {
            return; // Name and subsequent fields are skipped.
        }
        this.nameEncoder.collectColumns(columnSet.at(5));
        if (this.fieldCount <= 6) {
            return; // Kind and subsequent fields are skipped.
        }
        this.kindEncoder.collectColumns(columnSet.at(6));
        if (this.fieldCount <= 7) {
            return; // StartTimeUnixNano and subsequent fields are skipped.
        }
        this.startTimeUnixNanoEncoder.collectColumns(columnSet.at(7));
        if (this.fieldCount <= 8) {
            return; // EndTimeUnixNano and subsequent fields are skipped.
        }
        this.endTimeUnixNanoEncoder.collectColumns(columnSet.at(8));
        if (this.fieldCount <= 9) {
            return; // Attributes and subsequent fields are skipped.
        }
        this.attributesEncoder.collectColumns(columnSet.at(9));
        if (this.fieldCount <= 10) {
            return; // DroppedAttributesCount and subsequent fields are skipped.
        }
        this.droppedAttributesCountEncoder.collectColumns(columnSet.at(10));
        if (this.fieldCount <= 11) {
            return; // Events and subsequent fields are skipped.
        }
        this.eventsEncoder.collectColumns(columnSet.at(11));
        if (this.fieldCount <= 12) {
            return; // Links and subsequent fields are skipped.
        }
        this.linksEncoder.collectColumns(columnSet.at(12));
        if (this.fieldCount <= 13) {
            return; // Status and subsequent fields are skipped.
        }
        this.statusEncoder.collectColumns(columnSet.at(13));
    }
}

