// Code generated by stefgen. DO NOT EDIT.
// QuantileValueDecoder implements decoding of QuantileValue
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class QuantileValueDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private QuantileValue lastVal;
    private int fieldCount;

    
    private Float64Decoder quantileDecoder;
    private boolean isQuantileRecursive = false; // Indicates Quantile field's type is recursive.
    private Float64Decoder valueDecoder;
    private boolean isValueRecursive = false; // Indicates Value field's type is recursive.
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.QuantileValueDecoder != null) {
            throw new IllegalStateException("cannot initialize QuantileValueDecoder: already initialized");
        }
        state.QuantileValueDecoder = this;

        try {
            if (state.getOverrideSchema() != null) {
                int fieldCount = state.getOverrideSchema().getFieldCount("QuantileValue");
                fieldCount = fieldCount;
            } else {
                fieldCount = 2;
            }
            column = columns.getColumn();
            
            lastVal = new QuantileValue(null, 0);
            
            if (this.fieldCount <= 0) {
                return; // Quantile and subsequent fields are skipped.
            }
            quantileDecoder = new Float64Decoder();
            quantileDecoder.init(columns.addSubColumn());
            if (this.fieldCount <= 1) {
                return; // Value and subsequent fields are skipped.
            }
            valueDecoder = new Float64Decoder();
            valueDecoder.init(columns.addSubColumn());
        } finally {
            state.QuantileValueDecoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // Quantile and subsequent fields are skipped.
        }
        quantileDecoder.continueDecoding();
        if (this.fieldCount <= 1) {
            return; // Value and subsequent fields are skipped.
        }
        valueDecoder.continueDecoding();
    }

    public void reset() {
        quantileDecoder.reset();
        valueDecoder.reset();
    }

    public QuantileValue decode(QuantileValue dstPtr) throws IOException {
        QuantileValue val = dstPtr;
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        
        
        if ((val.modifiedFields.mask & QuantileValue.fieldModifiedQuantile) != 0) {
            // Field is changed and is present, decode it.
            val.quantile = quantileDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & QuantileValue.fieldModifiedValue) != 0) {
            // Field is changed and is present, decode it.
            val.value = valueDecoder.decode();
        }
        
        
        return val;
    }
}

