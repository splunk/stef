// Code generated by stefgen. DO NOT EDIT.
// ExemplarValueDecoder implements decoding of ExemplarValue
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class ExemplarValueDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private ExemplarValue lastValPtr;
    private ExemplarValue lastVal = new ExemplarValue();
    private int fieldCount;
    private ExemplarValue.Type prevType;

    
    private Int64Decoder int64Decoder = new Int64Decoder();
    private Float64Decoder float64Decoder = new Float64Decoder();
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        state.ExemplarValueDecoder = this;
        prevType = ExemplarValue.Type.TypeNone;
        if (state.getOverrideSchema() != null) {
            int fieldCount = state.getOverrideSchema().getFieldCount("ExemplarValue");
            this.fieldCount = fieldCount;
        } else {
            this.fieldCount = 2;
        }
        this.column = columns.getColumn();
        this.lastVal.init(null, 0);
        this.lastValPtr = this.lastVal;
        Exception err = null;
        
        if (this.fieldCount <= 0) {
            return; // Int64 and subsequent fields are skipped.
        }
        this.int64Decoder.init(columns.addSubColumn());
        if (this.fieldCount <= 1) {
            return; // Float64 and subsequent fields are skipped.
        }
        this.float64Decoder.init(columns.addSubColumn());
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // Int64 and subsequent fields are skipped.
        }
        this.int64Decoder.continueDecoding();
        if (this.fieldCount <= 1) {
            return; // Float64 and subsequent fields are skipped.
        }
        this.float64Decoder.continueDecoding();
    }

    public void reset() {
        prevType = ExemplarValue.Type.TypeNone;
        int64Decoder.reset();
        float64Decoder.reset();
    }

    // Decode decodes a value from the buffer into dst.
    public ExemplarValue decode(ExemplarValue dst) throws IOException {
        // Read type delta
        long typeDelta = this.buf.readVarintCompact();
        long typ = prevType.getValue() + typeDelta;
        if (typ < 0 || typ >= ExemplarValue.Type.values().length) {
            throw new IOException("Invalid oneof type");
        }
        dst.typ = ExemplarValue.Type.values()[(int)typ];
        prevType = dst.typ;
        this.lastValPtr = dst;
        // Decode selected field
        switch (dst.typ) {
        case TypeInt64:
            dst.int64 = this.int64Decoder.decode();
            break;
        case TypeFloat64:
            dst.float64 = this.float64Decoder.decode();
            break;
        default:
            break;
        }
        return dst;
    }
}
