// Code generated by stefc. DO NOT EDIT.
// ExemplarValueDecoder implements decoding of ExemplarValue
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class ExemplarValueDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    // fieldCount is the number of fields, i.e. the number of types in this oneof.
    private int fieldCount;
    // Number of bits needed to encode the type (including None type).
    private int typeBitCount;

    // Field decoders.
    
    private Int64DeltaDeltaDecoder int64Decoder;
    private boolean isInt64Recursive = false; // Indicates Int64 field's type is recursive.
    private Float64Decoder float64Decoder;
    private boolean isFloat64Recursive = false; // Indicates Float64 field's type is recursive.
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this decoder in the state so that we can detect recursion.
        if (state.ExemplarValueDecoder != null) {
            throw new IllegalStateException("cannot initialize ExemplarValueDecoder: already initialized");
        }
        state.ExemplarValueDecoder = this;

        try {
            this.fieldCount = state.getStructFieldCounts().getExemplarValueFieldCount();
            this.typeBitCount = Integer.SIZE - Integer.numberOfLeadingZeros(this.fieldCount+1);
            this.column = columns.getColumn();
            Exception err = null;
            
            if (this.fieldCount <= 0) {
                return; // Int64 and subsequent fields are skipped.
            }
            int64Decoder = new Int64DeltaDeltaDecoder();
            int64Decoder.init(columns.addSubColumn());
            if (this.fieldCount <= 1) {
                return; // Float64 and subsequent fields are skipped.
            }
            float64Decoder = new Float64Decoder();
            float64Decoder.init(columns.addSubColumn());
        } finally {
            state.ExemplarValueDecoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // Int64 and subsequent fields are skipped.
        }
        int64Decoder.continueDecoding();
        if (this.fieldCount <= 1) {
            return; // Float64 and subsequent fields are skipped.
        }
        float64Decoder.continueDecoding();
    }

    public void reset() {
        
        if (fieldCount <= 0) {
            return; // Int64 and all subsequent fields are skipped.
        }
        int64Decoder.reset();
        if (fieldCount <= 1) {
            return; // Float64 and all subsequent fields are skipped.
        }
        float64Decoder.reset();
    }

    // Decode decodes a value from the buffer into dst.
    public ExemplarValue decode(ExemplarValue dst) throws IOException {
        // Read type delta
        long typ = this.buf.readBits(typeBitCount);
        if (typ < 0 || typ >= ExemplarValue.Type.values().length) {
            throw new IOException("Invalid oneof type");
        }
        ExemplarValue.Type newType = ExemplarValue.Type.values()[(int)typ];
        if (dst.typ != newType) {
            dst.typ = newType;
            // The type changed, we need to reset the contained value so that
            // it does not contain carry-over data from a previous record that
            // was of this same type.
            dst.resetContained();
        }
        // Decode selected field
        switch (dst.typ) {
        case TypeInt64:
            dst.int64 = this.int64Decoder.decode();
            break;
        case TypeFloat64:
            dst.float64 = this.float64Decoder.decode();
            break;
        default:
            break;
        }
        return dst;
    }
}
