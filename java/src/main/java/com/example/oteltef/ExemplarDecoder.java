// Code generated by stefgen. DO NOT EDIT.
// ExemplarDecoder implements decoding of Exemplar
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class ExemplarDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private Exemplar lastVal;
    private int fieldCount;

    
    private Uint64Decoder timestampDecoder = new Uint64Decoder();
    private ExemplarValueDecoder valueDecoder = new ExemplarValueDecoder();
    private BytesDecoder spanIDDecoder = new BytesDecoder();
    private BytesDecoder traceIDDecoder = new BytesDecoder();
    private AttributesDecoder filteredAttributesDecoder = new AttributesDecoder();
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.ExemplarDecoder != null) {
            throw new IllegalStateException("cannot initialize ExemplarDecoder: already initialized");
        }
        state.ExemplarDecoder = this;

        try {
            if (state.getOverrideSchema() != null) {
                int fieldCount = state.getOverrideSchema().getFieldCount("Exemplar");
                fieldCount = fieldCount;
            } else {
                fieldCount = 5;
            }
            column = columns.getColumn();
            
            lastVal = new Exemplar(null, 0);
            
            if (this.fieldCount <= 0) {
                return; // Timestamp and subsequent fields are skipped.
            }
            timestampDecoder.init(columns.addSubColumn());
            if (this.fieldCount <= 1) {
                return; // Value and subsequent fields are skipped.
            }
            valueDecoder.init(state, columns.addSubColumn());
            if (this.fieldCount <= 2) {
                return; // SpanID and subsequent fields are skipped.
            }
            spanIDDecoder.init(null, columns.addSubColumn());
            if (this.fieldCount <= 3) {
                return; // TraceID and subsequent fields are skipped.
            }
            traceIDDecoder.init(null, columns.addSubColumn());
            if (this.fieldCount <= 4) {
                return; // FilteredAttributes and subsequent fields are skipped.
            }
            filteredAttributesDecoder.init(state, columns.addSubColumn());
        } finally {
            state.ExemplarDecoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // Timestamp and subsequent fields are skipped.
        }
        this.timestampDecoder.continueDecoding();
        if (this.fieldCount <= 1) {
            return; // Value and subsequent fields are skipped.
        }
        this.valueDecoder.continueDecoding();
        if (this.fieldCount <= 2) {
            return; // SpanID and subsequent fields are skipped.
        }
        this.spanIDDecoder.continueDecoding();
        if (this.fieldCount <= 3) {
            return; // TraceID and subsequent fields are skipped.
        }
        this.traceIDDecoder.continueDecoding();
        if (this.fieldCount <= 4) {
            return; // FilteredAttributes and subsequent fields are skipped.
        }
        this.filteredAttributesDecoder.continueDecoding();
    }

    public void reset() {
        this.timestampDecoder.reset();
        this.valueDecoder.reset();
        this.spanIDDecoder.reset();
        this.traceIDDecoder.reset();
        this.filteredAttributesDecoder.reset();
    }

    public Exemplar decode(Exemplar dstPtr) throws IOException {
        Exemplar val = dstPtr;
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        
        
        if ((val.modifiedFields.mask & Exemplar.fieldModifiedTimestamp) != 0) {
            // Field is changed and is present, decode it.
            val.timestamp = timestampDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Exemplar.fieldModifiedValue) != 0) {
            // Field is changed and is present, decode it.
            val.value = valueDecoder.decode(val.value);
        }
        
        if ((val.modifiedFields.mask & Exemplar.fieldModifiedSpanID) != 0) {
            // Field is changed and is present, decode it.
            val.spanID = spanIDDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Exemplar.fieldModifiedTraceID) != 0) {
            // Field is changed and is present, decode it.
            val.traceID = traceIDDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Exemplar.fieldModifiedFilteredAttributes) != 0) {
            // Field is changed and is present, decode it.
            val.filteredAttributes = filteredAttributesDecoder.decode(val.filteredAttributes);
        }
        
        
        return val;
    }
}

