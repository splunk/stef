// Code generated by stefc. DO NOT EDIT.
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

// Encoder for ExemplarArray
class ExemplarArrayEncoder {
    private final BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;
    private ExemplarEncoder elemEncoder;
    private WriterState state;
    private boolean isRecursive = false;

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        this.state = state;
        this.limiter = state.getLimiter();

        // Remember this encoder in the state so that we can detect recursion.
        if (state.ExemplarArrayEncoder != null) {
            throw new IllegalStateException("Cannot initialize ExemplarArrayEncoder: already initialized");
        }
        state.ExemplarArrayEncoder = this;

        try {
            if (state.ExemplarEncoder != null) {
                // Recursion detected, use the existing encoder.
                elemEncoder = state.ExemplarEncoder;
                this.isRecursive = true;
            } else {
                elemEncoder = new ExemplarEncoder();
                elemEncoder.init(state, columns.addSubColumn());
            }
        } finally {
            state.ExemplarArrayEncoder = null;
        }
    }

    public void reset() {
        if (!isRecursive) {
            elemEncoder.reset();
        }
    }

    public void encode(ExemplarArray arr) throws IOException {
        int oldBitLen = buf.bitCount();

        // Write the length of the array.
        int newLen = arr.elemsLen;
        buf.writeUvarintCompact(newLen);

        for (int i = 0; i < newLen; i++) {
            elemEncoder.encode(arr.elems[i]);
        }

        // Account written bits in the limiter.
        int newBitLen = buf.bitCount();
        limiter.addFrameBits(newBitLen - oldBitLen);
    }

    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(buf);
        if (!isRecursive) {
            elemEncoder.collectColumns(columnSet.at(0));
        }
    }
}

