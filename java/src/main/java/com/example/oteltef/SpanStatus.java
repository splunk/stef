// Code generated by stefc. DO NOT EDIT.
// SpanStatus Java class generated from template
package com.example.oteltef;

import net.stef.StringValue;
import net.stef.Types;
import net.stef.schema.WireSchema;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.*;

public class SpanStatus {
    // Field values.
    
    StringValue message;
    long code;

    // modifiedFields keeps track of which fields are modified.
    final ModifiedFields modifiedFields = new ModifiedFields();

    public static final String StructName = "SpanStatus";

    // Bitmasks for "modified" flags for each field.
    
    public static final long fieldModifiedMessage = 1 << 0;
    public static final long fieldModifiedCode = 1 << 1;

    

    public SpanStatus() {
        init(null, 0);
    }

    SpanStatus(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        init(parentModifiedFields, parentModifiedBit);
    }

    private void init(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        modifiedFields.parent = parentModifiedFields;
        modifiedFields.parentBit = parentModifiedBit;
        
        message = StringValue.empty;
        code = 0;
    }

    void reset() {
        
        message = StringValue.empty;
        code = 0;
    }

    
    public StringValue getMessage() {
        return message;
    }

    // setMessage sets the value of Message field.
    public void setMessage(StringValue v) {
        if (!Types.StringEqual(this.message, v)) {
            this.message = v;
            this.markMessageModified();
        }
    }

    private void markMessageModified() {
        this.modifiedFields.markModified(fieldModifiedMessage);
    }

    // isMessageModified returns true if the value of Message field was modified since
    // SpanStatus was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isMessageModified() {
        return (this.modifiedFields.mask & fieldModifiedMessage) != 0;
    }
    
    public long getCode() {
        return code;
    }

    // setCode sets the value of Code field.
    public void setCode(long v) {
        if (!Types.Uint64Equal(this.code, v)) {
            this.code = v;
            this.markCodeModified();
        }
    }

    private void markCodeModified() {
        this.modifiedFields.markModified(fieldModifiedCode);
    }

    // isCodeModified returns true if the value of Code field was modified since
    // SpanStatus was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isCodeModified() {
        return (this.modifiedFields.mask & fieldModifiedCode) != 0;
    }
    

    void markModifiedRecursively() {
        modifiedFields.mask =
            fieldModifiedMessage | 
            fieldModifiedCode | 0;
    }

    void markUnmodifiedRecursively() {
        modifiedFields.mask = 0;
    }

    public SpanStatus clone() {
        SpanStatus cpy = new SpanStatus();
        cpy.message = this.message;
        cpy.code = this.code;
        return cpy;
    }

    // ByteSize returns approximate memory usage in bytes. Used to calculate memory used by dictionaries.
    int byteSize() {
        int size = 0; // TODO: calculate the size of this object.
        
        
        return size;
    }

    // Performs a deep copy from src to dst.
    public void copyFrom(SpanStatus src) {
        setMessage(src.getMessage());
        setCode(src.getCode());
    }

    // equals performs deep comparison and returns true if struct is equal to val.
    public boolean equals(SpanStatus right) {
        // Compare Message field.
        if (!Types.StringEqual(this.message, right.message)) {
            return false;
        }
        // Compare Code field.
        if (!Types.Uint64Equal(this.code, right.code)) {
            return false;
        }
        return true;
    }

    public static boolean equals(SpanStatus left, SpanStatus right) {
        return left.equals(right);
    }

    // compare performs deep comparison and returns an integer that
    // will be 0 if left == right, negative if left < right, positive if left > right.
    public static int compare(SpanStatus left, SpanStatus right) {
        if (left == null) {
            if (right == null) {
                return 0;
            }
            return -1;
        }
        if (right == null) {
            return 1;
        }
        int c;
        
        // Compare Message field.
        c = Types.StringCompare(left.message, right.message);
        if (c != 0) {
            return c;
        }
        
        // Compare Code field.
        c = Types.Uint64Compare(left.code, right.code);
        if (c != 0) {
            return c;
        }
        
        return 0;
    }

    // mutateRandom mutates fields in a random, deterministic manner using random as a deterministic generator.
    void mutateRandom(Random random) {
        final int fieldCount = Math.max(2,2); // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
        
        if (random.nextInt(fieldCount) == 0) {
            this.setMessage(Types.StringRandom(random));
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.setCode(Types.Uint64Random(random));
        }
        
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return equals((SpanStatus)o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            message,
            code
        );
    }

    
}
