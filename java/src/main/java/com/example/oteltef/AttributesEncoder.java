// Code generated by stefgen. DO NOT EDIT.
package com.example.oteltef;

import net.stef.BytesWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

// Encoder for Attributes
class AttributesEncoder {
    private final BytesWriter buf = new BytesWriter(0);
    private WriteColumnSet columns;
    private SizeLimiter limiter;

    private StringEncoder keyEncoder;
    private AnyValueEncoder valueEncoder;

    private final Attributes lastVal = new Attributes();

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        this.limiter = state.getLimiter();
        keyEncoder = new StringEncoder();
        keyEncoder.init(state.AttributeKey, limiter, columns.addSubColumn());
        valueEncoder = new AnyValueEncoder();
        valueEncoder.init(state, columns.addSubColumn());
    }

    public void reset() {
    
        keyEncoder.reset();
    
        valueEncoder.reset();
    }

    // equals performs deep comparison and returns true if encoder's previously encoded value is equal to list.
    public boolean equals(Attributes list) {
        return lastVal.equals(list);
    }

    public boolean encode(Attributes list) throws IOException {
        int oldLen = buf.size();
        if (list.elemsLen == 0) {
            buf.writeUvarint(0b1);
            boolean changed = lastVal.elemsLen != 0;
            lastVal.ensureLen(0);
            int newLen = buf.size();
            limiter.addFrameBytes(newLen - oldLen);
            return changed;
        }
        if (list.isSameKeys(lastVal) && lastVal.elemsLen < 63) {
            return encodeValuesOnly(list);
        } else {
            encodeFull(list);
            return true;
        }
    }

    private boolean encodeValuesOnly(Attributes list) throws IOException {
        if (list.elemsLen > 62) {
            throw new UnsupportedOperationException("Not implemented for >62 elements");
        }

        // Calculate changed values.
        long changedValuesBits = 0;
        for (int i = 0; i < list.elemsLen; i++) {
            changedValuesBits <<= 1;
            if (!AnyValue.equals(lastVal.elems[i].value, list.elems[i].value)) {
                changedValuesBits |= 1;
            }
        }

        buf.writeUvarint(changedValuesBits << 1);

        // Encode changed values first.
        long bitToRead = 1L << (list.elemsLen - 1);
        for (int i = 0; i < list.elemsLen; i++) {
            if ((bitToRead & changedValuesBits) != 0) {
                valueEncoder.encode(list.elems[i].value);
            }
            bitToRead >>>= 1;
            if (bitToRead == 0) {
                break;
            }
        }

        // Store changed values in lastVal after encoding.
        lastVal.ensureLen(list.elemsLen);
        bitToRead = 1L << (list.elemsLen - 1);
        for (int i = 0; i < list.elemsLen; i++) {
            if ((bitToRead & changedValuesBits) != 0) {
                lastVal.elems[i].value.copyFrom(list.elems[i].value);
            }
            bitToRead >>>= 1;
            if (bitToRead == 0) {
                break;
            }
        }
        return changedValuesBits != 0;
    }

    private void encodeFull(Attributes list) throws IOException {
        buf.writeUvarint(((long)list.elemsLen << 1) | 0b1);

        // Encode values first.
        for (int i = 0; i < list.elemsLen; i++) {
            keyEncoder.encode(list.elems[i].key);
            valueEncoder.encode(list.elems[i].value);
        }

        lastVal.ensureLen(list.elemsLen);
        for (int i = 0; i < list.elemsLen; i++) {
            lastVal.elems[i].key = list.elems[i].key;
            lastVal.elems[i].value.copyFrom(list.elems[i].value);
        }
    }

    public void rencodeLast() throws IOException {
        Attributes list = lastVal;
        buf.writeUvarint(((long)list.elemsLen << 1) | 0b1);
        for (int i = 0; i < list.elemsLen; i++) {
            keyEncoder.encode(list.elems[i].key);
            valueEncoder.encode(list.elems[i].value);
        }
    }

    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBytes(buf);
        keyEncoder.collectColumns(columnSet.at(0));
        valueEncoder.collectColumns(columnSet.at(1));
    }
}

