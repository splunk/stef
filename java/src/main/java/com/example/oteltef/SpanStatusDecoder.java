// Code generated by stefgen. DO NOT EDIT.
// SpanStatusDecoder implements decoding of SpanStatus
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class SpanStatusDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private SpanStatus lastVal;
    private int fieldCount;

    
    private StringDecoder messageDecoder = new StringDecoder();
    private Uint64Decoder codeDecoder = new Uint64Decoder();
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.SpanStatusDecoder != null) {
            throw new IllegalStateException("cannot initialize SpanStatusDecoder: already initialized");
        }
        state.SpanStatusDecoder = this;

        try {
            if (state.getOverrideSchema() != null) {
                int fieldCount = state.getOverrideSchema().getFieldCount("SpanStatus");
                fieldCount = fieldCount;
            } else {
                fieldCount = 2;
            }
            column = columns.getColumn();
            
            lastVal = new SpanStatus(null, 0);
            
            if (this.fieldCount <= 0) {
                return; // Message and subsequent fields are skipped.
            }
            messageDecoder.init(null, columns.addSubColumn());
            if (this.fieldCount <= 1) {
                return; // Code and subsequent fields are skipped.
            }
            codeDecoder.init(columns.addSubColumn());
        } finally {
            state.SpanStatusDecoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // Message and subsequent fields are skipped.
        }
        this.messageDecoder.continueDecoding();
        if (this.fieldCount <= 1) {
            return; // Code and subsequent fields are skipped.
        }
        this.codeDecoder.continueDecoding();
    }

    public void reset() {
        this.messageDecoder.reset();
        this.codeDecoder.reset();
    }

    public SpanStatus decode(SpanStatus dstPtr) throws IOException {
        SpanStatus val = dstPtr;
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        
        
        if ((val.modifiedFields.mask & SpanStatus.fieldModifiedMessage) != 0) {
            // Field is changed and is present, decode it.
            val.message = messageDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & SpanStatus.fieldModifiedCode) != 0) {
            // Field is changed and is present, decode it.
            val.code = codeDecoder.decode();
        }
        
        
        return val;
    }
}

