// Code generated by stefgen. DO NOT EDIT.
// ExpHistogramValueEncoder implements encoding of ExpHistogramValue
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class ExpHistogramValueEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;

    // forceModifiedFields is set to true if the next encoding operation
    // must write all fields, whether they are modified or not.
    // This is used after frame restarts so that the data can be decoded
    // from the frame start.
    private boolean forceModifiedFields;

    
    private Uint64Encoder countEncoder = new Uint64Encoder();
    private Float64Encoder sumEncoder = new Float64Encoder();
    private Float64Encoder minEncoder = new Float64Encoder();
    private Float64Encoder maxEncoder = new Float64Encoder();
    private Int64Encoder scaleEncoder = new Int64Encoder();
    private Uint64Encoder zeroCountEncoder = new Uint64Encoder();
    private ExpHistogramBucketsEncoder positiveBucketsEncoder = new ExpHistogramBucketsEncoder();
    private ExpHistogramBucketsEncoder negativeBucketsEncoder = new ExpHistogramBucketsEncoder();
    private Float64Encoder zeroThresholdEncoder = new Float64Encoder();
    

    private long keepFieldMask;
    private int fieldCount;

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        state.ExpHistogramValueEncoder = this;
        this.limiter = state.getLimiter();

        if (state.getOverrideSchema() != null) {
            int fieldCount = state.getOverrideSchema().getFieldCount("ExpHistogramValue");
            this.fieldCount = fieldCount;
            this.keepFieldMask = ~((~0L) << this.fieldCount);
        } else {
            this.fieldCount = 9;
            this.keepFieldMask = ~0L;
        }

        
        if (this.fieldCount <= 0) {
            return; // Count and subsequent fields are skipped.
        }
        this.countEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 1) {
            return; // Sum and subsequent fields are skipped.
        }
        this.sumEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 2) {
            return; // Min and subsequent fields are skipped.
        }
        this.minEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 3) {
            return; // Max and subsequent fields are skipped.
        }
        this.maxEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 4) {
            return; // Scale and subsequent fields are skipped.
        }
        this.scaleEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 5) {
            return; // ZeroCount and subsequent fields are skipped.
        }
        this.zeroCountEncoder.init(this.limiter, columns.addSubColumn());
        if (this.fieldCount <= 6) {
            return; // PositiveBuckets and subsequent fields are skipped.
        }
        this.positiveBucketsEncoder.init(state, columns.addSubColumn());
        if (this.fieldCount <= 7) {
            return; // NegativeBuckets and subsequent fields are skipped.
        }
        this.negativeBucketsEncoder.init(state, columns.addSubColumn());
        if (this.fieldCount <= 8) {
            return; // ZeroThreshold and subsequent fields are skipped.
        }
        this.zeroThresholdEncoder.init(this.limiter, columns.addSubColumn());
    }

    public void reset() {
        // Since we are resetting the state of encoder make sure the next encode()
        // call forcedly writes all fields and does not attempt to skip.
        this.forceModifiedFields = true;
        this.countEncoder.reset();
        this.sumEncoder.reset();
        this.minEncoder.reset();
        this.maxEncoder.reset();
        this.scaleEncoder.reset();
        this.zeroCountEncoder.reset();
        this.positiveBucketsEncoder.reset();
        this.negativeBucketsEncoder.reset();
        this.zeroThresholdEncoder.reset();
    }

    // encode encodes val into buf
    public void encode(ExpHistogramValue val) throws IOException {
        int oldLen = this.buf.bitCount();

        

        // Mask that describes what fields are encoded. Start with all modified fields.
        long fieldMask = val.modifiedFields.mask;
        // If forceModifiedFields we need to set to 1 all bits so that we
        // force writing of all fields.
        if (this.forceModifiedFields) {
            fieldMask =
                ExpHistogramValue.fieldModifiedCount | 
                ExpHistogramValue.fieldModifiedSum | 
                ExpHistogramValue.fieldModifiedMin | 
                ExpHistogramValue.fieldModifiedMax | 
                ExpHistogramValue.fieldModifiedScale | 
                ExpHistogramValue.fieldModifiedZeroCount | 
                ExpHistogramValue.fieldModifiedPositiveBuckets | 
                ExpHistogramValue.fieldModifiedNegativeBuckets | 
                ExpHistogramValue.fieldModifiedZeroThreshold | 0L;
        }

        // Only write fields that we want to write. See init() for keepFieldMask.
        fieldMask &= this.keepFieldMask;

        // Write bits to indicate which fields follow.
        this.buf.writeBits(fieldMask, this.fieldCount);
        
        // Write bits to indicate which optional fields are set.
        this.buf.writeBits(val.optionalFieldsPresent, 3);
        // Encode modified, present fields.
        
        if ((fieldMask & ExpHistogramValue.fieldModifiedCount) != 0) {
            // Encode Count
            this.countEncoder.encode(val.count);
        }
        
        if ((fieldMask & ExpHistogramValue.fieldModifiedSum) != 0 && (val.optionalFieldsPresent & ExpHistogramValue.fieldPresentSum) != 0) {
            // Encode Sum
            this.sumEncoder.encode(val.sum);
        }
        
        if ((fieldMask & ExpHistogramValue.fieldModifiedMin) != 0 && (val.optionalFieldsPresent & ExpHistogramValue.fieldPresentMin) != 0) {
            // Encode Min
            this.minEncoder.encode(val.min);
        }
        
        if ((fieldMask & ExpHistogramValue.fieldModifiedMax) != 0 && (val.optionalFieldsPresent & ExpHistogramValue.fieldPresentMax) != 0) {
            // Encode Max
            this.maxEncoder.encode(val.max);
        }
        
        if ((fieldMask & ExpHistogramValue.fieldModifiedScale) != 0) {
            // Encode Scale
            this.scaleEncoder.encode(val.scale);
        }
        
        if ((fieldMask & ExpHistogramValue.fieldModifiedZeroCount) != 0) {
            // Encode ZeroCount
            this.zeroCountEncoder.encode(val.zeroCount);
        }
        
        if ((fieldMask & ExpHistogramValue.fieldModifiedPositiveBuckets) != 0) {
            // Encode PositiveBuckets
            this.positiveBucketsEncoder.encode(val.positiveBuckets);
        }
        
        if ((fieldMask & ExpHistogramValue.fieldModifiedNegativeBuckets) != 0) {
            // Encode NegativeBuckets
            this.negativeBucketsEncoder.encode(val.negativeBuckets);
        }
        
        if ((fieldMask & ExpHistogramValue.fieldModifiedZeroThreshold) != 0) {
            // Encode ZeroThreshold
            this.zeroThresholdEncoder.encode(val.zeroThreshold);
        }
        
        // Account written bits in the limiter.
        int newLen = this.buf.bitCount();
        this.limiter.addFrameBits(newLen - oldLen);

        // Mark all fields non-modified so that next encode() correctly
        // encodes only fields that change after this.
        val.modifiedFields.mask = 0;
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        
        if (this.fieldCount <= 0) {
            return; // Count and subsequent fields are skipped.
        }
        this.countEncoder.collectColumns(columnSet.at(0));
        if (this.fieldCount <= 1) {
            return; // Sum and subsequent fields are skipped.
        }
        this.sumEncoder.collectColumns(columnSet.at(1));
        if (this.fieldCount <= 2) {
            return; // Min and subsequent fields are skipped.
        }
        this.minEncoder.collectColumns(columnSet.at(2));
        if (this.fieldCount <= 3) {
            return; // Max and subsequent fields are skipped.
        }
        this.maxEncoder.collectColumns(columnSet.at(3));
        if (this.fieldCount <= 4) {
            return; // Scale and subsequent fields are skipped.
        }
        this.scaleEncoder.collectColumns(columnSet.at(4));
        if (this.fieldCount <= 5) {
            return; // ZeroCount and subsequent fields are skipped.
        }
        this.zeroCountEncoder.collectColumns(columnSet.at(5));
        if (this.fieldCount <= 6) {
            return; // PositiveBuckets and subsequent fields are skipped.
        }
        this.positiveBucketsEncoder.collectColumns(columnSet.at(6));
        if (this.fieldCount <= 7) {
            return; // NegativeBuckets and subsequent fields are skipped.
        }
        this.negativeBucketsEncoder.collectColumns(columnSet.at(7));
        if (this.fieldCount <= 8) {
            return; // ZeroThreshold and subsequent fields are skipped.
        }
        this.zeroThresholdEncoder.collectColumns(columnSet.at(8));
    }
}

