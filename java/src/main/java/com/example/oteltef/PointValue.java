// Code generated by stefc. DO NOT EDIT.
// PointValue Java class generated from template
package com.example.oteltef;

import net.stef.StringValue;
import net.stef.Types;
import java.util.*;

// PointValue is a oneof struct.
public class PointValue {
    // The current type of the oneof.
    Type typ;
    
    long int64;
    double float64;
    HistogramValue histogram;
    ExpHistogramValue expHistogram;
    SummaryValue summary;

    // Pointer to parent's modifiedFields
    ModifiedFields parentModifiedFields;
    // Bit to set in parent's modifiedFields when this oneof is modified.
    long parentModifiedBit;

    PointValue() {
        init(null, 0);
    }

    PointValue(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        init(parentModifiedFields, parentModifiedBit);
    }

    void init(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        typ = Type.TypeNone;
        this.parentModifiedFields = parentModifiedFields;
        this.parentModifiedBit = parentModifiedBit;
        
        int64 = 0;
        float64 = 0.0;
    }

    // reset the struct to its initial state, as if init() was just called.
    // Will not reset internal fields such as parentModifiedFields.
    void reset() {
        typ = Type.TypeNone;
        // We don't need to reset the state of the field since that will be done
        // when the type is changed, see SetType().
    }

    // Type enum for oneof
    public enum Type {
        TypeNone(0),
        TypeInt64(0 + 1),
        TypeFloat64(1 + 1),
        TypeHistogram(2 + 1),
        TypeExpHistogram(3 + 1),
        TypeSummary(4 + 1),
        TypeCount(5 + 1);

        private final int value;

        Type(int value) {
            this.value = value;
        }

        public int getValue() {
            return value;
        }
    }

    // getType returns the type of the value currently contained in PointValue.
    public Type getType() {
        return typ;
    }

    // resetContained resets the currently contained value, if any.
    // Normally used after switching to a different type to make sure
    // the value contained is in blank state.
    void resetContained() {
        switch (typ) {
        case TypeHistogram:
            if (histogram != null) {
                histogram.reset();
            }
            break;
        case TypeExpHistogram:
            if (expHistogram != null) {
                expHistogram.reset();
            }
            break;
        case TypeSummary:
            if (summary != null) {
                summary.reset();
            }
            break;
        }
    }

    // setType sets the type of the value currently contained in PointValue.
    public void setType(Type typ) {
        if (this.typ != typ) {
            this.typ = typ;
            resetContained();
            switch (typ) {
            case TypeHistogram:
                if (histogram == null) {
                    histogram = new HistogramValue(parentModifiedFields, parentModifiedBit);
                }
                break;
            case TypeExpHistogram:
                if (expHistogram == null) {
                    expHistogram = new ExpHistogramValue(parentModifiedFields, parentModifiedBit);
                }
                break;
            case TypeSummary:
                if (summary == null) {
                    summary = new SummaryValue(parentModifiedFields, parentModifiedBit);
                }
                break;
            }
            this.markParentModified();
        }
    }

    
    // Int64 returns the value if the contained type is currently TypeInt64.
    // The caller must check the type via getType() before attempting to call this function.
    public long getInt64() {
        return this.int64;
    }
    
    // SetInt64 sets the value to the specified value and sets the type to TypeInt64.
    public void setInt64(long v) {
        if (!Types.Int64Equal(this.int64, v) || this.typ != Type.TypeInt64) {
            this.int64 = v;
            this.typ = Type.TypeInt64;
            this.markParentModified();
        }
    }
    
    
    // Float64 returns the value if the contained type is currently TypeFloat64.
    // The caller must check the type via getType() before attempting to call this function.
    public double getFloat64() {
        return this.float64;
    }
    
    // SetFloat64 sets the value to the specified value and sets the type to TypeFloat64.
    public void setFloat64(double v) {
        if (!Types.Float64Equal(this.float64, v) || this.typ != Type.TypeFloat64) {
            this.float64 = v;
            this.typ = Type.TypeFloat64;
            this.markParentModified();
        }
    }
    
    
    // Histogram returns the value if the contained type is currently TypeHistogram.
    // The caller must check the type via getType() before attempting to call this function.
    public HistogramValue getHistogram() {
        return this.histogram;
    }
    
    
    // ExpHistogram returns the value if the contained type is currently TypeExpHistogram.
    // The caller must check the type via getType() before attempting to call this function.
    public ExpHistogramValue getExpHistogram() {
        return this.expHistogram;
    }
    
    
    // Summary returns the value if the contained type is currently TypeSummary.
    // The caller must check the type via getType() before attempting to call this function.
    public SummaryValue getSummary() {
        return this.summary;
    }
    
    

    // Clone returns a deep copy of this oneof.
    public PointValue clone() {
        PointValue cpy = new PointValue();
        cpy.typ = this.typ;
        cpy.int64 = this.int64;
        cpy.float64 = this.float64;
        cpy.histogram = this.histogram.clone();
        cpy.expHistogram = this.expHistogram.clone();
        cpy.summary = this.summary.clone();
        return cpy;
    }

    // byteSize returns approximate memory usage in bytes. Used to calculate memory used by dictionaries.
    public int byteSize() {
        int size = 0; // TODO: calculate the size of this object.
        
        
        size += this.histogram.byteSize();
        size += this.expHistogram.byteSize();
        size += this.summary.byteSize();
        return size;
    }

    // copy performs a deep copy from src.
    public void copyFrom(PointValue src) {
        switch (src.typ) {
        case TypeInt64:
            setInt64(src.getInt64());
            break;
        case TypeFloat64:
            setFloat64(src.getFloat64());
            break;
        case TypeHistogram:
            setType(src.typ);
            histogram.copyFrom(src.histogram);
            break;
        case TypeExpHistogram:
            setType(src.typ);
            expHistogram.copyFrom(src.expHistogram);
            break;
        case TypeSummary:
            setType(src.typ);
            summary.copyFrom(src.summary);
            break;
        case TypeNone:
            setType(Type.TypeNone);
            break;
        }
    }

    private void markParentModified() {
        if (parentModifiedFields != null) {
            parentModifiedFields.markModified(parentModifiedBit);
        }
    }

    void markModifiedRecursively() {
        switch (this.typ) {
        case TypeInt64:
            break;
        case TypeFloat64:
            break;
        case TypeHistogram:
            this.histogram.markModifiedRecursively();
            break;
        case TypeExpHistogram:
            this.expHistogram.markModifiedRecursively();
            break;
        case TypeSummary:
            this.summary.markModifiedRecursively();
            break;
        default:
            break;
        }
    }

    void markUnmodifiedRecursively() {
        switch (this.typ) {
        case TypeInt64:
            break;
        case TypeFloat64:
            break;
        case TypeHistogram:
            this.histogram.markUnmodifiedRecursively();
            break;
        case TypeExpHistogram:
            this.expHistogram.markUnmodifiedRecursively();
            break;
        case TypeSummary:
            this.summary.markUnmodifiedRecursively();
            break;
        default:
            break;
        }
    }

    // equals performs deep comparison and returns true if struct is equal to val.
    public boolean equals(PointValue val) {
        if (this.typ != val.typ) {
            return false;
        }
        switch (this.typ) {
        case TypeInt64:
            if (!Types.Int64Equal(this.int64, val.int64)) {
                return false;
            }
            break;
        case TypeFloat64:
            if (!Types.Float64Equal(this.float64, val.float64)) {
                return false;
            }
            break;
        case TypeHistogram:
            if (!this.histogram.equals(val.histogram)) {
                return false;
            }
            break;
        case TypeExpHistogram:
            if (!this.expHistogram.equals(val.expHistogram)) {
                return false;
            }
            break;
        case TypeSummary:
            if (!this.summary.equals(val.summary)) {
                return false;
            }
            break;
        default:
            break;
        }
        return true;
    }

    public static boolean equals(PointValue left, PointValue right) {
        return left.equals(right);
    }

    // compare performs deep comparison and returns 0 if equal, negative if left < right, positive if left > right.
    public static int compare(PointValue left, PointValue right) {
        if (left == null) return right == null ? 0 : -1;
        if (right == null) return 1;
        int c = Integer.compare(left.typ.ordinal(), right.typ.ordinal());
        if (c != 0) return c;
        switch (left.typ) {
        case TypeInt64:
            c = Types.Int64Compare(left.int64, right.int64);
            if (c != 0) {
                return c;
            }
            break;
        case TypeFloat64:
            c = Types.Float64Compare(left.float64, right.float64);
            if (c != 0) {
                return c;
            }
            break;
        case TypeHistogram:
            c = HistogramValue.compare(left.histogram, right.histogram);
            if (c != 0) {
                return c;
            }
            break;
        case TypeExpHistogram:
            c = ExpHistogramValue.compare(left.expHistogram, right.expHistogram);
            if (c != 0) {
                return c;
            }
            break;
        case TypeSummary:
            c = SummaryValue.compare(left.summary, right.summary);
            if (c != 0) {
                return c;
            }
            break;
        default:
            break;
        }
        return 0;
    }

    // mutateRandom mutates fields in a random, deterministic manner using random as a deterministic generator.
    void mutateRandom(Random random) {
        int fieldCount = 5;
        boolean typeChanged = false;
        if (random.nextInt(10) == 0) {
            this.setType(Type.values()[random.nextInt(fieldCount + 1)]);
            typeChanged = true;
        }
        switch (this.typ) {
        case TypeInt64:
            if (typeChanged || random.nextInt(2) == 0) {
                this.setInt64(Types.Int64Random(random));
            }
            break;
        case TypeFloat64:
            if (typeChanged || random.nextInt(2) == 0) {
                this.setFloat64(Types.Float64Random(random));
            }
            break;
        case TypeHistogram:
            if (typeChanged || random.nextInt(2) == 0) {
                this.histogram.mutateRandom(random);
            }
            break;
        case TypeExpHistogram:
            if (typeChanged || random.nextInt(2) == 0) {
                this.expHistogram.mutateRandom(random);
            }
            break;
        case TypeSummary:
            if (typeChanged || random.nextInt(2) == 0) {
                this.summary.mutateRandom(random);
            }
            break;
        default:
            break;
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return equals((PointValue)o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            int64,
            float64,
            histogram,
            expHistogram,
            summary,
            typ
        );
    }
}
