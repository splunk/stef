// Code generated by stefgen. DO NOT EDIT.
// ExpHistogramBucketsDecoder implements decoding of ExpHistogramBuckets
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class ExpHistogramBucketsDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private ExpHistogramBuckets lastVal;
    private int fieldCount;

    
    private Int64Decoder offsetDecoder;
    private boolean isOffsetRecursive = false; // Indicates Offset field's type is recursive.
    private Uint64ArrayDecoder bucketCountsDecoder;
    private boolean isBucketCountsRecursive = false; // Indicates BucketCounts field's type is recursive.
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.ExpHistogramBucketsDecoder != null) {
            throw new IllegalStateException("cannot initialize ExpHistogramBucketsDecoder: already initialized");
        }
        state.ExpHistogramBucketsDecoder = this;

        try {
            fieldCount = state.getStructFieldCounts().getExpHistogramBucketsFieldCount();

            column = columns.getColumn();
            
            lastVal = new ExpHistogramBuckets(null, 0);
            
            if (this.fieldCount <= 0) {
                return; // Offset and subsequent fields are skipped.
            }
            offsetDecoder = new Int64Decoder();
            offsetDecoder.init(columns.addSubColumn());
            if (this.fieldCount <= 1) {
                return; // BucketCounts and subsequent fields are skipped.
            }
            if (state.Uint64ArrayDecoder != null) {
                // Recursion detected, use the existing decoder.
                bucketCountsDecoder = state.Uint64ArrayDecoder;
                isBucketCountsRecursive = true; // Mark that we are using a recursive decoder.
            } else {
                bucketCountsDecoder = new Uint64ArrayDecoder();
                bucketCountsDecoder.init(state, columns.addSubColumn());
            }
        } finally {
            state.ExpHistogramBucketsDecoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // Offset and subsequent fields are skipped.
        }
        offsetDecoder.continueDecoding();
        if (this.fieldCount <= 1) {
            return; // BucketCounts and subsequent fields are skipped.
        }
        
        if (!isBucketCountsRecursive) {
            bucketCountsDecoder.continueDecoding();
        }
        
    }

    public void reset() {
        
        if (fieldCount <= 0) {
            // Offset and all subsequent fields are skipped.
            return;
        }
        offsetDecoder.reset();
        if (fieldCount <= 1) {
            // BucketCounts and all subsequent fields are skipped.
            return;
        }
        if (!isBucketCountsRecursive) {
            bucketCountsDecoder.reset();
        }
    }

    public ExpHistogramBuckets decode(ExpHistogramBuckets dstPtr) throws IOException {
        ExpHistogramBuckets val = dstPtr;
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        
        
        if ((val.modifiedFields.mask & ExpHistogramBuckets.fieldModifiedOffset) != 0) {
            // Field is changed and is present, decode it.
            val.offset = offsetDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & ExpHistogramBuckets.fieldModifiedBucketCounts) != 0) {
            // Field is changed and is present, decode it.
            if (val.bucketCounts == null) {
                val.bucketCounts = new Uint64Array(val.modifiedFields, ExpHistogramBuckets.fieldModifiedBucketCounts);
            }
            val.bucketCounts = bucketCountsDecoder.decode(val.bucketCounts);
        }
        
        
        return val;
    }
}

