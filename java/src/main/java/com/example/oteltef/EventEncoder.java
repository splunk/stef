// Code generated by stefgen. DO NOT EDIT.
// EventEncoder implements encoding of Event
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class EventEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;

    // forceModifiedFields is set to true if the next encoding operation
    // must write all fields, whether they are modified or not.
    // This is used after frame restarts so that the data can be decoded
    // from the frame start.
    private boolean forceModifiedFields;

    
    private StringEncoder nameEncoder;
    private boolean isNameRecursive = false; // Indicates Name field's type is recursive.
    private Uint64Encoder timeUnixNanoEncoder;
    private boolean isTimeUnixNanoRecursive = false; // Indicates TimeUnixNano field's type is recursive.
    private AttributesEncoder attributesEncoder;
    private boolean isAttributesRecursive = false; // Indicates Attributes field's type is recursive.
    private Uint64Encoder droppedAttributesCountEncoder;
    private boolean isDroppedAttributesCountRecursive = false; // Indicates DroppedAttributesCount field's type is recursive.
    

    private long keepFieldMask;
    private int fieldCount;

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.EventEncoder != null) {
            throw new IllegalStateException("cannot initialize EventEncoder: already initialized");
        }
        state.EventEncoder = this;

        try {
            this.limiter = state.getLimiter();

            if (state.getOverrideSchema() != null) {
                int fieldCount = state.getOverrideSchema().getFieldCount("Event");
                this.fieldCount = fieldCount;
                this.keepFieldMask = ~((~0L) << this.fieldCount);
            } else {
                this.fieldCount = 4;
                this.keepFieldMask = ~0L;
            }

            
            // Init encoder for Name field.
            if (this.fieldCount <= 0) {
                return; // Name and subsequent fields are skipped.
            }
            nameEncoder = new StringEncoder();
            this.nameEncoder.init(state.SpanEventName, this.limiter, columns.addSubColumn());
            // Init encoder for TimeUnixNano field.
            if (this.fieldCount <= 1) {
                return; // TimeUnixNano and subsequent fields are skipped.
            }
            timeUnixNanoEncoder = new Uint64Encoder();
            this.timeUnixNanoEncoder.init(this.limiter, columns.addSubColumn());
            // Init encoder for Attributes field.
            if (this.fieldCount <= 2) {
                return; // Attributes and subsequent fields are skipped.
            }
            if (state.AttributesEncoder != null) {
                // Recursion detected, use the existing encoder.
                attributesEncoder = state.AttributesEncoder;
                isAttributesRecursive = true;
            } else {
                attributesEncoder = new AttributesEncoder();
                attributesEncoder.init(state, columns.addSubColumn());
            }
            // Init encoder for DroppedAttributesCount field.
            if (this.fieldCount <= 3) {
                return; // DroppedAttributesCount and subsequent fields are skipped.
            }
            droppedAttributesCountEncoder = new Uint64Encoder();
            this.droppedAttributesCountEncoder.init(this.limiter, columns.addSubColumn());
        } finally {
            state.EventEncoder = null;
        }
    }

    public void reset() {
        // Since we are resetting the state of encoder make sure the next encode()
        // call forcefully writes all fields and does not attempt to skip.
        this.forceModifiedFields = true;
        nameEncoder.reset();
        timeUnixNanoEncoder.reset();
        
        if (!isAttributesRecursive) {
            attributesEncoder.reset();
        }
        
        droppedAttributesCountEncoder.reset();
    }

    // encode encodes val into buf
    public void encode(Event val) throws IOException {
        int oldLen = this.buf.bitCount();

        

        // Mask that describes what fields are encoded. Start with all modified fields.
        long fieldMask = val.modifiedFields.mask;
        // If forceModifiedFields we need to set to 1 all bits so that we
        // force writing of all fields.
        if (this.forceModifiedFields) {
            fieldMask =
                Event.fieldModifiedName | 
                Event.fieldModifiedTimeUnixNano | 
                Event.fieldModifiedAttributes | 
                Event.fieldModifiedDroppedAttributesCount | 0L;
        }

        // Only write fields that we want to write. See init() for keepFieldMask.
        fieldMask &= this.keepFieldMask;

        // Write bits to indicate which fields follow.
        this.buf.writeBits(fieldMask, this.fieldCount);
        
        // Encode modified, present fields.
        
        if ((fieldMask & Event.fieldModifiedName) != 0) {
            // Encode Name
            this.nameEncoder.encode(val.name);
        }
        
        if ((fieldMask & Event.fieldModifiedTimeUnixNano) != 0) {
            // Encode TimeUnixNano
            this.timeUnixNanoEncoder.encode(val.timeUnixNano);
        }
        
        if ((fieldMask & Event.fieldModifiedAttributes) != 0) {
            // Encode Attributes
            this.attributesEncoder.encode(val.attributes);
        }
        
        if ((fieldMask & Event.fieldModifiedDroppedAttributesCount) != 0) {
            // Encode DroppedAttributesCount
            this.droppedAttributesCountEncoder.encode(val.droppedAttributesCount);
        }
        
        // Account written bits in the limiter.
        int newLen = this.buf.bitCount();
        this.limiter.addFrameBits(newLen - oldLen);

        // Mark all fields non-modified so that next encode() correctly
        // encodes only fields that change after this.
        val.modifiedFields.mask = 0;
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        int colIdx = 0;
        
        // Collect Name field.
        if (this.fieldCount <= 0) {
            return; // Name and subsequent fields are skipped.
        }
        
        nameEncoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
        // Collect TimeUnixNano field.
        if (this.fieldCount <= 1) {
            return; // TimeUnixNano and subsequent fields are skipped.
        }
        
        timeUnixNanoEncoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
        // Collect Attributes field.
        if (this.fieldCount <= 2) {
            return; // Attributes and subsequent fields are skipped.
        }
        if (!isAttributesRecursive) {
            attributesEncoder.collectColumns(columnSet.at(colIdx));
            colIdx++;
        }
        
        // Collect DroppedAttributesCount field.
        if (this.fieldCount <= 3) {
            return; // DroppedAttributesCount and subsequent fields are skipped.
        }
        
        droppedAttributesCountEncoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
    }
}

