// Code generated by stefgen. DO NOT EDIT.
// HistogramValue Java class generated from template
package com.example.oteltef;

import net.stef.StringValue;
import net.stef.Types;
import net.stef.schema.WireSchema;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.*;

public class HistogramValue {
    // Field values.
    
    long count;
    double sum;
    double min;
    double max;
    Int64Array bucketCounts;

    // modifiedFields keeps track of which fields are modified.
    final ModifiedFields modifiedFields = new ModifiedFields();
    // Field presence bits.
    // Fields which are present have the corresponding bit set, see fieldPresent* consts below.
    long optionalFieldsPresent;

    public static final String StructName = "HistogramValue";

    // Bitmasks for "modified" flags for each field.
    
    public static final long fieldModifiedCount = 1 << 0;
    public static final long fieldModifiedSum = 1 << 1;
    public static final long fieldModifiedMin = 1 << 2;
    public static final long fieldModifiedMax = 1 << 3;
    public static final long fieldModifiedBucketCounts = 1 << 4;

    
    // Bitmasks for "present" flags for optional fields.
    
    public static final long fieldPresentSum = 1L << 0;
    public static final long fieldPresentMin = 1L << 1;
    public static final long fieldPresentMax = 1L << 2;
    

    public HistogramValue() {
        init(null, 0);
    }

    HistogramValue(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        init(parentModifiedFields, parentModifiedBit);
    }

    private void init(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        modifiedFields.parent = parentModifiedFields;
        modifiedFields.parentBit = parentModifiedBit;
        
        
        
        
        
        bucketCounts = new Int64Array(modifiedFields, fieldModifiedBucketCounts);
    }

    
    public long getCount() {
        return count;
    }

    // setCount sets the value of Count field.
    public void setCount(long v) {
        if (!Types.Int64Equal(this.count, v)) {
            this.count = v;
            this.markCountModified();
        }
    }

    private void markCountModified() {
        this.modifiedFields.markModified(fieldModifiedCount);
    }

    // isCountModified returns true if the value of Count field was modified since
    // HistogramValue was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isCountModified() {
        return (this.modifiedFields.mask & fieldModifiedCount) != 0;
    }
    
    public double getSum() {
        return sum;
    }

    // setSum sets the value of Sum field.
    public void setSum(double v) {
        if (!Types.Float64Equal(this.sum, v)|| (this.optionalFieldsPresent & fieldPresentSum) == 0) {
            this.sum = v;
            this.markSumModified();
            this.optionalFieldsPresent |= fieldPresentSum;
        }
    }
    // unsetSum unsets the presence flag of Sum field. A subsequent hasSum() will return false.
    public void unsetSum() {
        if ((this.optionalFieldsPresent & fieldPresentSum) != 0) {
            this.optionalFieldsPresent &= ~fieldPresentSum;
            this.markSumModified();
        }
    }

    // hasSum returns true if the presence flag Sum field is set and false if it is unset.
    public boolean hasSum() {
        return (this.optionalFieldsPresent & fieldPresentSum) != 0;
    }

    private void markSumModified() {
        this.modifiedFields.markModified(fieldModifiedSum);
    }

    // isSumModified returns true if the value of Sum field was modified since
    // HistogramValue was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isSumModified() {
        return (this.modifiedFields.mask & fieldModifiedSum) != 0;
    }
    
    public double getMin() {
        return min;
    }

    // setMin sets the value of Min field.
    public void setMin(double v) {
        if (!Types.Float64Equal(this.min, v)|| (this.optionalFieldsPresent & fieldPresentMin) == 0) {
            this.min = v;
            this.markMinModified();
            this.optionalFieldsPresent |= fieldPresentMin;
        }
    }
    // unsetMin unsets the presence flag of Min field. A subsequent hasMin() will return false.
    public void unsetMin() {
        if ((this.optionalFieldsPresent & fieldPresentMin) != 0) {
            this.optionalFieldsPresent &= ~fieldPresentMin;
            this.markMinModified();
        }
    }

    // hasMin returns true if the presence flag Min field is set and false if it is unset.
    public boolean hasMin() {
        return (this.optionalFieldsPresent & fieldPresentMin) != 0;
    }

    private void markMinModified() {
        this.modifiedFields.markModified(fieldModifiedMin);
    }

    // isMinModified returns true if the value of Min field was modified since
    // HistogramValue was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isMinModified() {
        return (this.modifiedFields.mask & fieldModifiedMin) != 0;
    }
    
    public double getMax() {
        return max;
    }

    // setMax sets the value of Max field.
    public void setMax(double v) {
        if (!Types.Float64Equal(this.max, v)|| (this.optionalFieldsPresent & fieldPresentMax) == 0) {
            this.max = v;
            this.markMaxModified();
            this.optionalFieldsPresent |= fieldPresentMax;
        }
    }
    // unsetMax unsets the presence flag of Max field. A subsequent hasMax() will return false.
    public void unsetMax() {
        if ((this.optionalFieldsPresent & fieldPresentMax) != 0) {
            this.optionalFieldsPresent &= ~fieldPresentMax;
            this.markMaxModified();
        }
    }

    // hasMax returns true if the presence flag Max field is set and false if it is unset.
    public boolean hasMax() {
        return (this.optionalFieldsPresent & fieldPresentMax) != 0;
    }

    private void markMaxModified() {
        this.modifiedFields.markModified(fieldModifiedMax);
    }

    // isMaxModified returns true if the value of Max field was modified since
    // HistogramValue was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isMaxModified() {
        return (this.modifiedFields.mask & fieldModifiedMax) != 0;
    }
    
    public Int64Array getBucketCounts() {
        return this.bucketCounts;
    }

    // isBucketCountsModified returns true if the value of BucketCounts field was modified since
    // HistogramValue was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isBucketCountsModified() {
        return (this.modifiedFields.mask & fieldModifiedBucketCounts) != 0;
    }
    

    void markUnmodified() {
        modifiedFields.markUnmodified();
        if (this.isBucketCountsModified()) {
            this.bucketCounts.markUnmodified();
        }
    }

    void markModifiedRecursively() {
        bucketCounts.markModifiedRecursively();
        modifiedFields.mask =
            fieldModifiedCount | 
            fieldModifiedSum | 
            fieldModifiedMin | 
            fieldModifiedMax | 
            fieldModifiedBucketCounts | 0;
    }

    void markUnmodifiedRecursively() {
        if (isBucketCountsModified()) {
            bucketCounts.markUnmodifiedRecursively();
        }
        modifiedFields.mask = 0;
    }

    // markDiffModified marks fields in this struct modified if they differ from
    // the corresponding fields in v.
    boolean markDiffModified(HistogramValue v) {
        boolean modified = false;
        if (!Types.Int64Equal(count, v.count)) {
            markCountModified();
            modified = true;
        }
        
        if (!Types.Float64Equal(sum, v.sum)|| (optionalFieldsPresent & fieldPresentSum)==0) {
            markSumModified();
            optionalFieldsPresent |= fieldPresentSum;
            modified = true;
        }
        
        if (!Types.Float64Equal(min, v.min)|| (optionalFieldsPresent & fieldPresentMin)==0) {
            markMinModified();
            optionalFieldsPresent |= fieldPresentMin;
            modified = true;
        }
        
        if (!Types.Float64Equal(max, v.max)|| (optionalFieldsPresent & fieldPresentMax)==0) {
            markMaxModified();
            optionalFieldsPresent |= fieldPresentMax;
            modified = true;
        }
        
        if (bucketCounts.markDiffModified(v.bucketCounts)) {
            modifiedFields.markModified(fieldModifiedBucketCounts);
            modified = true;
        }
        
        return modified;
    }

    public HistogramValue clone() {
        HistogramValue cpy = new HistogramValue();
        cpy.count = this.count;
        cpy.sum = this.sum;
        cpy.min = this.min;
        cpy.max = this.max;
        cpy.bucketCounts = this.bucketCounts.clone();
        return cpy;
    }

    // ByteSize returns approximate memory usage in bytes. Used to calculate memory used by dictionaries.
    int byteSize() {
        int size = 0; // TODO: calculate the size of this object.
        
        
        
        
        size += this.bucketCounts.byteSize();
        return size;
    }

    // Performs a deep copy from src to dst.
    public void copyFrom(HistogramValue src) {
        setCount(src.getCount());
        if (src.hasSum()) {
            setSum(src.getSum());
        } else {
            unsetSum();
        }
        if (src.hasMin()) {
            setMin(src.getMin());
        } else {
            unsetMin();
        }
        if (src.hasMax()) {
            setMax(src.getMax());
        } else {
            unsetMax();
        }
        bucketCounts.copyFrom(src.bucketCounts);
    }

    // equals performs deep comparison and returns true if struct is equal to val.
    public boolean equals(HistogramValue val) {
        if (!Types.Int64Equal(this.count, val.count)) {
            return false;
        }
        if (!Types.Float64Equal(this.sum, val.sum)) {
            return false;
        }
        if (!Types.Float64Equal(this.min, val.min)) {
            return false;
        }
        if (!Types.Float64Equal(this.max, val.max)) {
            return false;
        }
        if (!this.bucketCounts.equals(val.bucketCounts)) {
            return false;
        }
        return true;
    }

    public static boolean equals(HistogramValue left, HistogramValue right) {
        return left.equals(right);
    }

    // compare performs deep comparison and returns an integer that
    // will be 0 if left == right, negative if left < right, positive if left > right.
    public static int compare(HistogramValue left, HistogramValue right) {
        if (left == null) {
            if (right == null) {
                return 0;
            }
            return -1;
        }
        if (right == null) {
            return 1;
        }
        int c;
        
        c = Types.Int64Compare(left.count, right.count);
        if (c != 0) {
            return c;
        }
        
        c = Types.Float64Compare(left.sum, right.sum);
        if (c != 0) {
            return c;
        }
        
        c = Types.Float64Compare(left.min, right.min);
        if (c != 0) {
            return c;
        }
        
        c = Types.Float64Compare(left.max, right.max);
        if (c != 0) {
            return c;
        }
        
        c = Int64Array.compare(left.bucketCounts, right.bucketCounts);
        if (c != 0) {
            return c;
        }
        
        return 0;
    }

    // mutateRandom mutates fields in a random, deterministic manner using random as a deterministic generator.
    void mutateRandom(Random random) {
        final int fieldCount = 5;
        
        if (random.nextInt(fieldCount) == 0) {
            this.setCount(Types.Int64Random(random));
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.setSum(Types.Float64Random(random));
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.setMin(Types.Float64Random(random));
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.setMax(Types.Float64Random(random));
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.bucketCounts.mutateRandom(random);
        }
        
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return equals((HistogramValue)o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            count,
            sum,
            min,
            max,
            bucketCounts
        );
    }

    
}
