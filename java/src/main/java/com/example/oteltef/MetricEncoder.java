// Code generated by stefgen. DO NOT EDIT.
// MetricEncoder implements encoding of Metric
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class MetricEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;

    // forceModifiedFields is set to true if the next encoding operation
    // must write all fields, whether they are modified or not.
    // This is used after frame restarts so that the data can be decoded
    // from the frame start.
    private boolean forceModifiedFields;

    
    private StringEncoder nameEncoder = new StringEncoder();
    private StringEncoder descriptionEncoder = new StringEncoder();
    private StringEncoder unitEncoder = new StringEncoder();
    private Uint64Encoder type_Encoder = new Uint64Encoder();
    private AttributesEncoder metadataEncoder = new AttributesEncoder();
    private Float64ArrayEncoder histogramBoundsEncoder = new Float64ArrayEncoder();
    private Uint64Encoder aggregationTemporalityEncoder = new Uint64Encoder();
    private BoolEncoder monotonicEncoder = new BoolEncoder();
    
    private MetricEncoderDict dict;
    

    private long keepFieldMask;
    private int fieldCount;

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.MetricEncoder != null) {
            throw new IllegalStateException("cannot initialize MetricEncoder: already initialized");
        }
        state.MetricEncoder = this;

        try {
            this.limiter = state.getLimiter();
            this.dict = state.Metric;

            if (state.getOverrideSchema() != null) {
                int fieldCount = state.getOverrideSchema().getFieldCount("Metric");
                this.fieldCount = fieldCount;
                this.keepFieldMask = ~((~0L) << this.fieldCount);
            } else {
                this.fieldCount = 8;
                this.keepFieldMask = ~0L;
            }

            
            if (this.fieldCount <= 0) {
                return; // Name and subsequent fields are skipped.
            }
            this.nameEncoder.init(state.MetricName, this.limiter, columns.addSubColumn());
            if (this.fieldCount <= 1) {
                return; // Description and subsequent fields are skipped.
            }
            this.descriptionEncoder.init(state.MetricDescription, this.limiter, columns.addSubColumn());
            if (this.fieldCount <= 2) {
                return; // Unit and subsequent fields are skipped.
            }
            this.unitEncoder.init(state.MetricUnit, this.limiter, columns.addSubColumn());
            if (this.fieldCount <= 3) {
                return; // Type and subsequent fields are skipped.
            }
            this.type_Encoder.init(this.limiter, columns.addSubColumn());
            if (this.fieldCount <= 4) {
                return; // Metadata and subsequent fields are skipped.
            }
            this.metadataEncoder.init(state, columns.addSubColumn());
            if (this.fieldCount <= 5) {
                return; // HistogramBounds and subsequent fields are skipped.
            }
            this.histogramBoundsEncoder.init(state, columns.addSubColumn());
            if (this.fieldCount <= 6) {
                return; // AggregationTemporality and subsequent fields are skipped.
            }
            this.aggregationTemporalityEncoder.init(this.limiter, columns.addSubColumn());
            if (this.fieldCount <= 7) {
                return; // Monotonic and subsequent fields are skipped.
            }
            this.monotonicEncoder.init(this.limiter, columns.addSubColumn());
        } finally {
            state.MetricEncoder = null;
        }
    }

    public void reset() {
        // Since we are resetting the state of encoder make sure the next encode()
        // call forcedly writes all fields and does not attempt to skip.
        this.forceModifiedFields = true;
        this.nameEncoder.reset();
        this.descriptionEncoder.reset();
        this.unitEncoder.reset();
        this.type_Encoder.reset();
        this.metadataEncoder.reset();
        this.histogramBoundsEncoder.reset();
        this.aggregationTemporalityEncoder.reset();
        this.monotonicEncoder.reset();
    }

    // encode encodes val into buf
    public void encode(Metric val) throws IOException {
        int oldLen = this.buf.bitCount();

        
        // Check if the Metric exists in the dictionary.
        MetricEncoderDict.Entry entry = this.dict.get(val);
        if (entry != null) {
            // The Metric exists, we will reference it.
            // Indicate a RefNum follows.
            this.buf.writeBit(0);
            // Encode refNum.
            this.buf.writeUvarintCompact(entry.refNum);
            // Account written bits in the limiter.
            int newLen = this.buf.bitCount();
            this.limiter.addFrameBits(newLen - oldLen);
            // Mark all fields non-modified recursively so that next encode() correctly
            // encodes only fields that change after this.
            val.markUnmodifiedRecursively();
            return;
        }

        // The Metric does not exist in the dictionary. Add it to the dictionary.
        Metric valInDict = val.clone();
        entry = new MetricEncoderDict.Entry(this.dict.size(), valInDict);
        this.dict.set(valInDict, entry);
        this.limiter.addDictElemSize(valInDict.byteSize());
        // Indicate that an encoded Metric follows.
        this.buf.writeBit(1); // TODO: optimize and merge writeBit with the following writeBits.
        

        // Mask that describes what fields are encoded. Start with all modified fields.
        long fieldMask = val.modifiedFields.mask;
        // If forceModifiedFields we need to set to 1 all bits so that we
        // force writing of all fields.
        if (this.forceModifiedFields) {
            fieldMask =
                Metric.fieldModifiedName | 
                Metric.fieldModifiedDescription | 
                Metric.fieldModifiedUnit | 
                Metric.fieldModifiedType | 
                Metric.fieldModifiedMetadata | 
                Metric.fieldModifiedHistogramBounds | 
                Metric.fieldModifiedAggregationTemporality | 
                Metric.fieldModifiedMonotonic | 0L;
        }

        // Only write fields that we want to write. See init() for keepFieldMask.
        fieldMask &= this.keepFieldMask;

        // Write bits to indicate which fields follow.
        this.buf.writeBits(fieldMask, this.fieldCount);
        
        // Encode modified, present fields.
        
        if ((fieldMask & Metric.fieldModifiedName) != 0) {
            // Encode Name
            this.nameEncoder.encode(val.name);
        }
        
        if ((fieldMask & Metric.fieldModifiedDescription) != 0) {
            // Encode Description
            this.descriptionEncoder.encode(val.description);
        }
        
        if ((fieldMask & Metric.fieldModifiedUnit) != 0) {
            // Encode Unit
            this.unitEncoder.encode(val.unit);
        }
        
        if ((fieldMask & Metric.fieldModifiedType) != 0) {
            // Encode Type
            this.type_Encoder.encode(val.type_);
        }
        
        if ((fieldMask & Metric.fieldModifiedMetadata) != 0) {
            // Encode Metadata
            this.metadataEncoder.encode(val.metadata);
        }
        
        if ((fieldMask & Metric.fieldModifiedHistogramBounds) != 0) {
            // Encode HistogramBounds
            this.histogramBoundsEncoder.encode(val.histogramBounds);
        }
        
        if ((fieldMask & Metric.fieldModifiedAggregationTemporality) != 0) {
            // Encode AggregationTemporality
            this.aggregationTemporalityEncoder.encode(val.aggregationTemporality);
        }
        
        if ((fieldMask & Metric.fieldModifiedMonotonic) != 0) {
            // Encode Monotonic
            this.monotonicEncoder.encode(val.monotonic);
        }
        
        // Account written bits in the limiter.
        int newLen = this.buf.bitCount();
        this.limiter.addFrameBits(newLen - oldLen);

        // Mark all fields non-modified so that next encode() correctly
        // encodes only fields that change after this.
        val.modifiedFields.mask = 0;
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        
        if (this.fieldCount <= 0) {
            return; // Name and subsequent fields are skipped.
        }
        this.nameEncoder.collectColumns(columnSet.at(0));
        if (this.fieldCount <= 1) {
            return; // Description and subsequent fields are skipped.
        }
        this.descriptionEncoder.collectColumns(columnSet.at(1));
        if (this.fieldCount <= 2) {
            return; // Unit and subsequent fields are skipped.
        }
        this.unitEncoder.collectColumns(columnSet.at(2));
        if (this.fieldCount <= 3) {
            return; // Type and subsequent fields are skipped.
        }
        this.type_Encoder.collectColumns(columnSet.at(3));
        if (this.fieldCount <= 4) {
            return; // Metadata and subsequent fields are skipped.
        }
        this.metadataEncoder.collectColumns(columnSet.at(4));
        if (this.fieldCount <= 5) {
            return; // HistogramBounds and subsequent fields are skipped.
        }
        this.histogramBoundsEncoder.collectColumns(columnSet.at(5));
        if (this.fieldCount <= 6) {
            return; // AggregationTemporality and subsequent fields are skipped.
        }
        this.aggregationTemporalityEncoder.collectColumns(columnSet.at(6));
        if (this.fieldCount <= 7) {
            return; // Monotonic and subsequent fields are skipped.
        }
        this.monotonicEncoder.collectColumns(columnSet.at(7));
    }
}

