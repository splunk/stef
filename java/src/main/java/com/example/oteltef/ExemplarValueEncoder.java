// Code generated by stefgen. DO NOT EDIT.
// ExemplarValueEncoder implements encoding of ExemplarValue
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class ExemplarValueEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;
    private ExemplarValue.Type prevType;
    private int fieldCount;

    
    private Int64Encoder int64Encoder = new Int64Encoder();
    private Float64Encoder float64Encoder = new Float64Encoder();
    

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        state.ExemplarValueEncoder = this;
        prevType = ExemplarValue.Type.TypeNone;
        this.limiter = state.getLimiter();

        if (state.getOverrideSchema() != null) {
            int fieldCount = state.getOverrideSchema().getFieldCount("ExemplarValue");
            this.fieldCount = fieldCount;
        } else {
            this.fieldCount = 2;
        }

        
        if (this.fieldCount <= 0) {
            return; // Int64 and subsequent fields are skipped.
        }
        int64Encoder.init(limiter, columns.addSubColumn());
        if (this.fieldCount <= 1) {
            return; // Float64 and subsequent fields are skipped.
        }
        float64Encoder.init(limiter, columns.addSubColumn());
    }

    public void reset() {
        prevType = ExemplarValue.Type.TypeNone;
        this.int64Encoder.reset();
        this.float64Encoder.reset();
    }

    // Encode encodes val into buf
    public void encode(ExemplarValue val) throws IOException {
        int oldLen = buf.bitCount();

        ExemplarValue.Type typ = val.typ;
        if (typ.getValue() > fieldCount) {
            // The current field type is not supported in target schema. Encode the type as None.
            typ = ExemplarValue.Type.TypeNone;
        }

        // Compute type delta. 0 means the type is the same as the last time.
        int typDelta = typ.getValue() - prevType.getValue();
        prevType = typ;
        buf.writeVarintCompact(typDelta);

        // Account written bits in the limiter.
        int newLen = buf.bitCount();
        limiter.addFrameBits(newLen-oldLen);

        // Encode currently selected field.
        switch (typ) {
        case TypeInt64:
            // Encode Int64
            int64Encoder.encode(val.int64);
            break;
        case TypeFloat64:
            // Encode Float64
            float64Encoder.encode(val.float64);
            break;
        }
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        
        if (this.fieldCount <= 0) {
            return; // Int64 and subsequent fields are skipped.
        }
        this.int64Encoder.collectColumns(columnSet.at(0));
        if (this.fieldCount <= 1) {
            return; // Float64 and subsequent fields are skipped.
        }
        this.float64Encoder.collectColumns(columnSet.at(1));
    }
}

