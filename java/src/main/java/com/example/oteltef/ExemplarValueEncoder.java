// Code generated by stefc. DO NOT EDIT.
// ExemplarValueEncoder implements encoding of ExemplarValue
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class ExemplarValueEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;
    // fieldCount is the number of fields, i.e. the number of types in this oneof.
    private int fieldCount;
    // Number of bits needed to encode the type (including None type).
    private int typeBitCount;

    // Field encoders.
    
    private Int64DeltaDeltaEncoder int64Encoder;
    private boolean isInt64Recursive = false; // Indicates Int64 field's type is recursive.
    private Float64Encoder float64Encoder;
    private boolean isFloat64Recursive = false; // Indicates Float64 field's type is recursive.
    

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.ExemplarValueEncoder != null) {
            throw new IllegalStateException("cannot initialize ExemplarValueEncoder: already initialized");
        }
        state.ExemplarValueEncoder = this;

        try {
            this.limiter = state.getLimiter();

            this.fieldCount = state.getStructFieldCounts().getExemplarValueFieldCount();
            this.typeBitCount = Integer.SIZE - Integer.numberOfLeadingZeros(this.fieldCount+1);
            
            // Init encoder for Int64 field.
            if (this.fieldCount <= 0) {
                return; // Int64 and subsequent fields are skipped.
            }
            int64Encoder = new Int64DeltaDeltaEncoder();
            int64Encoder.init(this.limiter, columns.addSubColumn());
            // Init encoder for Float64 field.
            if (this.fieldCount <= 1) {
                return; // Float64 and subsequent fields are skipped.
            }
            float64Encoder = new Float64Encoder();
            float64Encoder.init(this.limiter, columns.addSubColumn());
        } finally {
            state.ExemplarValueEncoder = null;
        }
    }

    public void reset() {
        
        if (fieldCount <= 0) {
            return; // Int64 and all subsequent fields are skipped.
        }
        int64Encoder.reset();
        if (fieldCount <= 1) {
            return; // Float64 and all subsequent fields are skipped.
        }
        float64Encoder.reset();
    }

    // Encode encodes val into buf
    public void encode(ExemplarValue val) throws IOException {
        ExemplarValue.Type typ = val.typ;
        if (typ.getValue() > fieldCount) {
            // The current field type is not supported in target schema. Encode the type as None.
            typ = ExemplarValue.Type.TypeNone;
        }

        // Compute type delta. 0 means the type is the same as the last time.
        buf.writeBits(typ.getValue(), typeBitCount);

        // Account written bits in the limiter.
        limiter.addFrameBits(typeBitCount);

        // Encode currently selected field.
        switch (typ) {
        case TypeInt64:
            // Encode Int64
            int64Encoder.encode(val.int64);
            break;
        case TypeFloat64:
            // Encode Float64
            float64Encoder.encode(val.float64);
            break;
        }
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        int colIdx = 0;
        
        // Collect Int64 field.
        if (this.fieldCount <= 0) {
            return; // Int64 and subsequent fields are skipped.
        }
        
        int64Encoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
        // Collect Float64 field.
        if (this.fieldCount <= 1) {
            return; // Float64 and subsequent fields are skipped.
        }
        
        float64Encoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
    }
}
