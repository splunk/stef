// Code generated by stefgen. DO NOT EDIT.
// LinkDecoder implements decoding of Link
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class LinkDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private Link lastVal;
    private int fieldCount;

    
    private BytesDecoder traceIDDecoder = new BytesDecoder();
    private BytesDecoder spanIDDecoder = new BytesDecoder();
    private StringDecoder traceStateDecoder = new StringDecoder();
    private Uint64Decoder flagsDecoder = new Uint64Decoder();
    private AttributesDecoder attributesDecoder = new AttributesDecoder();
    private Uint64Decoder droppedAttributesCountDecoder = new Uint64Decoder();
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        state.LinkDecoder = this;
        if (state.getOverrideSchema() != null) {
            int fieldCount = state.getOverrideSchema().getFieldCount("Link");
            fieldCount = fieldCount;
        } else {
            fieldCount = 6;
        }
        column = columns.getColumn();
        
        lastVal = new Link(null, 0);
        
        if (this.fieldCount <= 0) {
            return; // TraceID and subsequent fields are skipped.
        }
        traceIDDecoder.init(null, columns.addSubColumn());
        if (this.fieldCount <= 1) {
            return; // SpanID and subsequent fields are skipped.
        }
        spanIDDecoder.init(null, columns.addSubColumn());
        if (this.fieldCount <= 2) {
            return; // TraceState and subsequent fields are skipped.
        }
        traceStateDecoder.init(null, columns.addSubColumn());
        if (this.fieldCount <= 3) {
            return; // Flags and subsequent fields are skipped.
        }
        flagsDecoder.init(columns.addSubColumn());
        if (this.fieldCount <= 4) {
            return; // Attributes and subsequent fields are skipped.
        }
        attributesDecoder.init(state, columns.addSubColumn());
        if (this.fieldCount <= 5) {
            return; // DroppedAttributesCount and subsequent fields are skipped.
        }
        droppedAttributesCountDecoder.init(columns.addSubColumn());
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // TraceID and subsequent fields are skipped.
        }
        this.traceIDDecoder.continueDecoding();
        if (this.fieldCount <= 1) {
            return; // SpanID and subsequent fields are skipped.
        }
        this.spanIDDecoder.continueDecoding();
        if (this.fieldCount <= 2) {
            return; // TraceState and subsequent fields are skipped.
        }
        this.traceStateDecoder.continueDecoding();
        if (this.fieldCount <= 3) {
            return; // Flags and subsequent fields are skipped.
        }
        this.flagsDecoder.continueDecoding();
        if (this.fieldCount <= 4) {
            return; // Attributes and subsequent fields are skipped.
        }
        this.attributesDecoder.continueDecoding();
        if (this.fieldCount <= 5) {
            return; // DroppedAttributesCount and subsequent fields are skipped.
        }
        this.droppedAttributesCountDecoder.continueDecoding();
    }

    public void reset() {
        this.traceIDDecoder.reset();
        this.spanIDDecoder.reset();
        this.traceStateDecoder.reset();
        this.flagsDecoder.reset();
        this.attributesDecoder.reset();
        this.droppedAttributesCountDecoder.reset();
    }

    public Link decode(Link dstPtr) throws IOException {
        Link val = dstPtr;
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        
        
        if ((val.modifiedFields.mask & Link.fieldModifiedTraceID) != 0) {
            // Field is changed and is present, decode it.
            val.traceID = traceIDDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Link.fieldModifiedSpanID) != 0) {
            // Field is changed and is present, decode it.
            val.spanID = spanIDDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Link.fieldModifiedTraceState) != 0) {
            // Field is changed and is present, decode it.
            val.traceState = traceStateDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Link.fieldModifiedFlags) != 0) {
            // Field is changed and is present, decode it.
            val.flags = flagsDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Link.fieldModifiedAttributes) != 0) {
            // Field is changed and is present, decode it.
            val.attributes = attributesDecoder.decode(val.attributes);
        }
        
        if ((val.modifiedFields.mask & Link.fieldModifiedDroppedAttributesCount) != 0) {
            // Field is changed and is present, decode it.
            val.droppedAttributesCount = droppedAttributesCountDecoder.decode();
        }
        
        
        return val;
    }
}

