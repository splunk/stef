// Code generated by stefc. DO NOT EDIT.
// LinkDecoder implements decoding of Link
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class LinkDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private int fieldCount;

    
    private BytesDecoder traceIDDecoder;
    private boolean isTraceIDRecursive = false; // Indicates TraceID field's type is recursive.
    private BytesDecoder spanIDDecoder;
    private boolean isSpanIDRecursive = false; // Indicates SpanID field's type is recursive.
    private StringDecoder traceStateDecoder;
    private boolean isTraceStateRecursive = false; // Indicates TraceState field's type is recursive.
    private Uint64DeltaDecoder flagsDecoder;
    private boolean isFlagsRecursive = false; // Indicates Flags field's type is recursive.
    private AttributesDecoder attributesDecoder;
    private boolean isAttributesRecursive = false; // Indicates Attributes field's type is recursive.
    private Uint64DeltaDecoder droppedAttributesCountDecoder;
    private boolean isDroppedAttributesCountRecursive = false; // Indicates DroppedAttributesCount field's type is recursive.
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.LinkDecoder != null) {
            throw new IllegalStateException("cannot initialize LinkDecoder: already initialized");
        }
        state.LinkDecoder = this;

        try {
            fieldCount = state.getStructFieldCounts().getLinkFieldCount();

            column = columns.getColumn();
            
            if (this.fieldCount <= 0) {
                return; // TraceID and subsequent fields are skipped.
            }
            traceIDDecoder = new BytesDecoder();
            traceIDDecoder.init(columns.addSubColumn());
            if (this.fieldCount <= 1) {
                return; // SpanID and subsequent fields are skipped.
            }
            spanIDDecoder = new BytesDecoder();
            spanIDDecoder.init(columns.addSubColumn());
            if (this.fieldCount <= 2) {
                return; // TraceState and subsequent fields are skipped.
            }
            traceStateDecoder = new StringDecoder();
            traceStateDecoder.init(columns.addSubColumn());
            if (this.fieldCount <= 3) {
                return; // Flags and subsequent fields are skipped.
            }
            flagsDecoder = new Uint64DeltaDecoder();
            flagsDecoder.init(columns.addSubColumn());
            if (this.fieldCount <= 4) {
                return; // Attributes and subsequent fields are skipped.
            }
            if (state.AttributesDecoder != null) {
                // Recursion detected, use the existing decoder.
                attributesDecoder = state.AttributesDecoder;
                isAttributesRecursive = true; // Mark that we are using a recursive decoder.
            } else {
                attributesDecoder = new AttributesDecoder();
                attributesDecoder.init(state, columns.addSubColumn());
            }
            if (this.fieldCount <= 5) {
                return; // DroppedAttributesCount and subsequent fields are skipped.
            }
            droppedAttributesCountDecoder = new Uint64DeltaDecoder();
            droppedAttributesCountDecoder.init(columns.addSubColumn());
        } finally {
            state.LinkDecoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // TraceID and subsequent fields are skipped.
        }
        traceIDDecoder.continueDecoding();
        if (this.fieldCount <= 1) {
            return; // SpanID and subsequent fields are skipped.
        }
        spanIDDecoder.continueDecoding();
        if (this.fieldCount <= 2) {
            return; // TraceState and subsequent fields are skipped.
        }
        traceStateDecoder.continueDecoding();
        if (this.fieldCount <= 3) {
            return; // Flags and subsequent fields are skipped.
        }
        flagsDecoder.continueDecoding();
        if (this.fieldCount <= 4) {
            return; // Attributes and subsequent fields are skipped.
        }
        
        if (!isAttributesRecursive) {
            attributesDecoder.continueDecoding();
        }
        
        if (this.fieldCount <= 5) {
            return; // DroppedAttributesCount and subsequent fields are skipped.
        }
        droppedAttributesCountDecoder.continueDecoding();
    }

    public void reset() {
        
        if (fieldCount <= 0) {
            // TraceID and all subsequent fields are skipped.
            return;
        }
        traceIDDecoder.reset();
        if (fieldCount <= 1) {
            // SpanID and all subsequent fields are skipped.
            return;
        }
        spanIDDecoder.reset();
        if (fieldCount <= 2) {
            // TraceState and all subsequent fields are skipped.
            return;
        }
        traceStateDecoder.reset();
        if (fieldCount <= 3) {
            // Flags and all subsequent fields are skipped.
            return;
        }
        flagsDecoder.reset();
        if (fieldCount <= 4) {
            // Attributes and all subsequent fields are skipped.
            return;
        }
        if (!isAttributesRecursive) {
            attributesDecoder.reset();
        }
        if (fieldCount <= 5) {
            // DroppedAttributesCount and all subsequent fields are skipped.
            return;
        }
        droppedAttributesCountDecoder.reset();
    }

    public Link decode(Link dstPtr) throws IOException {
        Link val = dstPtr;
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        
        
        if ((val.modifiedFields.mask & Link.fieldModifiedTraceID) != 0) {
            // Field is changed and is present, decode it.
            val.traceID = traceIDDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Link.fieldModifiedSpanID) != 0) {
            // Field is changed and is present, decode it.
            val.spanID = spanIDDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Link.fieldModifiedTraceState) != 0) {
            // Field is changed and is present, decode it.
            val.traceState = traceStateDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Link.fieldModifiedFlags) != 0) {
            // Field is changed and is present, decode it.
            val.flags = flagsDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Link.fieldModifiedAttributes) != 0) {
            // Field is changed and is present, decode it.
            if (val.attributes == null) {
                val.attributes = new Attributes(val.modifiedFields, Link.fieldModifiedAttributes);
            }
            val.attributes = attributesDecoder.decode(val.attributes);
        }
        
        if ((val.modifiedFields.mask & Link.fieldModifiedDroppedAttributesCount) != 0) {
            // Field is changed and is present, decode it.
            val.droppedAttributesCount = droppedAttributesCountDecoder.decode();
        }
        
        
        return val;
    }
}

