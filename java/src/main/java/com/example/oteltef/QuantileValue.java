// Code generated by stefc. DO NOT EDIT.
// QuantileValue Java class generated from template
package com.example.oteltef;

import net.stef.BytesValue;
import net.stef.StringValue;
import net.stef.Types;
import net.stef.schema.WireSchema;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.*;

public class QuantileValue {
    // Field values.
    
    double quantile;
    double value;

    // modifiedFields keeps track of which fields are modified.
    final ModifiedFields modifiedFields = new ModifiedFields();

    public static final String StructName = "QuantileValue";

    // Bitmasks for "modified" flags for each field.
    
    public static final long fieldModifiedQuantile = 1 << 0;
    public static final long fieldModifiedValue = 1 << 1;

    

    public QuantileValue() {
        init(null, 0);
    }

    QuantileValue(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        init(parentModifiedFields, parentModifiedBit);
    }

    private void init(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        modifiedFields.parent = parentModifiedFields;
        modifiedFields.parentBit = parentModifiedBit;
        
        quantile = 0.0;
        value = 0.0;
    }

    void reset() {
        
        quantile = 0.0;
        value = 0.0;
    }

    
    public double getQuantile() {
        return quantile;
    }

    // setQuantile sets the value of Quantile field.
    public void setQuantile(double v) {
        if (!Types.Float64Equal(this.quantile, v)) {
            this.quantile = v;
            this.markQuantileModified();
        }
    }

    private void markQuantileModified() {
        this.modifiedFields.markModified(fieldModifiedQuantile);
    }

    // isQuantileModified returns true if the value of Quantile field was modified since
    // QuantileValue was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isQuantileModified() {
        return (this.modifiedFields.mask & fieldModifiedQuantile) != 0;
    }
    
    public double getValue() {
        return value;
    }

    // setValue sets the value of Value field.
    public void setValue(double v) {
        if (!Types.Float64Equal(this.value, v)) {
            this.value = v;
            this.markValueModified();
        }
    }

    private void markValueModified() {
        this.modifiedFields.markModified(fieldModifiedValue);
    }

    // isValueModified returns true if the value of Value field was modified since
    // QuantileValue was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isValueModified() {
        return (this.modifiedFields.mask & fieldModifiedValue) != 0;
    }
    

    void markModifiedRecursively() {
        modifiedFields.mask =
            fieldModifiedQuantile | 
            fieldModifiedValue | 0;
    }

    void markUnmodifiedRecursively() {
        modifiedFields.mask = 0;
    }

    public QuantileValue clone() {
        QuantileValue cpy = new QuantileValue();
        cpy.quantile = this.quantile;
        cpy.value = this.value;
        return cpy;
    }

    // ByteSize returns approximate memory usage in bytes. Used to calculate memory used by dictionaries.
    int byteSize() {
        int size = 0; // TODO: calculate the size of this object.
        
        
        return size;
    }

    // Performs a deep copy from src to dst.
    public void copyFrom(QuantileValue src) {
        setQuantile(src.getQuantile());
        setValue(src.getValue());
    }

    // equals performs deep comparison and returns true if struct is equal to val.
    public boolean equals(QuantileValue right) {
        // Compare Quantile field.
        if (!Types.Float64Equal(this.quantile, right.quantile)) {
            return false;
        }
        // Compare Value field.
        if (!Types.Float64Equal(this.value, right.value)) {
            return false;
        }
        return true;
    }

    public static boolean equals(QuantileValue left, QuantileValue right) {
        return left.equals(right);
    }

    // compare performs deep comparison and returns an integer that
    // will be 0 if left == right, negative if left < right, positive if left > right.
    public static int compare(QuantileValue left, QuantileValue right) {
        if (left == null) {
            if (right == null) {
                return 0;
            }
            return -1;
        }
        if (right == null) {
            return 1;
        }
        int c;
        
        // Compare Quantile field.
        c = Types.Float64Compare(left.quantile, right.quantile);
        if (c != 0) {
            return c;
        }
        
        // Compare Value field.
        c = Types.Float64Compare(left.value, right.value);
        if (c != 0) {
            return c;
        }
        
        return 0;
    }

    // mutateRandom mutates fields in a random, deterministic manner using random as a deterministic generator.
    void mutateRandom(Random random) {
        final int fieldCount = Math.max(2,2); // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
        
        if (random.nextInt(fieldCount) == 0) {
            this.setQuantile(Types.Float64Random(random));
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.setValue(Types.Float64Random(random));
        }
        
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return equals((QuantileValue)o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            quantile,
            value
        );
    }

    
}
