// Code generated by stefgen. DO NOT EDIT.
// Envelope Java class generated from template
package com.example.oteltef;

import net.stef.StringValue;
import net.stef.Types;
import net.stef.schema.WireSchema;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.*;

public class Envelope {
    // Field values.
    
    EnvelopeAttributes attributes;

    // modifiedFields keeps track of which fields are modified.
    final ModifiedFields modifiedFields = new ModifiedFields();

    public static final String StructName = "Envelope";

    // Bitmasks for "modified" flags for each field.
    
    public static final long fieldModifiedAttributes = 1 << 0;

    

    public Envelope() {
        init(null, 0);
    }

    Envelope(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        init(parentModifiedFields, parentModifiedBit);
    }

    private void init(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        modifiedFields.parent = parentModifiedFields;
        modifiedFields.parentBit = parentModifiedBit;
        
        attributes = new EnvelopeAttributes(modifiedFields, fieldModifiedAttributes);
    }

    void reset() {
        
        attributes.reset();
    }

    
    public EnvelopeAttributes getAttributes() {
        return this.attributes;
    }

    private void markAttributesModified() {
        this.modifiedFields.markModified(fieldModifiedAttributes);
    }

    // isAttributesModified returns true if the value of Attributes field was modified since
    // Envelope was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isAttributesModified() {
        return (this.modifiedFields.mask & fieldModifiedAttributes) != 0;
    }
    

    void markModifiedRecursively() {
        attributes.markModifiedRecursively();
        modifiedFields.mask =
            fieldModifiedAttributes | 0;
    }

    void markUnmodifiedRecursively() {
        if (isAttributesModified()) {
            attributes.markUnmodifiedRecursively();
        }
        modifiedFields.mask = 0;
    }

    public Envelope clone() {
        Envelope cpy = new Envelope();
        cpy.attributes = this.attributes.clone();
        return cpy;
    }

    // ByteSize returns approximate memory usage in bytes. Used to calculate memory used by dictionaries.
    int byteSize() {
        int size = 0; // TODO: calculate the size of this object.
        size += this.attributes.byteSize();
        return size;
    }

    // Performs a deep copy from src to dst.
    public void copyFrom(Envelope src) {
        attributes.copyFrom(src.attributes);
    }

    // equals performs deep comparison and returns true if struct is equal to val.
    public boolean equals(Envelope right) {
        // Compare Attributes field.
        if (!this.attributes.equals(right.attributes)) {
            return false;
        }
        return true;
    }

    public static boolean equals(Envelope left, Envelope right) {
        return left.equals(right);
    }

    // compare performs deep comparison and returns an integer that
    // will be 0 if left == right, negative if left < right, positive if left > right.
    public static int compare(Envelope left, Envelope right) {
        if (left == null) {
            if (right == null) {
                return 0;
            }
            return -1;
        }
        if (right == null) {
            return 1;
        }
        int c;
        
        // Compare Attributes field.
        c = EnvelopeAttributes.compare(left.attributes, right.attributes);
        if (c != 0) {
            return c;
        }
        
        return 0;
    }

    // mutateRandom mutates fields in a random, deterministic manner using random as a deterministic generator.
    void mutateRandom(Random random) {
        final int fieldCount = Math.max(1,2); // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
        
        if (random.nextInt(fieldCount) == 0) {
            this.attributes.mutateRandom(random);
        }
        
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return equals((Envelope)o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            attributes
        );
    }

    
}
