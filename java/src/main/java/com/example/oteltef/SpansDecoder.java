// Code generated by stefgen. DO NOT EDIT.
// SpansDecoder implements decoding of Spans
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class SpansDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private Spans lastVal;
    private int fieldCount;

    
    private EnvelopeDecoder envelopeDecoder = new EnvelopeDecoder();
    private ResourceDecoder resourceDecoder = new ResourceDecoder();
    private ScopeDecoder scopeDecoder = new ScopeDecoder();
    private SpanDecoder spanDecoder = new SpanDecoder();
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        state.SpansDecoder = this;
        if (state.getOverrideSchema() != null) {
            int fieldCount = state.getOverrideSchema().getFieldCount("Spans");
            fieldCount = fieldCount;
        } else {
            fieldCount = 4;
        }
        column = columns.getColumn();
        
        lastVal = new Spans();
        
        if (this.fieldCount <= 0) {
            return; // Envelope and subsequent fields are skipped.
        }
        envelopeDecoder.init(state, columns.addSubColumn());
        if (this.fieldCount <= 1) {
            return; // Resource and subsequent fields are skipped.
        }
        resourceDecoder.init(state, columns.addSubColumn());
        if (this.fieldCount <= 2) {
            return; // Scope and subsequent fields are skipped.
        }
        scopeDecoder.init(state, columns.addSubColumn());
        if (this.fieldCount <= 3) {
            return; // Span and subsequent fields are skipped.
        }
        spanDecoder.init(state, columns.addSubColumn());
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // Envelope and subsequent fields are skipped.
        }
        this.envelopeDecoder.continueDecoding();
        if (this.fieldCount <= 1) {
            return; // Resource and subsequent fields are skipped.
        }
        this.resourceDecoder.continueDecoding();
        if (this.fieldCount <= 2) {
            return; // Scope and subsequent fields are skipped.
        }
        this.scopeDecoder.continueDecoding();
        if (this.fieldCount <= 3) {
            return; // Span and subsequent fields are skipped.
        }
        this.spanDecoder.continueDecoding();
    }

    public void reset() {
        this.envelopeDecoder.reset();
        this.resourceDecoder.reset();
        this.scopeDecoder.reset();
        this.spanDecoder.reset();
    }

    public Spans decode(Spans dstPtr) throws IOException {
        Spans val = dstPtr;
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        
        
        if ((val.modifiedFields.mask & Spans.fieldModifiedEnvelope) != 0) {
            // Field is changed and is present, decode it.
            val.envelope = envelopeDecoder.decode(val.envelope);
        }
        
        if ((val.modifiedFields.mask & Spans.fieldModifiedResource) != 0) {
            // Field is changed and is present, decode it.
            val.resource = resourceDecoder.decode(val.resource);
        }
        
        if ((val.modifiedFields.mask & Spans.fieldModifiedScope) != 0) {
            // Field is changed and is present, decode it.
            val.scope = scopeDecoder.decode(val.scope);
        }
        
        if ((val.modifiedFields.mask & Spans.fieldModifiedSpan) != 0) {
            // Field is changed and is present, decode it.
            val.span = spanDecoder.decode(val.span);
        }
        
        
        return val;
    }
}

