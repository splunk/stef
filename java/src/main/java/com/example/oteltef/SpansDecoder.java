// Code generated by stefgen. DO NOT EDIT.
// SpansDecoder implements decoding of Spans
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class SpansDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private Spans lastVal;
    private int fieldCount;

    
    private EnvelopeDecoder envelopeDecoder;
    private boolean isEnvelopeRecursive = false; // Indicates Envelope field's type is recursive.
    private ResourceDecoder resourceDecoder;
    private boolean isResourceRecursive = false; // Indicates Resource field's type is recursive.
    private ScopeDecoder scopeDecoder;
    private boolean isScopeRecursive = false; // Indicates Scope field's type is recursive.
    private SpanDecoder spanDecoder;
    private boolean isSpanRecursive = false; // Indicates Span field's type is recursive.
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.SpansDecoder != null) {
            throw new IllegalStateException("cannot initialize SpansDecoder: already initialized");
        }
        state.SpansDecoder = this;

        try {
            fieldCount = state.getStructFieldCounts().getSpansFieldCount();

            column = columns.getColumn();
            
            lastVal = new Spans();
            
            if (this.fieldCount <= 0) {
                return; // Envelope and subsequent fields are skipped.
            }
            if (state.EnvelopeDecoder != null) {
                // Recursion detected, use the existing decoder.
                envelopeDecoder = state.EnvelopeDecoder;
                isEnvelopeRecursive = true; // Mark that we are using a recursive decoder.
            } else {
                envelopeDecoder = new EnvelopeDecoder();
                envelopeDecoder.init(state, columns.addSubColumn());
            }
            if (this.fieldCount <= 1) {
                return; // Resource and subsequent fields are skipped.
            }
            if (state.ResourceDecoder != null) {
                // Recursion detected, use the existing decoder.
                resourceDecoder = state.ResourceDecoder;
                isResourceRecursive = true; // Mark that we are using a recursive decoder.
            } else {
                resourceDecoder = new ResourceDecoder();
                resourceDecoder.init(state, columns.addSubColumn());
            }
            if (this.fieldCount <= 2) {
                return; // Scope and subsequent fields are skipped.
            }
            if (state.ScopeDecoder != null) {
                // Recursion detected, use the existing decoder.
                scopeDecoder = state.ScopeDecoder;
                isScopeRecursive = true; // Mark that we are using a recursive decoder.
            } else {
                scopeDecoder = new ScopeDecoder();
                scopeDecoder.init(state, columns.addSubColumn());
            }
            if (this.fieldCount <= 3) {
                return; // Span and subsequent fields are skipped.
            }
            if (state.SpanDecoder != null) {
                // Recursion detected, use the existing decoder.
                spanDecoder = state.SpanDecoder;
                isSpanRecursive = true; // Mark that we are using a recursive decoder.
            } else {
                spanDecoder = new SpanDecoder();
                spanDecoder.init(state, columns.addSubColumn());
            }
        } finally {
            state.SpansDecoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // Envelope and subsequent fields are skipped.
        }
        
        if (!isEnvelopeRecursive) {
            envelopeDecoder.continueDecoding();
        }
        
        if (this.fieldCount <= 1) {
            return; // Resource and subsequent fields are skipped.
        }
        
        if (!isResourceRecursive) {
            resourceDecoder.continueDecoding();
        }
        
        if (this.fieldCount <= 2) {
            return; // Scope and subsequent fields are skipped.
        }
        
        if (!isScopeRecursive) {
            scopeDecoder.continueDecoding();
        }
        
        if (this.fieldCount <= 3) {
            return; // Span and subsequent fields are skipped.
        }
        
        if (!isSpanRecursive) {
            spanDecoder.continueDecoding();
        }
        
    }

    public void reset() {
        
        if (fieldCount <= 0) {
            // Envelope and all subsequent fields are skipped.
            return;
        }
        if (!isEnvelopeRecursive) {
            envelopeDecoder.reset();
        }
        if (fieldCount <= 1) {
            // Resource and all subsequent fields are skipped.
            return;
        }
        if (!isResourceRecursive) {
            resourceDecoder.reset();
        }
        if (fieldCount <= 2) {
            // Scope and all subsequent fields are skipped.
            return;
        }
        if (!isScopeRecursive) {
            scopeDecoder.reset();
        }
        if (fieldCount <= 3) {
            // Span and all subsequent fields are skipped.
            return;
        }
        if (!isSpanRecursive) {
            spanDecoder.reset();
        }
    }

    public Spans decode(Spans dstPtr) throws IOException {
        Spans val = dstPtr;
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        
        
        if ((val.modifiedFields.mask & Spans.fieldModifiedEnvelope) != 0) {
            // Field is changed and is present, decode it.
            if (val.envelope == null) {
                val.envelope = new Envelope(val.modifiedFields, Spans.fieldModifiedEnvelope);
            }
            val.envelope = envelopeDecoder.decode(val.envelope);
        }
        
        if ((val.modifiedFields.mask & Spans.fieldModifiedResource) != 0) {
            // Field is changed and is present, decode it.
            if (val.resource == null) {
                val.resource = new Resource(val.modifiedFields, Spans.fieldModifiedResource);
            }
            val.resource = resourceDecoder.decode(val.resource);
        }
        
        if ((val.modifiedFields.mask & Spans.fieldModifiedScope) != 0) {
            // Field is changed and is present, decode it.
            if (val.scope == null) {
                val.scope = new Scope(val.modifiedFields, Spans.fieldModifiedScope);
            }
            val.scope = scopeDecoder.decode(val.scope);
        }
        
        if ((val.modifiedFields.mask & Spans.fieldModifiedSpan) != 0) {
            // Field is changed and is present, decode it.
            if (val.span == null) {
                val.span = new Span(val.modifiedFields, Spans.fieldModifiedSpan);
            }
            val.span = spanDecoder.decode(val.span);
        }
        
        
        return val;
    }
}

