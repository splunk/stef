// Code generated by stefgen. DO NOT EDIT.
package com.example.oteltef;

import net.stef.schema.WireSchema;
import net.stef.schema.WireSchemaIter;

import java.io.IOException;

// StructFieldCounts is used to keep track of the number of fields in each struct
// of an associated schema and to iterate over the fields.
// Field counts will be fetched from the iterator if the struct is encountered
// for the first time and then remembered for subsequent calls (for the case when
// the same struct is used multiple times in the schema).
class CommonFieldCounts {
    private int countAnyValue; // Number of fields in AnyValue struct.
    private int countEnvelope; // Number of fields in Envelope struct.
    private int countEvent; // Number of fields in Event struct.
    private int countExemplar; // Number of fields in Exemplar struct.
    private int countExemplarValue; // Number of fields in ExemplarValue struct.
    private int countExpHistogramBuckets; // Number of fields in ExpHistogramBuckets struct.
    private int countExpHistogramValue; // Number of fields in ExpHistogramValue struct.
    private int countHistogramValue; // Number of fields in HistogramValue struct.
    private int countLink; // Number of fields in Link struct.
    private int countMetric; // Number of fields in Metric struct.
    private int countMetrics; // Number of fields in Metrics struct.
    private int countPoint; // Number of fields in Point struct.
    private int countPointValue; // Number of fields in PointValue struct.
    private int countQuantileValue; // Number of fields in QuantileValue struct.
    private int countResource; // Number of fields in Resource struct.
    private int countScope; // Number of fields in Scope struct.
    private int countSpan; // Number of fields in Span struct.
    private int countSpanStatus; // Number of fields in SpanStatus struct.
    private int countSpans; // Number of fields in Spans struct.
    private int countSummaryValue; // Number of fields in SummaryValue struct.
    
    // OverrideSchemaIter is set if codec should perform a translation from specified schema.
    WireSchemaIter overrideSchemaIter;

    public void init(WireSchema overrideSchema) {
        if (overrideSchema != null) {
            overrideSchemaIter = new WireSchemaIter(overrideSchema);
        }

        // Initialize all struct field counts to -1, indicating that the field count
        // is not known.
        countAnyValue = -1;
        countEnvelope = -1;
        countEvent = -1;
        countExemplar = -1;
        countExemplarValue = -1;
        countExpHistogramBuckets = -1;
        countExpHistogramValue = -1;
        countHistogramValue = -1;
        countLink = -1;
        countMetric = -1;
        countMetrics = -1;
        countPoint = -1;
        countPointValue = -1;
        countQuantileValue = -1;
        countResource = -1;
        countScope = -1;
        countSpan = -1;
        countSpanStatus = -1;
        countSpans = -1;
        countSummaryValue = -1;
        
    }

    // Get the field count for a specific struct/oneof.
    // It is expected that the order in which this function is called matches
    // the order in which the WireSchemaIter iterates over the structs (see WireSchema).
    private int getFieldCount(int fieldCount, String fieldName, WireSchemaIter overrideSchemaIter, int defaultCount) throws IOException {
        if (fieldCount == -1) {
            // Field count is not known, we need to determine it.
            if (overrideSchemaIter != null) {
                // Get the field count from the override schema.
                fieldCount = overrideSchemaIter.nextFieldCount();
            } else {
                // Schema is not overridden. Use the compile-time struct field count.
                fieldCount = defaultCount;
            }
        } else {
            // Field count is already known, return it.
        }
        return fieldCount;
    }

    public int getAnyValueFieldCount() throws IOException {
        countAnyValue = getFieldCount(countAnyValue, "AnyValue", overrideSchemaIter, 7);
        return countAnyValue;
    }

    public int getEnvelopeFieldCount() throws IOException {
        countEnvelope = getFieldCount(countEnvelope, "Envelope", overrideSchemaIter, 1);
        return countEnvelope;
    }

    public int getEventFieldCount() throws IOException {
        countEvent = getFieldCount(countEvent, "Event", overrideSchemaIter, 4);
        return countEvent;
    }

    public int getExemplarFieldCount() throws IOException {
        countExemplar = getFieldCount(countExemplar, "Exemplar", overrideSchemaIter, 5);
        return countExemplar;
    }

    public int getExemplarValueFieldCount() throws IOException {
        countExemplarValue = getFieldCount(countExemplarValue, "ExemplarValue", overrideSchemaIter, 2);
        return countExemplarValue;
    }

    public int getExpHistogramBucketsFieldCount() throws IOException {
        countExpHistogramBuckets = getFieldCount(countExpHistogramBuckets, "ExpHistogramBuckets", overrideSchemaIter, 2);
        return countExpHistogramBuckets;
    }

    public int getExpHistogramValueFieldCount() throws IOException {
        countExpHistogramValue = getFieldCount(countExpHistogramValue, "ExpHistogramValue", overrideSchemaIter, 9);
        return countExpHistogramValue;
    }

    public int getHistogramValueFieldCount() throws IOException {
        countHistogramValue = getFieldCount(countHistogramValue, "HistogramValue", overrideSchemaIter, 5);
        return countHistogramValue;
    }

    public int getLinkFieldCount() throws IOException {
        countLink = getFieldCount(countLink, "Link", overrideSchemaIter, 6);
        return countLink;
    }

    public int getMetricFieldCount() throws IOException {
        countMetric = getFieldCount(countMetric, "Metric", overrideSchemaIter, 8);
        return countMetric;
    }

    public int getMetricsFieldCount() throws IOException {
        countMetrics = getFieldCount(countMetrics, "Metrics", overrideSchemaIter, 6);
        return countMetrics;
    }

    public int getPointFieldCount() throws IOException {
        countPoint = getFieldCount(countPoint, "Point", overrideSchemaIter, 4);
        return countPoint;
    }

    public int getPointValueFieldCount() throws IOException {
        countPointValue = getFieldCount(countPointValue, "PointValue", overrideSchemaIter, 5);
        return countPointValue;
    }

    public int getQuantileValueFieldCount() throws IOException {
        countQuantileValue = getFieldCount(countQuantileValue, "QuantileValue", overrideSchemaIter, 2);
        return countQuantileValue;
    }

    public int getResourceFieldCount() throws IOException {
        countResource = getFieldCount(countResource, "Resource", overrideSchemaIter, 3);
        return countResource;
    }

    public int getScopeFieldCount() throws IOException {
        countScope = getFieldCount(countScope, "Scope", overrideSchemaIter, 5);
        return countScope;
    }

    public int getSpanFieldCount() throws IOException {
        countSpan = getFieldCount(countSpan, "Span", overrideSchemaIter, 14);
        return countSpan;
    }

    public int getSpanStatusFieldCount() throws IOException {
        countSpanStatus = getFieldCount(countSpanStatus, "SpanStatus", overrideSchemaIter, 2);
        return countSpanStatus;
    }

    public int getSpansFieldCount() throws IOException {
        countSpans = getFieldCount(countSpans, "Spans", overrideSchemaIter, 4);
        return countSpans;
    }

    public int getSummaryValueFieldCount() throws IOException {
        countSummaryValue = getFieldCount(countSummaryValue, "SummaryValue", overrideSchemaIter, 3);
        return countSummaryValue;
    }

    
    public boolean allFetched() {
        return overrideSchemaIter == null || overrideSchemaIter.done();
    }
}