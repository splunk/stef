// Code generated by stefgen. DO NOT EDIT.
// SpansEncoder implements encoding of Spans
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class SpansEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;

    // forceModifiedFields is set to true if the next encoding operation
    // must write all fields, whether they are modified or not.
    // This is used after frame restarts so that the data can be decoded
    // from the frame start.
    private boolean forceModifiedFields;

    
    private EnvelopeEncoder envelopeEncoder = new EnvelopeEncoder();
    private ResourceEncoder resourceEncoder = new ResourceEncoder();
    private ScopeEncoder scopeEncoder = new ScopeEncoder();
    private SpanEncoder spanEncoder = new SpanEncoder();
    

    private long keepFieldMask;
    private int fieldCount;

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.SpansEncoder != null) {
            throw new IllegalStateException("cannot initialize SpansEncoder: already initialized");
        }
        state.SpansEncoder = this;

        try {
            this.limiter = state.getLimiter();

            if (state.getOverrideSchema() != null) {
                int fieldCount = state.getOverrideSchema().getFieldCount("Spans");
                this.fieldCount = fieldCount;
                this.keepFieldMask = ~((~0L) << this.fieldCount);
            } else {
                this.fieldCount = 4;
                this.keepFieldMask = ~0L;
            }

            
            if (this.fieldCount <= 0) {
                return; // Envelope and subsequent fields are skipped.
            }
            this.envelopeEncoder.init(state, columns.addSubColumn());
            if (this.fieldCount <= 1) {
                return; // Resource and subsequent fields are skipped.
            }
            this.resourceEncoder.init(state, columns.addSubColumn());
            if (this.fieldCount <= 2) {
                return; // Scope and subsequent fields are skipped.
            }
            this.scopeEncoder.init(state, columns.addSubColumn());
            if (this.fieldCount <= 3) {
                return; // Span and subsequent fields are skipped.
            }
            this.spanEncoder.init(state, columns.addSubColumn());
        } finally {
            state.SpansEncoder = null;
        }
    }

    public void reset() {
        // Since we are resetting the state of encoder make sure the next encode()
        // call forcedly writes all fields and does not attempt to skip.
        this.forceModifiedFields = true;
        this.envelopeEncoder.reset();
        this.resourceEncoder.reset();
        this.scopeEncoder.reset();
        this.spanEncoder.reset();
    }

    // encode encodes val into buf
    public void encode(Spans val) throws IOException {
        int oldLen = this.buf.bitCount();

        

        // Mask that describes what fields are encoded. Start with all modified fields.
        long fieldMask = val.modifiedFields.mask;
        // If forceModifiedFields we need to set to 1 all bits so that we
        // force writing of all fields.
        if (this.forceModifiedFields) {
            fieldMask =
                Spans.fieldModifiedEnvelope | 
                Spans.fieldModifiedResource | 
                Spans.fieldModifiedScope | 
                Spans.fieldModifiedSpan | 0L;
        }

        // Only write fields that we want to write. See init() for keepFieldMask.
        fieldMask &= this.keepFieldMask;

        // Write bits to indicate which fields follow.
        this.buf.writeBits(fieldMask, this.fieldCount);
        
        // Encode modified, present fields.
        
        if ((fieldMask & Spans.fieldModifiedEnvelope) != 0) {
            // Encode Envelope
            this.envelopeEncoder.encode(val.envelope);
        }
        
        if ((fieldMask & Spans.fieldModifiedResource) != 0) {
            // Encode Resource
            this.resourceEncoder.encode(val.resource);
        }
        
        if ((fieldMask & Spans.fieldModifiedScope) != 0) {
            // Encode Scope
            this.scopeEncoder.encode(val.scope);
        }
        
        if ((fieldMask & Spans.fieldModifiedSpan) != 0) {
            // Encode Span
            this.spanEncoder.encode(val.span);
        }
        
        // Account written bits in the limiter.
        int newLen = this.buf.bitCount();
        this.limiter.addFrameBits(newLen - oldLen);

        // Mark all fields non-modified so that next encode() correctly
        // encodes only fields that change after this.
        val.modifiedFields.mask = 0;
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        
        if (this.fieldCount <= 0) {
            return; // Envelope and subsequent fields are skipped.
        }
        this.envelopeEncoder.collectColumns(columnSet.at(0));
        if (this.fieldCount <= 1) {
            return; // Resource and subsequent fields are skipped.
        }
        this.resourceEncoder.collectColumns(columnSet.at(1));
        if (this.fieldCount <= 2) {
            return; // Scope and subsequent fields are skipped.
        }
        this.scopeEncoder.collectColumns(columnSet.at(2));
        if (this.fieldCount <= 3) {
            return; // Span and subsequent fields are skipped.
        }
        this.spanEncoder.collectColumns(columnSet.at(3));
    }
}

