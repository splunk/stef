// Code generated by stefgen. DO NOT EDIT.
// QuantileValueEncoder implements encoding of QuantileValue
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class QuantileValueEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;

    // forceModifiedFields is set to true if the next encoding operation
    // must write all fields, whether they are modified or not.
    // This is used after frame restarts so that the data can be decoded
    // from the frame start.
    private boolean forceModifiedFields;

    
    private Float64Encoder quantileEncoder;
    private boolean isQuantileRecursive = false; // Indicates Quantile field's type is recursive.
    private Float64Encoder valueEncoder;
    private boolean isValueRecursive = false; // Indicates Value field's type is recursive.
    

    private long keepFieldMask;
    private int fieldCount;

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.QuantileValueEncoder != null) {
            throw new IllegalStateException("cannot initialize QuantileValueEncoder: already initialized");
        }
        state.QuantileValueEncoder = this;

        try {
            this.limiter = state.getLimiter();

            this.fieldCount = state.getStructFieldCounts().getQuantileValueFieldCount();
            this.keepFieldMask = ~((~0L) << this.fieldCount);
            
            // Init encoder for Quantile field.
            if (this.fieldCount <= 0) {
                return; // Quantile and subsequent fields are skipped.
            }
            quantileEncoder = new Float64Encoder();
            quantileEncoder.init(limiter, columns.addSubColumn());
            // Init encoder for Value field.
            if (this.fieldCount <= 1) {
                return; // Value and subsequent fields are skipped.
            }
            valueEncoder = new Float64Encoder();
            valueEncoder.init(limiter, columns.addSubColumn());
        } finally {
            state.QuantileValueEncoder = null;
        }
    }

    public void reset() {
        // Since we are resetting the state of encoder make sure the next encode()
        // call forcefully writes all fields and does not attempt to skip.
        this.forceModifiedFields = true;
        
        if (fieldCount <= 0) {
            return; // Quantile and all subsequent fields are skipped.
        }
        quantileEncoder.reset();
        if (fieldCount <= 1) {
            return; // Value and all subsequent fields are skipped.
        }
        valueEncoder.reset();
    }

    // encode encodes val into buf
    public void encode(QuantileValue val) throws IOException {
        int oldLen = this.buf.bitCount();

        

        // Mask that describes what fields are encoded. Start with all modified fields.
        long fieldMask = val.modifiedFields.mask;
        // If forceModifiedFields we need to set to 1 all bits so that we
        // force writing of all fields.
        if (this.forceModifiedFields) {
            fieldMask =
                QuantileValue.fieldModifiedQuantile | 
                QuantileValue.fieldModifiedValue | 0L;
        }

        // Only write fields that we want to write. See init() for keepFieldMask.
        fieldMask &= this.keepFieldMask;

        // Write bits to indicate which fields follow.
        this.buf.writeBits(fieldMask, this.fieldCount);
        
        // Encode modified, present fields.
        
        if ((fieldMask & QuantileValue.fieldModifiedQuantile) != 0) {
            // Encode Quantile
            this.quantileEncoder.encode(val.quantile);
        }
        
        if ((fieldMask & QuantileValue.fieldModifiedValue) != 0) {
            // Encode Value
            this.valueEncoder.encode(val.value);
        }
        
        // Account written bits in the limiter.
        int newLen = this.buf.bitCount();
        this.limiter.addFrameBits(newLen - oldLen);

        // Mark all fields non-modified so that next encode() correctly
        // encodes only fields that change after this.
        val.modifiedFields.mask = 0;
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        int colIdx = 0;
        
        // Collect Quantile field.
        if (this.fieldCount <= 0) {
            return; // Quantile and subsequent fields are skipped.
        }
        
        quantileEncoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
        // Collect Value field.
        if (this.fieldCount <= 1) {
            return; // Value and subsequent fields are skipped.
        }
        
        valueEncoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
    }
}

