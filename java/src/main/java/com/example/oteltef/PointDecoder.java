// Code generated by stefc. DO NOT EDIT.
// PointDecoder implements decoding of Point
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class PointDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private int fieldCount;

    
    private Uint64Decoder startTimestampDecoder;
    private boolean isStartTimestampRecursive = false; // Indicates StartTimestamp field's type is recursive.
    private Uint64Decoder timestampDecoder;
    private boolean isTimestampRecursive = false; // Indicates Timestamp field's type is recursive.
    private PointValueDecoder valueDecoder;
    private boolean isValueRecursive = false; // Indicates Value field's type is recursive.
    private ExemplarArrayDecoder exemplarsDecoder;
    private boolean isExemplarsRecursive = false; // Indicates Exemplars field's type is recursive.
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.PointDecoder != null) {
            throw new IllegalStateException("cannot initialize PointDecoder: already initialized");
        }
        state.PointDecoder = this;

        try {
            fieldCount = state.getStructFieldCounts().getPointFieldCount();

            column = columns.getColumn();
            
            if (this.fieldCount <= 0) {
                return; // StartTimestamp and subsequent fields are skipped.
            }
            startTimestampDecoder = new Uint64Decoder();
            startTimestampDecoder.init(columns.addSubColumn());
            if (this.fieldCount <= 1) {
                return; // Timestamp and subsequent fields are skipped.
            }
            timestampDecoder = new Uint64Decoder();
            timestampDecoder.init(columns.addSubColumn());
            if (this.fieldCount <= 2) {
                return; // Value and subsequent fields are skipped.
            }
            if (state.PointValueDecoder != null) {
                // Recursion detected, use the existing decoder.
                valueDecoder = state.PointValueDecoder;
                isValueRecursive = true; // Mark that we are using a recursive decoder.
            } else {
                valueDecoder = new PointValueDecoder();
                valueDecoder.init(state, columns.addSubColumn());
            }
            if (this.fieldCount <= 3) {
                return; // Exemplars and subsequent fields are skipped.
            }
            if (state.ExemplarArrayDecoder != null) {
                // Recursion detected, use the existing decoder.
                exemplarsDecoder = state.ExemplarArrayDecoder;
                isExemplarsRecursive = true; // Mark that we are using a recursive decoder.
            } else {
                exemplarsDecoder = new ExemplarArrayDecoder();
                exemplarsDecoder.init(state, columns.addSubColumn());
            }
        } finally {
            state.PointDecoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // StartTimestamp and subsequent fields are skipped.
        }
        startTimestampDecoder.continueDecoding();
        if (this.fieldCount <= 1) {
            return; // Timestamp and subsequent fields are skipped.
        }
        timestampDecoder.continueDecoding();
        if (this.fieldCount <= 2) {
            return; // Value and subsequent fields are skipped.
        }
        
        if (!isValueRecursive) {
            valueDecoder.continueDecoding();
        }
        
        if (this.fieldCount <= 3) {
            return; // Exemplars and subsequent fields are skipped.
        }
        
        if (!isExemplarsRecursive) {
            exemplarsDecoder.continueDecoding();
        }
        
    }

    public void reset() {
        
        if (fieldCount <= 0) {
            // StartTimestamp and all subsequent fields are skipped.
            return;
        }
        startTimestampDecoder.reset();
        if (fieldCount <= 1) {
            // Timestamp and all subsequent fields are skipped.
            return;
        }
        timestampDecoder.reset();
        if (fieldCount <= 2) {
            // Value and all subsequent fields are skipped.
            return;
        }
        if (!isValueRecursive) {
            valueDecoder.reset();
        }
        if (fieldCount <= 3) {
            // Exemplars and all subsequent fields are skipped.
            return;
        }
        if (!isExemplarsRecursive) {
            exemplarsDecoder.reset();
        }
    }

    public Point decode(Point dstPtr) throws IOException {
        Point val = dstPtr;
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        
        
        if ((val.modifiedFields.mask & Point.fieldModifiedStartTimestamp) != 0) {
            // Field is changed and is present, decode it.
            val.startTimestamp = startTimestampDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Point.fieldModifiedTimestamp) != 0) {
            // Field is changed and is present, decode it.
            val.timestamp = timestampDecoder.decode();
        }
        
        if ((val.modifiedFields.mask & Point.fieldModifiedValue) != 0) {
            // Field is changed and is present, decode it.
            if (val.value == null) {
                val.value = new PointValue(val.modifiedFields, Point.fieldModifiedValue);
            }
            val.value = valueDecoder.decode(val.value);
        }
        
        if ((val.modifiedFields.mask & Point.fieldModifiedExemplars) != 0) {
            // Field is changed and is present, decode it.
            if (val.exemplars == null) {
                val.exemplars = new ExemplarArray(val.modifiedFields, Point.fieldModifiedExemplars);
            }
            val.exemplars = exemplarsDecoder.decode(val.exemplars);
        }
        
        
        return val;
    }
}

