// Code generated by stefgen. DO NOT EDIT.
// SpanStatusEncoder implements encoding of SpanStatus
package com.example.oteltef;

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class SpanStatusEncoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;

    // forceModifiedFields is set to true if the next encoding operation
    // must write all fields, whether they are modified or not.
    // This is used after frame restarts so that the data can be decoded
    // from the frame start.
    private boolean forceModifiedFields;

    
    private StringEncoder messageEncoder;
    private boolean isMessageRecursive = false; // Indicates Message field's type is recursive.
    private Uint64Encoder codeEncoder;
    private boolean isCodeRecursive = false; // Indicates Code field's type is recursive.
    

    private long keepFieldMask;
    private int fieldCount;

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.SpanStatusEncoder != null) {
            throw new IllegalStateException("cannot initialize SpanStatusEncoder: already initialized");
        }
        state.SpanStatusEncoder = this;

        try {
            this.limiter = state.getLimiter();

            if (state.getOverrideSchema() != null) {
                int fieldCount = state.getOverrideSchema().getFieldCount("SpanStatus");
                this.fieldCount = fieldCount;
                this.keepFieldMask = ~((~0L) << this.fieldCount);
            } else {
                this.fieldCount = 2;
                this.keepFieldMask = ~0L;
            }

            
            // Init encoder for Message field.
            if (this.fieldCount <= 0) {
                return; // Message and subsequent fields are skipped.
            }
            messageEncoder = new StringEncoder();
            this.messageEncoder.init(null, this.limiter, columns.addSubColumn());
            // Init encoder for Code field.
            if (this.fieldCount <= 1) {
                return; // Code and subsequent fields are skipped.
            }
            codeEncoder = new Uint64Encoder();
            this.codeEncoder.init(this.limiter, columns.addSubColumn());
        } finally {
            state.SpanStatusEncoder = null;
        }
    }

    public void reset() {
        // Since we are resetting the state of encoder make sure the next encode()
        // call forcefully writes all fields and does not attempt to skip.
        this.forceModifiedFields = true;
        messageEncoder.reset();
        codeEncoder.reset();
    }

    // encode encodes val into buf
    public void encode(SpanStatus val) throws IOException {
        int oldLen = this.buf.bitCount();

        

        // Mask that describes what fields are encoded. Start with all modified fields.
        long fieldMask = val.modifiedFields.mask;
        // If forceModifiedFields we need to set to 1 all bits so that we
        // force writing of all fields.
        if (this.forceModifiedFields) {
            fieldMask =
                SpanStatus.fieldModifiedMessage | 
                SpanStatus.fieldModifiedCode | 0L;
        }

        // Only write fields that we want to write. See init() for keepFieldMask.
        fieldMask &= this.keepFieldMask;

        // Write bits to indicate which fields follow.
        this.buf.writeBits(fieldMask, this.fieldCount);
        
        // Encode modified, present fields.
        
        if ((fieldMask & SpanStatus.fieldModifiedMessage) != 0) {
            // Encode Message
            this.messageEncoder.encode(val.message);
        }
        
        if ((fieldMask & SpanStatus.fieldModifiedCode) != 0) {
            // Encode Code
            this.codeEncoder.encode(val.code);
        }
        
        // Account written bits in the limiter.
        int newLen = this.buf.bitCount();
        this.limiter.addFrameBits(newLen - oldLen);

        // Mark all fields non-modified so that next encode() correctly
        // encodes only fields that change after this.
        val.modifiedFields.mask = 0;
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        int colIdx = 0;
        
        // Collect Message field.
        if (this.fieldCount <= 0) {
            return; // Message and subsequent fields are skipped.
        }
        
        messageEncoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
        // Collect Code field.
        if (this.fieldCount <= 1) {
            return; // Code and subsequent fields are skipped.
        }
        
        codeEncoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        
    }
}

