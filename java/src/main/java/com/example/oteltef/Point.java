// Code generated by stefgen. DO NOT EDIT.
// Point Java class generated from template
package com.example.oteltef;

import net.stef.StringValue;
import net.stef.Types;
import net.stef.schema.WireSchema;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.*;

public class Point {
    // Field values.
    
    long startTimestamp;
    long timestamp;
    PointValue value;
    ExemplarArray exemplars;

    // modifiedFields keeps track of which fields are modified.
    final ModifiedFields modifiedFields = new ModifiedFields();

    public static final String StructName = "Point";

    // Bitmasks for "modified" flags for each field.
    
    public static final long fieldModifiedStartTimestamp = 1 << 0;
    public static final long fieldModifiedTimestamp = 1 << 1;
    public static final long fieldModifiedValue = 1 << 2;
    public static final long fieldModifiedExemplars = 1 << 3;

    

    public Point() {
        init(null, 0);
    }

    Point(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        init(parentModifiedFields, parentModifiedBit);
    }

    private void init(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        modifiedFields.parent = parentModifiedFields;
        modifiedFields.parentBit = parentModifiedBit;
        
        
        
        value = new PointValue(modifiedFields, fieldModifiedValue);
        exemplars = new ExemplarArray(modifiedFields, fieldModifiedExemplars);
    }

    
    public long getStartTimestamp() {
        return startTimestamp;
    }

    // setStartTimestamp sets the value of StartTimestamp field.
    public void setStartTimestamp(long v) {
        if (!Types.Uint64Equal(this.startTimestamp, v)) {
            this.startTimestamp = v;
            this.markStartTimestampModified();
        }
    }

    private void markStartTimestampModified() {
        this.modifiedFields.markModified(fieldModifiedStartTimestamp);
    }

    // isStartTimestampModified returns true if the value of StartTimestamp field was modified since
    // Point was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isStartTimestampModified() {
        return (this.modifiedFields.mask & fieldModifiedStartTimestamp) != 0;
    }
    
    public long getTimestamp() {
        return timestamp;
    }

    // setTimestamp sets the value of Timestamp field.
    public void setTimestamp(long v) {
        if (!Types.Uint64Equal(this.timestamp, v)) {
            this.timestamp = v;
            this.markTimestampModified();
        }
    }

    private void markTimestampModified() {
        this.modifiedFields.markModified(fieldModifiedTimestamp);
    }

    // isTimestampModified returns true if the value of Timestamp field was modified since
    // Point was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isTimestampModified() {
        return (this.modifiedFields.mask & fieldModifiedTimestamp) != 0;
    }
    
    public PointValue getValue() {
        return this.value;
    }

    // isValueModified returns true if the value of Value field was modified since
    // Point was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isValueModified() {
        return (this.modifiedFields.mask & fieldModifiedValue) != 0;
    }
    
    public ExemplarArray getExemplars() {
        return this.exemplars;
    }

    // isExemplarsModified returns true if the value of Exemplars field was modified since
    // Point was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isExemplarsModified() {
        return (this.modifiedFields.mask & fieldModifiedExemplars) != 0;
    }
    

    void markUnmodified() {
        modifiedFields.markUnmodified();
        if (this.isValueModified()) {
            this.value.markUnmodified();
        }
        if (this.isExemplarsModified()) {
            this.exemplars.markUnmodified();
        }
    }

    void markModifiedRecursively() {
        value.markModifiedRecursively();
        exemplars.markModifiedRecursively();
        modifiedFields.mask =
            fieldModifiedStartTimestamp | 
            fieldModifiedTimestamp | 
            fieldModifiedValue | 
            fieldModifiedExemplars | 0;
    }

    void markUnmodifiedRecursively() {
        if (isValueModified()) {
            value.markUnmodifiedRecursively();
        }
        if (isExemplarsModified()) {
            exemplars.markUnmodifiedRecursively();
        }
        modifiedFields.mask = 0;
    }

    // markDiffModified marks fields in this struct modified if they differ from
    // the corresponding fields in v.
    boolean markDiffModified(Point v) {
        boolean modified = false;
        if (!Types.Uint64Equal(startTimestamp, v.startTimestamp)) {
            markStartTimestampModified();
            modified = true;
        }
        
        if (!Types.Uint64Equal(timestamp, v.timestamp)) {
            markTimestampModified();
            modified = true;
        }
        
        if (value.markDiffModified(v.value)) {
            modifiedFields.markModified(fieldModifiedValue);
            modified = true;
        }
        
        if (exemplars.markDiffModified(v.exemplars)) {
            modifiedFields.markModified(fieldModifiedExemplars);
            modified = true;
        }
        
        return modified;
    }

    public Point clone() {
        Point cpy = new Point();
        cpy.startTimestamp = this.startTimestamp;
        cpy.timestamp = this.timestamp;
        cpy.value = this.value.clone();
        cpy.exemplars = this.exemplars.clone();
        return cpy;
    }

    // ByteSize returns approximate memory usage in bytes. Used to calculate memory used by dictionaries.
    int byteSize() {
        int size = 0; // TODO: calculate the size of this object.
        
        
        size += this.value.byteSize();
        size += this.exemplars.byteSize();
        return size;
    }

    // Performs a deep copy from src to dst.
    public void copyFrom(Point src) {
        setStartTimestamp(src.getStartTimestamp());
        setTimestamp(src.getTimestamp());
        value.copyFrom(src.value);
        exemplars.copyFrom(src.exemplars);
    }

    // equals performs deep comparison and returns true if struct is equal to val.
    public boolean equals(Point right) {
        // Compare StartTimestamp field.
        if (!Types.Uint64Equal(this.startTimestamp, right.startTimestamp)) {
            return false;
        }
        // Compare Timestamp field.
        if (!Types.Uint64Equal(this.timestamp, right.timestamp)) {
            return false;
        }
        // Compare Value field.
        if (!this.value.equals(right.value)) {
            return false;
        }
        // Compare Exemplars field.
        if (!this.exemplars.equals(right.exemplars)) {
            return false;
        }
        return true;
    }

    public static boolean equals(Point left, Point right) {
        return left.equals(right);
    }

    // compare performs deep comparison and returns an integer that
    // will be 0 if left == right, negative if left < right, positive if left > right.
    public static int compare(Point left, Point right) {
        if (left == null) {
            if (right == null) {
                return 0;
            }
            return -1;
        }
        if (right == null) {
            return 1;
        }
        int c;
        
        // Compare StartTimestamp field.
        c = Types.Uint64Compare(left.startTimestamp, right.startTimestamp);
        if (c != 0) {
            return c;
        }
        
        // Compare Timestamp field.
        c = Types.Uint64Compare(left.timestamp, right.timestamp);
        if (c != 0) {
            return c;
        }
        
        // Compare Value field.
        c = PointValue.compare(left.value, right.value);
        if (c != 0) {
            return c;
        }
        
        // Compare Exemplars field.
        c = ExemplarArray.compare(left.exemplars, right.exemplars);
        if (c != 0) {
            return c;
        }
        
        return 0;
    }

    // mutateRandom mutates fields in a random, deterministic manner using random as a deterministic generator.
    void mutateRandom(Random random) {
        final int fieldCount = Math.max(4,2); // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
        
        if (random.nextInt(fieldCount) == 0) {
            this.setStartTimestamp(Types.Uint64Random(random));
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.setTimestamp(Types.Uint64Random(random));
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.value.mutateRandom(random);
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.exemplars.mutateRandom(random);
        }
        
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return equals((Point)o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            startTimestamp,
            timestamp,
            value,
            exemplars
        );
    }

    
}
