// Code generated by stefgen. DO NOT EDIT.
// ExemplarValue Java class generated from template
package com.example.oteltef;

import net.stef.StringValue;
import net.stef.Types;
import java.util.*;

// ExemplarValue is a oneof struct.
public class ExemplarValue {
    // The current type of the oneof.
    Type typ;
    
    long int64;
    double float64;

    // Pointer to parent's modifiedFields
    private ModifiedFields parentModifiedFields;
    // Bit to set in parent's modifiedFields when this oneof is modified.
    private long parentModifiedBit;

    ExemplarValue() {
        init(null, 0);
    }

    ExemplarValue(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        init(parentModifiedFields, parentModifiedBit);
    }

    void init(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        typ = Type.TypeNone;
        this.parentModifiedFields = parentModifiedFields;
        this.parentModifiedBit = parentModifiedBit;
        
        
        
    }

    // Type enum for oneof
    public enum Type {
        TypeNone(0),
        TypeInt64(0 + 1),
        TypeFloat64(1 + 1),
        TypeCount(2 + 1);

        private final int value;

        Type(int value) {
            this.value = value;
        }

        public int getValue() {
            return value;
        }
    }

    // getType returns the type of the value currently contained in ExemplarValue.
    public Type getType() {
        return typ;
    }

    // setType sets the type of the value currently contained in ExemplarValue.
    public void setType(Type typ) {
        if (this.typ != typ) {
            this.typ = typ;
            this.markParentModified();
        }
    }

    
    // Int64 returns the value if the contained type is currently TypeInt64.
    // The caller must check the type via getType() before attempting to call this function.
    public long getInt64() {
        return this.int64;
    }
    
    // SetInt64 sets the value to the specified value and sets the type to TypeInt64.
    public void setInt64(long v) {
        if (!Types.Int64Equal(this.int64, v) || this.typ != Type.TypeInt64) {
            this.int64 = v;
            this.typ = Type.TypeInt64;
            this.markParentModified();
        }
    }
    
    
    // Float64 returns the value if the contained type is currently TypeFloat64.
    // The caller must check the type via getType() before attempting to call this function.
    public double getFloat64() {
        return this.float64;
    }
    
    // SetFloat64 sets the value to the specified value and sets the type to TypeFloat64.
    public void setFloat64(double v) {
        if (!Types.Float64Equal(this.float64, v) || this.typ != Type.TypeFloat64) {
            this.float64 = v;
            this.typ = Type.TypeFloat64;
            this.markParentModified();
        }
    }
    
    

    // Clone returns a deep copy of this oneof.
    public ExemplarValue clone() {
        ExemplarValue cpy = new ExemplarValue();
        cpy.typ = this.typ;
        cpy.int64 = this.int64;
        cpy.float64 = this.float64;
        return cpy;
    }

    // byteSize returns approximate memory usage in bytes. Used to calculate memory used by dictionaries.
    public int byteSize() {
        int size = 0; // TODO: calculate the size of this object.
        
        
        return size;
    }

    // copy performs a deep copy from src.
    public void copyFrom(ExemplarValue src) {
        switch (src.typ) {
        case TypeInt64:
            setInt64(src.getInt64());
            break;
        case TypeFloat64:
            setFloat64(src.getFloat64());
            break;
        }
        setType(src.typ);
    }

    private void markParentModified() {
        if (parentModifiedFields != null) {
            parentModifiedFields.markModified(parentModifiedBit);
        }
    }

    void markUnmodified() {
    }

    void markModifiedRecursively() {
        switch (this.typ) {
        case TypeInt64:
            break;
        case TypeFloat64:
            break;
        default:
            break;
        }
    }

    void markUnmodifiedRecursively() {
        switch (this.typ) {
        case TypeInt64:
            break;
        case TypeFloat64:
            break;
        default:
            break;
        }
    }

    // markDiffModified marks fields in this struct modified if they differ from
    // the corresponding fields in v.
    boolean markDiffModified(ExemplarValue v) {
        if (this.typ != v.typ) {
            this.markModifiedRecursively();
            return true;
        }

        boolean modified = false;
        switch (this.typ) {
        case TypeInt64:
            if (!Types.Int64Equal(this.int64, v.int64)) {
                this.markParentModified();
                modified = true;
            }
        case TypeFloat64:
            if (!Types.Float64Equal(this.float64, v.float64)) {
                this.markParentModified();
                modified = true;
            }
        }
        return modified;
    }

    // equals performs deep comparison and returns true if struct is equal to val.
    public boolean equals(ExemplarValue val) {
        if (this.typ != val.typ) {
            return false;
        }
        switch (this.typ) {
        case TypeInt64:
            if (!Types.Int64Equal(this.int64, val.int64)) {
                return false;
            }
            break;
        case TypeFloat64:
            if (!Types.Float64Equal(this.float64, val.float64)) {
                return false;
            }
            break;
        default:
            break;
        }
        return true;
    }

    public static boolean equals(ExemplarValue left, ExemplarValue right) {
        return left.equals(right);
    }

    // compare performs deep comparison and returns 0 if equal, negative if left < right, positive if left > right.
    public static int compare(ExemplarValue left, ExemplarValue right) {
        if (left == null) return right == null ? 0 : -1;
        if (right == null) return 1;
        int c = Integer.compare(left.typ.ordinal(), right.typ.ordinal());
        if (c != 0) return c;
        switch (left.typ) {
        case TypeInt64:
            c = Types.Int64Compare(left.int64, right.int64);
            if (c != 0) {
                return c;
            }
            break;
        case TypeFloat64:
            c = Types.Float64Compare(left.float64, right.float64);
            if (c != 0) {
                return c;
            }
            break;
        default:
            break;
        }
        return 0;
    }

    // mutateRandom mutates fields in a random, deterministic manner using random as a deterministic generator.
    void mutateRandom(Random random) {
        int fieldCount = 2;
        boolean typeChanged = false;
        if (random.nextInt(10) == 0) {
            this.setType(Type.values()[random.nextInt(fieldCount + 1)]);
            typeChanged = true;
        }
        switch (this.typ) {
        case TypeInt64:
            if (typeChanged || random.nextInt(2) == 0) {
                this.setInt64(Types.Int64Random(random));
            }
            break;
        case TypeFloat64:
            if (typeChanged || random.nextInt(2) == 0) {
                this.setFloat64(Types.Float64Random(random));
            }
            break;
        default:
            break;
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return equals((ExemplarValue)o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            int64,
            float64,
            typ
        );
    }
}

