// Code generated by stefgen. DO NOT EDIT.
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

// Decoder for AnyValueArray
class AnyValueArrayDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private AnyValueDecoder elemDecoder;
    private boolean isRecursive = false;
    // lastValStack are last decoded values stacked by the level of recursion.
    private AnyValueArrayEncoder.LastValStack lastValStack;

    // init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        column = columns.getColumn();
        // Remember this encoder in the state so that we can detect recursion.
        if (state.AnyValueArrayDecoder != null) {
            throw new IllegalStateException("cannot initialize AnyValueArrayDecoder: already initialized");
        }
        state.AnyValueArrayDecoder = this;
        try {
            if (state.AnyValueDecoder != null) {
                elemDecoder = state.AnyValueDecoder;
                isRecursive = true;
            } else {
                elemDecoder = new AnyValueDecoder();
                elemDecoder.init(state, columns.addSubColumn());
            }
            this.lastValStack = new AnyValueArrayEncoder.LastValStack();
        } finally {
            state.AnyValueArrayDecoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        buf.reset(column.getData());
        if (!isRecursive) {
            elemDecoder.continueDecoding();
        }
    }

    public void reset() {
        if (!isRecursive) {
            elemDecoder.reset();
        }
        lastValStack.reset();
    }

    public AnyValueArray decode(AnyValueArray dst) throws IOException {
        AnyValueArrayEncoder.LastValElem lastVal = lastValStack.top();
        lastValStack.addOnTop();
        try {
            long lenDelta = buf.readVarintCompact();
            
            long newLen = lastVal.prevLen + lenDelta;
            lastVal.prevLen = newLen;

            if (newLen < 0) {
                throw new IllegalStateException("Invalid array length: " + newLen);
            }
            if (newLen > Integer.MAX_VALUE) {
                throw new IllegalStateException("Array length exceeds maximum: " + newLen);
            }

            dst.ensureLen((int)newLen);
            for (int i = 0; i < newLen; i++) {
                
                lastVal.elem = elemDecoder.decode(lastVal.elem);
                dst.elems[i].copyFrom(lastVal.elem);
                
            }
        } finally {
            lastValStack.removeFromTop();
        }

        return dst;
    }
}

