// Code generated by stefc. DO NOT EDIT.
// EnvelopeDecoder implements decoding of Envelope
package com.example.oteltef;

import net.stef.BitsReader;
import net.stef.Helper;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class EnvelopeDecoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private int fieldCount;
    

    
    private EnvelopeAttributesDecoder attributesDecoder;
    private boolean isAttributesRecursive = false; // Indicates Attributes field's type is recursive.
    

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.EnvelopeDecoder != null) {
            throw new IllegalStateException("cannot initialize EnvelopeDecoder: already initialized");
        }
        state.EnvelopeDecoder = this;

        try {
            fieldCount = state.getStructFieldCounts().getEnvelopeFieldCount();
            column = columns.getColumn();
            
            if (this.fieldCount <= 0) {
                return; // Attributes and subsequent fields are skipped.
            }
            if (state.EnvelopeAttributesDecoder != null) {
                // Recursion detected, use the existing decoder.
                attributesDecoder = state.EnvelopeAttributesDecoder;
                isAttributesRecursive = true; // Mark that we are using a recursive decoder.
            } else {
                attributesDecoder = new EnvelopeAttributesDecoder();
                attributesDecoder.init(state, columns.addSubColumn());
            }
        } finally {
            state.EnvelopeDecoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        
        if (this.fieldCount <= 0) {
            return; // Attributes and subsequent fields are skipped.
        }
        
        if (!isAttributesRecursive) {
            attributesDecoder.continueDecoding();
        }
        
    }

    public void reset() {
        
        if (fieldCount <= 0) {
            // Attributes and all subsequent fields are skipped.
            return;
        }
        if (!isAttributesRecursive) {
            attributesDecoder.reset();
        }
    }

    public Envelope decode(Envelope dstPtr) throws IOException {
        Envelope val = dstPtr;
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        
        
        if ((val.modifiedFields.mask & Envelope.fieldModifiedAttributes) != 0) {
            // Field is changed and is present, decode it.
            if (val.attributes == null) {
                val.attributes = new EnvelopeAttributes(val.modifiedFields, Envelope.fieldModifiedAttributes);
            }
            val.attributes = attributesDecoder.decode(val.attributes);
        }
        
        
        return val;
    }
}

