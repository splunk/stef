// Code generated by stefgen. DO NOT EDIT.
// Event Java class generated from template
package com.example.oteltef;

import net.stef.StringValue;
import net.stef.Types;
import net.stef.schema.WireSchema;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.*;

public class Event {
    // Field values.
    
    StringValue name;
    long timeUnixNano;
    Attributes attributes;
    long droppedAttributesCount;

    // modifiedFields keeps track of which fields are modified.
    final ModifiedFields modifiedFields = new ModifiedFields();

    public static final String StructName = "Event";

    // Bitmasks for "modified" flags for each field.
    
    public static final long fieldModifiedName = 1 << 0;
    public static final long fieldModifiedTimeUnixNano = 1 << 1;
    public static final long fieldModifiedAttributes = 1 << 2;
    public static final long fieldModifiedDroppedAttributesCount = 1 << 3;

    

    public Event() {
        init(null, 0);
    }

    Event(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        init(parentModifiedFields, parentModifiedBit);
    }

    private void init(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        modifiedFields.parent = parentModifiedFields;
        modifiedFields.parentBit = parentModifiedBit;
        
        name = StringValue.empty;
        
        attributes = new Attributes(modifiedFields, fieldModifiedAttributes);
        
    }

    
    public StringValue getName() {
        return name;
    }

    // setName sets the value of Name field.
    public void setName(StringValue v) {
        if (!Types.StringEqual(this.name, v)) {
            this.name = v;
            this.markNameModified();
        }
    }

    private void markNameModified() {
        this.modifiedFields.markModified(fieldModifiedName);
    }

    // isNameModified returns true if the value of Name field was modified since
    // Event was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isNameModified() {
        return (this.modifiedFields.mask & fieldModifiedName) != 0;
    }
    
    public long getTimeUnixNano() {
        return timeUnixNano;
    }

    // setTimeUnixNano sets the value of TimeUnixNano field.
    public void setTimeUnixNano(long v) {
        if (!Types.Uint64Equal(this.timeUnixNano, v)) {
            this.timeUnixNano = v;
            this.markTimeUnixNanoModified();
        }
    }

    private void markTimeUnixNanoModified() {
        this.modifiedFields.markModified(fieldModifiedTimeUnixNano);
    }

    // isTimeUnixNanoModified returns true if the value of TimeUnixNano field was modified since
    // Event was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isTimeUnixNanoModified() {
        return (this.modifiedFields.mask & fieldModifiedTimeUnixNano) != 0;
    }
    
    public Attributes getAttributes() {
        return this.attributes;
    }

    // isAttributesModified returns true if the value of Attributes field was modified since
    // Event was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isAttributesModified() {
        return (this.modifiedFields.mask & fieldModifiedAttributes) != 0;
    }
    
    public long getDroppedAttributesCount() {
        return droppedAttributesCount;
    }

    // setDroppedAttributesCount sets the value of DroppedAttributesCount field.
    public void setDroppedAttributesCount(long v) {
        if (!Types.Uint64Equal(this.droppedAttributesCount, v)) {
            this.droppedAttributesCount = v;
            this.markDroppedAttributesCountModified();
        }
    }

    private void markDroppedAttributesCountModified() {
        this.modifiedFields.markModified(fieldModifiedDroppedAttributesCount);
    }

    // isDroppedAttributesCountModified returns true if the value of DroppedAttributesCount field was modified since
    // Event was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isDroppedAttributesCountModified() {
        return (this.modifiedFields.mask & fieldModifiedDroppedAttributesCount) != 0;
    }
    

    void markUnmodified() {
        modifiedFields.markUnmodified();
        if (this.isAttributesModified()) {
            this.attributes.markUnmodified();
        }
    }

    void markModifiedRecursively() {
        attributes.markModifiedRecursively();
        modifiedFields.mask =
            fieldModifiedName | 
            fieldModifiedTimeUnixNano | 
            fieldModifiedAttributes | 
            fieldModifiedDroppedAttributesCount | 0;
    }

    void markUnmodifiedRecursively() {
        if (isAttributesModified()) {
            attributes.markUnmodifiedRecursively();
        }
        modifiedFields.mask = 0;
    }

    // markDiffModified marks fields in this struct modified if they differ from
    // the corresponding fields in v.
    boolean markDiffModified(Event v) {
        boolean modified = false;
        if (!Types.StringEqual(name, v.name)) {
            markNameModified();
            modified = true;
        }
        
        if (!Types.Uint64Equal(timeUnixNano, v.timeUnixNano)) {
            markTimeUnixNanoModified();
            modified = true;
        }
        
        if (attributes.markDiffModified(v.attributes)) {
            modifiedFields.markModified(fieldModifiedAttributes);
            modified = true;
        }
        
        if (!Types.Uint64Equal(droppedAttributesCount, v.droppedAttributesCount)) {
            markDroppedAttributesCountModified();
            modified = true;
        }
        
        return modified;
    }

    public Event clone() {
        Event cpy = new Event();
        cpy.name = this.name;
        cpy.timeUnixNano = this.timeUnixNano;
        cpy.attributes = this.attributes.clone();
        cpy.droppedAttributesCount = this.droppedAttributesCount;
        return cpy;
    }

    // ByteSize returns approximate memory usage in bytes. Used to calculate memory used by dictionaries.
    int byteSize() {
        int size = 0; // TODO: calculate the size of this object.
        
        
        size += this.attributes.byteSize();
        
        return size;
    }

    // Performs a deep copy from src to dst.
    public void copyFrom(Event src) {
        setName(src.getName());
        setTimeUnixNano(src.getTimeUnixNano());
        attributes.copyFrom(src.attributes);
        setDroppedAttributesCount(src.getDroppedAttributesCount());
    }

    // equals performs deep comparison and returns true if struct is equal to val.
    public boolean equals(Event right) {
        // Compare Name field.
        if (!Types.StringEqual(this.name, right.name)) {
            return false;
        }
        // Compare TimeUnixNano field.
        if (!Types.Uint64Equal(this.timeUnixNano, right.timeUnixNano)) {
            return false;
        }
        // Compare Attributes field.
        if (!this.attributes.equals(right.attributes)) {
            return false;
        }
        // Compare DroppedAttributesCount field.
        if (!Types.Uint64Equal(this.droppedAttributesCount, right.droppedAttributesCount)) {
            return false;
        }
        return true;
    }

    public static boolean equals(Event left, Event right) {
        return left.equals(right);
    }

    // compare performs deep comparison and returns an integer that
    // will be 0 if left == right, negative if left < right, positive if left > right.
    public static int compare(Event left, Event right) {
        if (left == null) {
            if (right == null) {
                return 0;
            }
            return -1;
        }
        if (right == null) {
            return 1;
        }
        int c;
        
        // Compare Name field.
        c = Types.StringCompare(left.name, right.name);
        if (c != 0) {
            return c;
        }
        
        // Compare TimeUnixNano field.
        c = Types.Uint64Compare(left.timeUnixNano, right.timeUnixNano);
        if (c != 0) {
            return c;
        }
        
        // Compare Attributes field.
        c = Attributes.compare(left.attributes, right.attributes);
        if (c != 0) {
            return c;
        }
        
        // Compare DroppedAttributesCount field.
        c = Types.Uint64Compare(left.droppedAttributesCount, right.droppedAttributesCount);
        if (c != 0) {
            return c;
        }
        
        return 0;
    }

    // mutateRandom mutates fields in a random, deterministic manner using random as a deterministic generator.
    void mutateRandom(Random random) {
        final int fieldCount = Math.max(4,2); // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
        
        if (random.nextInt(fieldCount) == 0) {
            this.setName(Types.StringRandom(random));
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.setTimeUnixNano(Types.Uint64Random(random));
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.attributes.mutateRandom(random);
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.setDroppedAttributesCount(Types.Uint64Random(random));
        }
        
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return equals((Event)o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            timeUnixNano,
            attributes,
            droppedAttributesCount
        );
    }

    
}
