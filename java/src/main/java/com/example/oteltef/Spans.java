// Code generated by stefgen. DO NOT EDIT.
// Spans Java class generated from template
package com.example.oteltef;

import net.stef.StringValue;
import net.stef.Types;
import net.stef.schema.WireSchema;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.*;

public class Spans {
    // Field values.
    
    Envelope envelope;
    Resource resource;
    Scope scope;
    Span span;

    // modifiedFields keeps track of which fields are modified.
    final ModifiedFields modifiedFields = new ModifiedFields();

    public static final String StructName = "Spans";

    // Bitmasks for "modified" flags for each field.
    
    public static final long fieldModifiedEnvelope = 1 << 0;
    public static final long fieldModifiedResource = 1 << 1;
    public static final long fieldModifiedScope = 1 << 2;
    public static final long fieldModifiedSpan = 1 << 3;

    

    public Spans() {
        init(null, 0);
    }

    Spans(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        init(parentModifiedFields, parentModifiedBit);
    }

    private void init(ModifiedFields parentModifiedFields, long parentModifiedBit) {
        modifiedFields.parent = parentModifiedFields;
        modifiedFields.parentBit = parentModifiedBit;
        
        envelope = new Envelope(modifiedFields, fieldModifiedEnvelope);
        resource = new Resource(modifiedFields, fieldModifiedResource);
        scope = new Scope(modifiedFields, fieldModifiedScope);
        span = new Span(modifiedFields, fieldModifiedSpan);
    }

    
    public Envelope getEnvelope() {
        return this.envelope;
    }

    private void markEnvelopeModified() {
        this.modifiedFields.markModified(fieldModifiedEnvelope);
    }

    // isEnvelopeModified returns true if the value of Envelope field was modified since
    // Spans was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isEnvelopeModified() {
        return (this.modifiedFields.mask & fieldModifiedEnvelope) != 0;
    }
    
    public Resource getResource() {
        return this.resource;
    }

    private void markResourceModified() {
        this.modifiedFields.markModified(fieldModifiedResource);
    }

    // isResourceModified returns true if the value of Resource field was modified since
    // Spans was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isResourceModified() {
        return (this.modifiedFields.mask & fieldModifiedResource) != 0;
    }
    
    public Scope getScope() {
        return this.scope;
    }

    private void markScopeModified() {
        this.modifiedFields.markModified(fieldModifiedScope);
    }

    // isScopeModified returns true if the value of Scope field was modified since
    // Spans was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isScopeModified() {
        return (this.modifiedFields.mask & fieldModifiedScope) != 0;
    }
    
    public Span getSpan() {
        return this.span;
    }

    private void markSpanModified() {
        this.modifiedFields.markModified(fieldModifiedSpan);
    }

    // isSpanModified returns true if the value of Span field was modified since
    // Spans was created, encoded or decoded. If the field is modified
    // it will be encoded by the next Write() operation. If the field is decoded by the
    // next Read() operation the modified flag will be set.
    public boolean isSpanModified() {
        return (this.modifiedFields.mask & fieldModifiedSpan) != 0;
    }
    

    void markUnmodified() {
        modifiedFields.markUnmodified();
        if (this.isEnvelopeModified()) {
            this.envelope.markUnmodified();
        }
        if (this.isResourceModified()) {
            this.resource.markUnmodified();
        }
        if (this.isScopeModified()) {
            this.scope.markUnmodified();
        }
        if (this.isSpanModified()) {
            this.span.markUnmodified();
        }
    }

    void markModifiedRecursively() {
        envelope.markModifiedRecursively();
        resource.markModifiedRecursively();
        scope.markModifiedRecursively();
        span.markModifiedRecursively();
        modifiedFields.mask =
            fieldModifiedEnvelope | 
            fieldModifiedResource | 
            fieldModifiedScope | 
            fieldModifiedSpan | 0;
    }

    void markUnmodifiedRecursively() {
        if (isEnvelopeModified()) {
            envelope.markUnmodifiedRecursively();
        }
        if (isResourceModified()) {
            resource.markUnmodifiedRecursively();
        }
        if (isScopeModified()) {
            scope.markUnmodifiedRecursively();
        }
        if (isSpanModified()) {
            span.markUnmodifiedRecursively();
        }
        modifiedFields.mask = 0;
    }

    // markDiffModified marks fields in this struct modified if they differ from
    // the corresponding fields in v.
    boolean markDiffModified(Spans v) {
        boolean modified = false;
        if (envelope.markDiffModified(v.envelope)) {
            modifiedFields.markModified(fieldModifiedEnvelope);
            modified = true;
        }
        
        if (resource.markDiffModified(v.resource)) {
            modifiedFields.markModified(fieldModifiedResource);
            modified = true;
        }
        
        if (scope.markDiffModified(v.scope)) {
            modifiedFields.markModified(fieldModifiedScope);
            modified = true;
        }
        
        if (span.markDiffModified(v.span)) {
            modifiedFields.markModified(fieldModifiedSpan);
            modified = true;
        }
        
        return modified;
    }

    public Spans clone() {
        Spans cpy = new Spans();
        cpy.envelope = this.envelope.clone();
        cpy.resource = this.resource.clone();
        cpy.scope = this.scope.clone();
        cpy.span = this.span.clone();
        return cpy;
    }

    // ByteSize returns approximate memory usage in bytes. Used to calculate memory used by dictionaries.
    int byteSize() {
        int size = 0; // TODO: calculate the size of this object.
        size += this.envelope.byteSize();
        size += this.resource.byteSize();
        size += this.scope.byteSize();
        size += this.span.byteSize();
        return size;
    }

    // Performs a deep copy from src to dst.
    public void copyFrom(Spans src) {
        envelope.copyFrom(src.envelope);
        resource.copyFrom(src.resource);
        scope.copyFrom(src.scope);
        span.copyFrom(src.span);
    }

    // equals performs deep comparison and returns true if struct is equal to val.
    public boolean equals(Spans right) {
        // Compare Envelope field.
        if (!this.envelope.equals(right.envelope)) {
            return false;
        }
        // Compare Resource field.
        if (!this.resource.equals(right.resource)) {
            return false;
        }
        // Compare Scope field.
        if (!this.scope.equals(right.scope)) {
            return false;
        }
        // Compare Span field.
        if (!this.span.equals(right.span)) {
            return false;
        }
        return true;
    }

    public static boolean equals(Spans left, Spans right) {
        return left.equals(right);
    }

    // compare performs deep comparison and returns an integer that
    // will be 0 if left == right, negative if left < right, positive if left > right.
    public static int compare(Spans left, Spans right) {
        if (left == null) {
            if (right == null) {
                return 0;
            }
            return -1;
        }
        if (right == null) {
            return 1;
        }
        int c;
        
        // Compare Envelope field.
        c = Envelope.compare(left.envelope, right.envelope);
        if (c != 0) {
            return c;
        }
        
        // Compare Resource field.
        c = Resource.compare(left.resource, right.resource);
        if (c != 0) {
            return c;
        }
        
        // Compare Scope field.
        c = Scope.compare(left.scope, right.scope);
        if (c != 0) {
            return c;
        }
        
        // Compare Span field.
        c = Span.compare(left.span, right.span);
        if (c != 0) {
            return c;
        }
        
        return 0;
    }

    // mutateRandom mutates fields in a random, deterministic manner using random as a deterministic generator.
    void mutateRandom(Random random) {
        final int fieldCount = Math.max(4,2); // At least 2 to ensure we don't recurse infinitely if there is only 1 field.
        
        if (random.nextInt(fieldCount) == 0) {
            this.envelope.mutateRandom(random);
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.resource.mutateRandom(random);
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.scope.mutateRandom(random);
        }
        
        if (random.nextInt(fieldCount) == 0) {
            this.span.mutateRandom(random);
        }
        
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return equals((Spans)o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            envelope,
            resource,
            scope,
            span
        );
    }

    
    static final byte[] wireSchemaBytes = new byte[]{ 0x09, 0x08, 0x41, 0x6E, 0x79, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x07, 0x08, 0x45, 0x6E, 0x76, 0x65, 0x6C, 0x6F, 0x70, 0x65, 0x01, 0x05, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x04, 0x04, 0x4C, 0x69, 0x6E, 0x6B, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x03, 0x05, 0x53, 0x63, 0x6F, 0x70, 0x65, 0x05, 0x04, 0x53, 0x70, 0x61, 0x6E, 0x0E, 0x0A, 0x53, 0x70, 0x61, 0x6E, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x02, 0x05, 0x53, 0x70, 0x61, 0x6E, 0x73, 0x04 };

    static WireSchema wireSchema() throws IOException {
        WireSchema w = new WireSchema();
        w.deserialize(new ByteArrayInputStream(wireSchemaBytes));
        return w;
    }
    
}
