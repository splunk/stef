// Code generated by stefgen. DO NOT EDIT.
// filepath: /Users/tnajaryan/work/repos/stef/stefgen/templates/java/allwriterstate.java.tmpl
package com.example.oteltef;

import net.stef.SizeLimiter;
import net.stef.WriterOptions;
import net.stef.codecs.*;
import net.stef.schema.WireSchemaIter;

public class WriterState {
    private final CommonFieldCounts structFieldCounts = new CommonFieldCounts();
    private SizeLimiter limiter;

    // Dictionaries
    final StringEncoderDict AnyValueString;
    final StringEncoderDict AttributeKey;
    final MetricEncoderDict Metric;
    final StringEncoderDict MetricDescription;
    final StringEncoderDict MetricName;
    final StringEncoderDict MetricUnit;
    final ResourceEncoderDict Resource;
    final StringEncoderDict SchemaURL;
    final ScopeEncoderDict Scope;
    final StringEncoderDict ScopeName;
    final StringEncoderDict ScopeVersion;
    final StringEncoderDict SpanEventName;
    final StringEncoderDict SpanName;
    

    // Encoders
    AnyValueEncoder AnyValueEncoder;
    AnyValueArrayEncoder AnyValueArrayEncoder;
    AttributesEncoder AttributesEncoder;
    EnvelopeEncoder EnvelopeEncoder;
    EnvelopeAttributesEncoder EnvelopeAttributesEncoder;
    EventEncoder EventEncoder;
    EventArrayEncoder EventArrayEncoder;
    ExemplarEncoder ExemplarEncoder;
    ExemplarArrayEncoder ExemplarArrayEncoder;
    ExemplarValueEncoder ExemplarValueEncoder;
    ExpHistogramBucketsEncoder ExpHistogramBucketsEncoder;
    ExpHistogramValueEncoder ExpHistogramValueEncoder;
    Float64ArrayEncoder Float64ArrayEncoder;
    HistogramValueEncoder HistogramValueEncoder;
    Int64ArrayEncoder Int64ArrayEncoder;
    KeyValueListEncoder KeyValueListEncoder;
    LinkEncoder LinkEncoder;
    LinkArrayEncoder LinkArrayEncoder;
    MetricEncoder MetricEncoder;
    MetricsEncoder MetricsEncoder;
    PointEncoder PointEncoder;
    PointValueEncoder PointValueEncoder;
    QuantileValueEncoder QuantileValueEncoder;
    QuantileValueArrayEncoder QuantileValueArrayEncoder;
    ResourceEncoder ResourceEncoder;
    ScopeEncoder ScopeEncoder;
    SpanEncoder SpanEncoder;
    SpanStatusEncoder SpanStatusEncoder;
    SpansEncoder SpansEncoder;
    SummaryValueEncoder SummaryValueEncoder;
    Uint64ArrayEncoder Uint64ArrayEncoder;
    

    public WriterState() {
        limiter = new SizeLimiter();
        AnyValueString = new StringEncoderDict();
        AttributeKey = new StringEncoderDict();
        Metric = new MetricEncoderDict();
        MetricDescription = new StringEncoderDict();
        MetricName = new StringEncoderDict();
        MetricUnit = new StringEncoderDict();
        Resource = new ResourceEncoderDict();
        SchemaURL = new StringEncoderDict();
        Scope = new ScopeEncoderDict();
        ScopeName = new StringEncoderDict();
        ScopeVersion = new StringEncoderDict();
        SpanEventName = new StringEncoderDict();
        SpanName = new StringEncoderDict();
        
    }

    public void init(WriterOptions opts) {
        limiter.init(opts);
        structFieldCounts.init(opts.getSchema());

        // Init dictionaries
        AnyValueString.init(limiter);
        AttributeKey.init(limiter);
        Metric.init(limiter);
        MetricDescription.init(limiter);
        MetricName.init(limiter);
        MetricUnit.init(limiter);
        Resource.init(limiter);
        SchemaURL.init(limiter);
        Scope.init(limiter);
        ScopeName.init(limiter);
        ScopeVersion.init(limiter);
        SpanEventName.init(limiter);
        SpanName.init(limiter);
        
    }

    public void resetDicts() {
        limiter.resetDict();
        AnyValueString.reset();
        AttributeKey.reset();
        Metric.reset();
        MetricDescription.reset();
        MetricName.reset();
        MetricUnit.reset();
        Resource.reset();
        SchemaURL.reset();
        Scope.reset();
        ScopeName.reset();
        ScopeVersion.reset();
        SpanEventName.reset();
        SpanName.reset();
        
    }

    // Getters and setters for overrideSchema
    public CommonFieldCounts getStructFieldCounts() {
        return structFieldCounts;
    }

    public SizeLimiter getLimiter() {
        return limiter;
    }
}
