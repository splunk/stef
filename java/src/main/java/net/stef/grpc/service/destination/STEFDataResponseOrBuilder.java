// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: destination.proto
// Protobuf Java Version: 4.29.3

package net.stef.grpc.service.destination;

public interface STEFDataResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:STEFDataResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * ack_record_id acknowledges receipt of STEF data
   * with record_id &lt;= ack_record_id.
   *
   * The client must be ready to re-connect and re-send unacknowledged
   * metric data in case of disconnection or other failures. When reconnecting
   * after failure, the STEF stream is restarted and the original unacknowledged
   * metric data is re-encoded again (since encoding depends on the state of the
   * connection).
   * </pre>
   *
   * <code>uint64 ack_record_id = 1;</code>
   * @return The ackRecordId.
   */
  long getAckRecordId();

  /**
   * <pre>
   * Record id of STEF data items that the destination was not able to
   * read or validate. If the client retries sending it MUST NOT send the data
   * with specified record ids again. All ids in all specified ranges are bad.
   * It is expected that all from and to ids in the ranges are smaller or equal
   * to ack_record_id.
   * This field is optional. When empty it means there is no bad data,
   * all data up to ack_record_id was successfully processed.
   * </pre>
   *
   * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
   */
  java.util.List<net.stef.grpc.service.destination.STEFIDRange> 
      getBadDataRecordIdRangesList();
  /**
   * <pre>
   * Record id of STEF data items that the destination was not able to
   * read or validate. If the client retries sending it MUST NOT send the data
   * with specified record ids again. All ids in all specified ranges are bad.
   * It is expected that all from and to ids in the ranges are smaller or equal
   * to ack_record_id.
   * This field is optional. When empty it means there is no bad data,
   * all data up to ack_record_id was successfully processed.
   * </pre>
   *
   * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
   */
  net.stef.grpc.service.destination.STEFIDRange getBadDataRecordIdRanges(int index);
  /**
   * <pre>
   * Record id of STEF data items that the destination was not able to
   * read or validate. If the client retries sending it MUST NOT send the data
   * with specified record ids again. All ids in all specified ranges are bad.
   * It is expected that all from and to ids in the ranges are smaller or equal
   * to ack_record_id.
   * This field is optional. When empty it means there is no bad data,
   * all data up to ack_record_id was successfully processed.
   * </pre>
   *
   * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
   */
  int getBadDataRecordIdRangesCount();
  /**
   * <pre>
   * Record id of STEF data items that the destination was not able to
   * read or validate. If the client retries sending it MUST NOT send the data
   * with specified record ids again. All ids in all specified ranges are bad.
   * It is expected that all from and to ids in the ranges are smaller or equal
   * to ack_record_id.
   * This field is optional. When empty it means there is no bad data,
   * all data up to ack_record_id was successfully processed.
   * </pre>
   *
   * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
   */
  java.util.List<? extends net.stef.grpc.service.destination.STEFIDRangeOrBuilder> 
      getBadDataRecordIdRangesOrBuilderList();
  /**
   * <pre>
   * Record id of STEF data items that the destination was not able to
   * read or validate. If the client retries sending it MUST NOT send the data
   * with specified record ids again. All ids in all specified ranges are bad.
   * It is expected that all from and to ids in the ranges are smaller or equal
   * to ack_record_id.
   * This field is optional. When empty it means there is no bad data,
   * all data up to ack_record_id was successfully processed.
   * </pre>
   *
   * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
   */
  net.stef.grpc.service.destination.STEFIDRangeOrBuilder getBadDataRecordIdRangesOrBuilder(
      int index);
}
