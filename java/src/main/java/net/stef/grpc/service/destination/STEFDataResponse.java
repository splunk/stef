// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: destination.proto
// Protobuf Java Version: 4.29.3

package net.stef.grpc.service.destination;

/**
 * Protobuf type {@code STEFDataResponse}
 */
public final class STEFDataResponse extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:STEFDataResponse)
    STEFDataResponseOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      STEFDataResponse.class.getName());
  }
  // Use STEFDataResponse.newBuilder() to construct.
  private STEFDataResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private STEFDataResponse() {
    badDataRecordIdRanges_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return net.stef.grpc.service.destination.Destination.internal_static_STEFDataResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return net.stef.grpc.service.destination.Destination.internal_static_STEFDataResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            net.stef.grpc.service.destination.STEFDataResponse.class, net.stef.grpc.service.destination.STEFDataResponse.Builder.class);
  }

  public static final int ACK_RECORD_ID_FIELD_NUMBER = 1;
  private long ackRecordId_ = 0L;
  /**
   * <pre>
   * ack_record_id acknowledges receipt of STEF data
   * with record_id &lt;= ack_record_id.
   *
   * The client must be ready to re-connect and re-send unacknowledged
   * metric data in case of disconnection or other failures. When reconnecting
   * after failure, the STEF stream is restarted and the original unacknowledged
   * metric data is re-encoded again (since encoding depends on the state of the
   * connection).
   * </pre>
   *
   * <code>uint64 ack_record_id = 1;</code>
   * @return The ackRecordId.
   */
  @java.lang.Override
  public long getAckRecordId() {
    return ackRecordId_;
  }

  public static final int BAD_DATA_RECORD_ID_RANGES_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<net.stef.grpc.service.destination.STEFIDRange> badDataRecordIdRanges_;
  /**
   * <pre>
   * Record id of STEF data items that the destination was not able to
   * read or validate. If the client retries sending it MUST NOT send the data
   * with specified record ids again. All ids in all specified ranges are bad.
   * It is expected that all from and to ids in the ranges are smaller or equal
   * to ack_record_id.
   * This field is optional. When empty it means there is no bad data,
   * all data up to ack_record_id was successfully processed.
   * </pre>
   *
   * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
   */
  @java.lang.Override
  public java.util.List<net.stef.grpc.service.destination.STEFIDRange> getBadDataRecordIdRangesList() {
    return badDataRecordIdRanges_;
  }
  /**
   * <pre>
   * Record id of STEF data items that the destination was not able to
   * read or validate. If the client retries sending it MUST NOT send the data
   * with specified record ids again. All ids in all specified ranges are bad.
   * It is expected that all from and to ids in the ranges are smaller or equal
   * to ack_record_id.
   * This field is optional. When empty it means there is no bad data,
   * all data up to ack_record_id was successfully processed.
   * </pre>
   *
   * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends net.stef.grpc.service.destination.STEFIDRangeOrBuilder> 
      getBadDataRecordIdRangesOrBuilderList() {
    return badDataRecordIdRanges_;
  }
  /**
   * <pre>
   * Record id of STEF data items that the destination was not able to
   * read or validate. If the client retries sending it MUST NOT send the data
   * with specified record ids again. All ids in all specified ranges are bad.
   * It is expected that all from and to ids in the ranges are smaller or equal
   * to ack_record_id.
   * This field is optional. When empty it means there is no bad data,
   * all data up to ack_record_id was successfully processed.
   * </pre>
   *
   * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
   */
  @java.lang.Override
  public int getBadDataRecordIdRangesCount() {
    return badDataRecordIdRanges_.size();
  }
  /**
   * <pre>
   * Record id of STEF data items that the destination was not able to
   * read or validate. If the client retries sending it MUST NOT send the data
   * with specified record ids again. All ids in all specified ranges are bad.
   * It is expected that all from and to ids in the ranges are smaller or equal
   * to ack_record_id.
   * This field is optional. When empty it means there is no bad data,
   * all data up to ack_record_id was successfully processed.
   * </pre>
   *
   * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
   */
  @java.lang.Override
  public net.stef.grpc.service.destination.STEFIDRange getBadDataRecordIdRanges(int index) {
    return badDataRecordIdRanges_.get(index);
  }
  /**
   * <pre>
   * Record id of STEF data items that the destination was not able to
   * read or validate. If the client retries sending it MUST NOT send the data
   * with specified record ids again. All ids in all specified ranges are bad.
   * It is expected that all from and to ids in the ranges are smaller or equal
   * to ack_record_id.
   * This field is optional. When empty it means there is no bad data,
   * all data up to ack_record_id was successfully processed.
   * </pre>
   *
   * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
   */
  @java.lang.Override
  public net.stef.grpc.service.destination.STEFIDRangeOrBuilder getBadDataRecordIdRangesOrBuilder(
      int index) {
    return badDataRecordIdRanges_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (ackRecordId_ != 0L) {
      output.writeUInt64(1, ackRecordId_);
    }
    for (int i = 0; i < badDataRecordIdRanges_.size(); i++) {
      output.writeMessage(2, badDataRecordIdRanges_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (ackRecordId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(1, ackRecordId_);
    }
    for (int i = 0; i < badDataRecordIdRanges_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, badDataRecordIdRanges_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof net.stef.grpc.service.destination.STEFDataResponse)) {
      return super.equals(obj);
    }
    net.stef.grpc.service.destination.STEFDataResponse other = (net.stef.grpc.service.destination.STEFDataResponse) obj;

    if (getAckRecordId()
        != other.getAckRecordId()) return false;
    if (!getBadDataRecordIdRangesList()
        .equals(other.getBadDataRecordIdRangesList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ACK_RECORD_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getAckRecordId());
    if (getBadDataRecordIdRangesCount() > 0) {
      hash = (37 * hash) + BAD_DATA_RECORD_ID_RANGES_FIELD_NUMBER;
      hash = (53 * hash) + getBadDataRecordIdRangesList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static net.stef.grpc.service.destination.STEFDataResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.stef.grpc.service.destination.STEFDataResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.stef.grpc.service.destination.STEFDataResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.stef.grpc.service.destination.STEFDataResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.stef.grpc.service.destination.STEFDataResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.stef.grpc.service.destination.STEFDataResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.stef.grpc.service.destination.STEFDataResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static net.stef.grpc.service.destination.STEFDataResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static net.stef.grpc.service.destination.STEFDataResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static net.stef.grpc.service.destination.STEFDataResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.stef.grpc.service.destination.STEFDataResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static net.stef.grpc.service.destination.STEFDataResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(net.stef.grpc.service.destination.STEFDataResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code STEFDataResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:STEFDataResponse)
      net.stef.grpc.service.destination.STEFDataResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.stef.grpc.service.destination.Destination.internal_static_STEFDataResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.stef.grpc.service.destination.Destination.internal_static_STEFDataResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              net.stef.grpc.service.destination.STEFDataResponse.class, net.stef.grpc.service.destination.STEFDataResponse.Builder.class);
    }

    // Construct using net.stef.grpc.service.destination.STEFDataResponse.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      ackRecordId_ = 0L;
      if (badDataRecordIdRangesBuilder_ == null) {
        badDataRecordIdRanges_ = java.util.Collections.emptyList();
      } else {
        badDataRecordIdRanges_ = null;
        badDataRecordIdRangesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return net.stef.grpc.service.destination.Destination.internal_static_STEFDataResponse_descriptor;
    }

    @java.lang.Override
    public net.stef.grpc.service.destination.STEFDataResponse getDefaultInstanceForType() {
      return net.stef.grpc.service.destination.STEFDataResponse.getDefaultInstance();
    }

    @java.lang.Override
    public net.stef.grpc.service.destination.STEFDataResponse build() {
      net.stef.grpc.service.destination.STEFDataResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public net.stef.grpc.service.destination.STEFDataResponse buildPartial() {
      net.stef.grpc.service.destination.STEFDataResponse result = new net.stef.grpc.service.destination.STEFDataResponse(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(net.stef.grpc.service.destination.STEFDataResponse result) {
      if (badDataRecordIdRangesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          badDataRecordIdRanges_ = java.util.Collections.unmodifiableList(badDataRecordIdRanges_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.badDataRecordIdRanges_ = badDataRecordIdRanges_;
      } else {
        result.badDataRecordIdRanges_ = badDataRecordIdRangesBuilder_.build();
      }
    }

    private void buildPartial0(net.stef.grpc.service.destination.STEFDataResponse result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.ackRecordId_ = ackRecordId_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof net.stef.grpc.service.destination.STEFDataResponse) {
        return mergeFrom((net.stef.grpc.service.destination.STEFDataResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(net.stef.grpc.service.destination.STEFDataResponse other) {
      if (other == net.stef.grpc.service.destination.STEFDataResponse.getDefaultInstance()) return this;
      if (other.getAckRecordId() != 0L) {
        setAckRecordId(other.getAckRecordId());
      }
      if (badDataRecordIdRangesBuilder_ == null) {
        if (!other.badDataRecordIdRanges_.isEmpty()) {
          if (badDataRecordIdRanges_.isEmpty()) {
            badDataRecordIdRanges_ = other.badDataRecordIdRanges_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBadDataRecordIdRangesIsMutable();
            badDataRecordIdRanges_.addAll(other.badDataRecordIdRanges_);
          }
          onChanged();
        }
      } else {
        if (!other.badDataRecordIdRanges_.isEmpty()) {
          if (badDataRecordIdRangesBuilder_.isEmpty()) {
            badDataRecordIdRangesBuilder_.dispose();
            badDataRecordIdRangesBuilder_ = null;
            badDataRecordIdRanges_ = other.badDataRecordIdRanges_;
            bitField0_ = (bitField0_ & ~0x00000002);
            badDataRecordIdRangesBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getBadDataRecordIdRangesFieldBuilder() : null;
          } else {
            badDataRecordIdRangesBuilder_.addAllMessages(other.badDataRecordIdRanges_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              ackRecordId_ = input.readUInt64();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              net.stef.grpc.service.destination.STEFIDRange m =
                  input.readMessage(
                      net.stef.grpc.service.destination.STEFIDRange.parser(),
                      extensionRegistry);
              if (badDataRecordIdRangesBuilder_ == null) {
                ensureBadDataRecordIdRangesIsMutable();
                badDataRecordIdRanges_.add(m);
              } else {
                badDataRecordIdRangesBuilder_.addMessage(m);
              }
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private long ackRecordId_ ;
    /**
     * <pre>
     * ack_record_id acknowledges receipt of STEF data
     * with record_id &lt;= ack_record_id.
     *
     * The client must be ready to re-connect and re-send unacknowledged
     * metric data in case of disconnection or other failures. When reconnecting
     * after failure, the STEF stream is restarted and the original unacknowledged
     * metric data is re-encoded again (since encoding depends on the state of the
     * connection).
     * </pre>
     *
     * <code>uint64 ack_record_id = 1;</code>
     * @return The ackRecordId.
     */
    @java.lang.Override
    public long getAckRecordId() {
      return ackRecordId_;
    }
    /**
     * <pre>
     * ack_record_id acknowledges receipt of STEF data
     * with record_id &lt;= ack_record_id.
     *
     * The client must be ready to re-connect and re-send unacknowledged
     * metric data in case of disconnection or other failures. When reconnecting
     * after failure, the STEF stream is restarted and the original unacknowledged
     * metric data is re-encoded again (since encoding depends on the state of the
     * connection).
     * </pre>
     *
     * <code>uint64 ack_record_id = 1;</code>
     * @param value The ackRecordId to set.
     * @return This builder for chaining.
     */
    public Builder setAckRecordId(long value) {

      ackRecordId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ack_record_id acknowledges receipt of STEF data
     * with record_id &lt;= ack_record_id.
     *
     * The client must be ready to re-connect and re-send unacknowledged
     * metric data in case of disconnection or other failures. When reconnecting
     * after failure, the STEF stream is restarted and the original unacknowledged
     * metric data is re-encoded again (since encoding depends on the state of the
     * connection).
     * </pre>
     *
     * <code>uint64 ack_record_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearAckRecordId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      ackRecordId_ = 0L;
      onChanged();
      return this;
    }

    private java.util.List<net.stef.grpc.service.destination.STEFIDRange> badDataRecordIdRanges_ =
      java.util.Collections.emptyList();
    private void ensureBadDataRecordIdRangesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        badDataRecordIdRanges_ = new java.util.ArrayList<net.stef.grpc.service.destination.STEFIDRange>(badDataRecordIdRanges_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        net.stef.grpc.service.destination.STEFIDRange, net.stef.grpc.service.destination.STEFIDRange.Builder, net.stef.grpc.service.destination.STEFIDRangeOrBuilder> badDataRecordIdRangesBuilder_;

    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public java.util.List<net.stef.grpc.service.destination.STEFIDRange> getBadDataRecordIdRangesList() {
      if (badDataRecordIdRangesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(badDataRecordIdRanges_);
      } else {
        return badDataRecordIdRangesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public int getBadDataRecordIdRangesCount() {
      if (badDataRecordIdRangesBuilder_ == null) {
        return badDataRecordIdRanges_.size();
      } else {
        return badDataRecordIdRangesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public net.stef.grpc.service.destination.STEFIDRange getBadDataRecordIdRanges(int index) {
      if (badDataRecordIdRangesBuilder_ == null) {
        return badDataRecordIdRanges_.get(index);
      } else {
        return badDataRecordIdRangesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public Builder setBadDataRecordIdRanges(
        int index, net.stef.grpc.service.destination.STEFIDRange value) {
      if (badDataRecordIdRangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBadDataRecordIdRangesIsMutable();
        badDataRecordIdRanges_.set(index, value);
        onChanged();
      } else {
        badDataRecordIdRangesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public Builder setBadDataRecordIdRanges(
        int index, net.stef.grpc.service.destination.STEFIDRange.Builder builderForValue) {
      if (badDataRecordIdRangesBuilder_ == null) {
        ensureBadDataRecordIdRangesIsMutable();
        badDataRecordIdRanges_.set(index, builderForValue.build());
        onChanged();
      } else {
        badDataRecordIdRangesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public Builder addBadDataRecordIdRanges(net.stef.grpc.service.destination.STEFIDRange value) {
      if (badDataRecordIdRangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBadDataRecordIdRangesIsMutable();
        badDataRecordIdRanges_.add(value);
        onChanged();
      } else {
        badDataRecordIdRangesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public Builder addBadDataRecordIdRanges(
        int index, net.stef.grpc.service.destination.STEFIDRange value) {
      if (badDataRecordIdRangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBadDataRecordIdRangesIsMutable();
        badDataRecordIdRanges_.add(index, value);
        onChanged();
      } else {
        badDataRecordIdRangesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public Builder addBadDataRecordIdRanges(
        net.stef.grpc.service.destination.STEFIDRange.Builder builderForValue) {
      if (badDataRecordIdRangesBuilder_ == null) {
        ensureBadDataRecordIdRangesIsMutable();
        badDataRecordIdRanges_.add(builderForValue.build());
        onChanged();
      } else {
        badDataRecordIdRangesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public Builder addBadDataRecordIdRanges(
        int index, net.stef.grpc.service.destination.STEFIDRange.Builder builderForValue) {
      if (badDataRecordIdRangesBuilder_ == null) {
        ensureBadDataRecordIdRangesIsMutable();
        badDataRecordIdRanges_.add(index, builderForValue.build());
        onChanged();
      } else {
        badDataRecordIdRangesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public Builder addAllBadDataRecordIdRanges(
        java.lang.Iterable<? extends net.stef.grpc.service.destination.STEFIDRange> values) {
      if (badDataRecordIdRangesBuilder_ == null) {
        ensureBadDataRecordIdRangesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, badDataRecordIdRanges_);
        onChanged();
      } else {
        badDataRecordIdRangesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public Builder clearBadDataRecordIdRanges() {
      if (badDataRecordIdRangesBuilder_ == null) {
        badDataRecordIdRanges_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        badDataRecordIdRangesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public Builder removeBadDataRecordIdRanges(int index) {
      if (badDataRecordIdRangesBuilder_ == null) {
        ensureBadDataRecordIdRangesIsMutable();
        badDataRecordIdRanges_.remove(index);
        onChanged();
      } else {
        badDataRecordIdRangesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public net.stef.grpc.service.destination.STEFIDRange.Builder getBadDataRecordIdRangesBuilder(
        int index) {
      return getBadDataRecordIdRangesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public net.stef.grpc.service.destination.STEFIDRangeOrBuilder getBadDataRecordIdRangesOrBuilder(
        int index) {
      if (badDataRecordIdRangesBuilder_ == null) {
        return badDataRecordIdRanges_.get(index);  } else {
        return badDataRecordIdRangesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public java.util.List<? extends net.stef.grpc.service.destination.STEFIDRangeOrBuilder> 
         getBadDataRecordIdRangesOrBuilderList() {
      if (badDataRecordIdRangesBuilder_ != null) {
        return badDataRecordIdRangesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(badDataRecordIdRanges_);
      }
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public net.stef.grpc.service.destination.STEFIDRange.Builder addBadDataRecordIdRangesBuilder() {
      return getBadDataRecordIdRangesFieldBuilder().addBuilder(
          net.stef.grpc.service.destination.STEFIDRange.getDefaultInstance());
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public net.stef.grpc.service.destination.STEFIDRange.Builder addBadDataRecordIdRangesBuilder(
        int index) {
      return getBadDataRecordIdRangesFieldBuilder().addBuilder(
          index, net.stef.grpc.service.destination.STEFIDRange.getDefaultInstance());
    }
    /**
     * <pre>
     * Record id of STEF data items that the destination was not able to
     * read or validate. If the client retries sending it MUST NOT send the data
     * with specified record ids again. All ids in all specified ranges are bad.
     * It is expected that all from and to ids in the ranges are smaller or equal
     * to ack_record_id.
     * This field is optional. When empty it means there is no bad data,
     * all data up to ack_record_id was successfully processed.
     * </pre>
     *
     * <code>repeated .STEFIDRange bad_data_record_id_ranges = 2;</code>
     */
    public java.util.List<net.stef.grpc.service.destination.STEFIDRange.Builder> 
         getBadDataRecordIdRangesBuilderList() {
      return getBadDataRecordIdRangesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        net.stef.grpc.service.destination.STEFIDRange, net.stef.grpc.service.destination.STEFIDRange.Builder, net.stef.grpc.service.destination.STEFIDRangeOrBuilder> 
        getBadDataRecordIdRangesFieldBuilder() {
      if (badDataRecordIdRangesBuilder_ == null) {
        badDataRecordIdRangesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            net.stef.grpc.service.destination.STEFIDRange, net.stef.grpc.service.destination.STEFIDRange.Builder, net.stef.grpc.service.destination.STEFIDRangeOrBuilder>(
                badDataRecordIdRanges_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        badDataRecordIdRanges_ = null;
      }
      return badDataRecordIdRangesBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:STEFDataResponse)
  }

  // @@protoc_insertion_point(class_scope:STEFDataResponse)
  private static final net.stef.grpc.service.destination.STEFDataResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new net.stef.grpc.service.destination.STEFDataResponse();
  }

  public static net.stef.grpc.service.destination.STEFDataResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<STEFDataResponse>
      PARSER = new com.google.protobuf.AbstractParser<STEFDataResponse>() {
    @java.lang.Override
    public STEFDataResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<STEFDataResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<STEFDataResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public net.stef.grpc.service.destination.STEFDataResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

