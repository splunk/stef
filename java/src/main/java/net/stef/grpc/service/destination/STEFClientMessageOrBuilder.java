// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: destination.proto
// Protobuf Java Version: 4.29.3

package net.stef.grpc.service.destination;

public interface STEFClientMessageOrBuilder extends
    // @@protoc_insertion_point(interface_extends:STEFClientMessage)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The client MUST set first_message field in the first STEFClientMessage sent.
   * All other fields MUST be unset when first_message is set.
   * All subsequent messages MUST have first_message unset.
   * </pre>
   *
   * <code>.STEFClientFirstMessage first_message = 1;</code>
   * @return Whether the firstMessage field is set.
   */
  boolean hasFirstMessage();
  /**
   * <pre>
   * The client MUST set first_message field in the first STEFClientMessage sent.
   * All other fields MUST be unset when first_message is set.
   * All subsequent messages MUST have first_message unset.
   * </pre>
   *
   * <code>.STEFClientFirstMessage first_message = 1;</code>
   * @return The firstMessage.
   */
  net.stef.grpc.service.destination.STEFClientFirstMessage getFirstMessage();
  /**
   * <pre>
   * The client MUST set first_message field in the first STEFClientMessage sent.
   * All other fields MUST be unset when first_message is set.
   * All subsequent messages MUST have first_message unset.
   * </pre>
   *
   * <code>.STEFClientFirstMessage first_message = 1;</code>
   */
  net.stef.grpc.service.destination.STEFClientFirstMessageOrBuilder getFirstMessageOrBuilder();

  /**
   * <pre>
   * The bytes of STEF stream. The recipient is responsible for assembling the
   * STEF data stream from a sequence of messages in the order the
   * messages are received and decoding the STEF data stream.
   *
   * See specification.md for specification of STEF stream.
   * </pre>
   *
   * <code>bytes stef_bytes = 2;</code>
   * @return The stefBytes.
   */
  com.google.protobuf.ByteString getStefBytes();

  /**
   * <pre>
   * Indicates that the last byte of tef_bytes is also an end of a chunk (a STEF header or
   * STEF frame). This can be used by recipients to accumulates bytes until the end of
   * the chunk is encountered and only then start decoding the chunk.
   * Clients MUST ensure they mark this field true at least once in a while otherwise
   * recipients may never start decoding the data.
   * </pre>
   *
   * <code>bool is_end_of_chunk = 3;</code>
   * @return The isEndOfChunk.
   */
  boolean getIsEndOfChunk();
}
