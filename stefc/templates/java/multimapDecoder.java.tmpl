package {{ .PackageName }};

import net.stef.BytesReader;
import net.stef.Limits;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

// Decoder for {{ .MultimapName }}
class {{ .MultimapName }}Decoder {
    private final BytesReader buf = new BytesReader();
    private ReadableColumn column;
    private {{.Key.Type.EncoderType}}Decoder keyDecoder;
    private {{.Value.Type.EncoderType}}Decoder valueDecoder;
    private boolean isKeyRecursive = false;
    private boolean isValueRecursive = false;

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        this.column = columns.getColumn();

        // Remember this encoder in the state so that we can detect recursion.
        if (state.{{ .MultimapName }}Decoder != null) {
            throw new IllegalStateException("cannot initialize {{ .MultimapName }}Decoder: already initialized");
        }
        state.{{ .MultimapName }}Decoder = this;
        try {
            {{- if .Key.Type.IsPrimitive}}
            keyDecoder = new {{.Key.Type.EncoderType}}Decoder();
            keyDecoder.init({{if .Key.Type.DictName}}state.{{.Key.Type.DictName}}, {{end}}columns.addSubColumn());
            {{- else}}
            if (state.{{.Key.Type.EncoderType}}Decoder != null) {
                // Recursion detected, use the existing encoder.
                keyDecoder = state.{{.Key.Type.EncoderType}}Decoder;
                isKeyRecursive = true;
            } else {
                keyDecoder = new {{.Key.Type.EncoderType}}Decoder();
                keyDecoder.init(state, columns.addSubColumn());
            }
            {{- end}}
            {{- if .Value.Type.IsPrimitive}}
            valueDecoder = new {{.Value.Type.EncoderType}}Decoder();
            valueDecoder.init({{if .Value.Type.DictName}}state.{{.Value.Type.DictName}}, {{end}}columns.addSubColumn());
            {{- else}}
            if (state.{{.Value.Type.EncoderType}}Decoder != null) {
                // Recursion detected, use the existing encoder.
                valueDecoder = state.{{.Value.Type.EncoderType}}Decoder;
                isValueRecursive = true;
            } else {
                valueDecoder = new {{.Value.Type.EncoderType}}Decoder();
                valueDecoder.init(state, columns.addSubColumn());
            }
            {{- end}}
        } finally {
            state.{{ .MultimapName }}Decoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        buf.reset(column.getData());
        if (!isKeyRecursive) {
            keyDecoder.continueDecoding();
        }
        if (!isValueRecursive) {
            valueDecoder.continueDecoding();
        }
    }

    public void reset() {
        if (!isKeyRecursive) {
            keyDecoder.reset();
        }
        if (!isValueRecursive) {
            valueDecoder.reset();
        }
    }

    public {{ .MultimapName }} decode({{ .MultimapName }} dst) throws IOException {
        long countOrChangedValues = buf.readUvarint();
        if (countOrChangedValues == 0) {
       		// Nothing changed.
            return dst;
        }
        if ((countOrChangedValues & 0b1) == 0) {
            decodeValuesOnly(countOrChangedValues >>> 1, dst);
            return dst;
        }
        if ((countOrChangedValues & 0b1) == 0b1) {
            decodeFull((int)(countOrChangedValues >>> 1), dst);
            return dst;
        }
        throw new RuntimeException("Multimap decode error");
    }

    private void decodeValuesOnly(long changedValuesBits, {{ .MultimapName }} dst) throws IOException {
        // Decode changed values
        long bitToRead = 1L;
        for (int i = 0; i<dst.elemsLen; i++) {
            if ((bitToRead & changedValuesBits) != 0) {
                // Value is changed, decode it.
                dst.elems[i].value = valueDecoder.decode({{if not .Value.Type.IsPrimitive}}dst.elems[i].value{{end}});
            }
            bitToRead <<= 1;
        }
    }

    private void decodeFull(int count, {{ .MultimapName }} dst) throws IOException {
        if (count < 0 || count >= Limits.MultimapElemCountLimit) {
            throw new RuntimeException("Multimap decode error: invalid count " + count);
        }
        
        dst.ensureLen(count);

        // Decode values first.
        for (int i = 0; i < count; i++) {
            dst.elems[i].key = keyDecoder.decode({{if not .Key.Type.IsPrimitive }}dst.elems[i].key{{end}});
            dst.elems[i].value = valueDecoder.decode({{if not .Value.Type.IsPrimitive }}dst.elems[i].value{{end}});
        }
    }
}
