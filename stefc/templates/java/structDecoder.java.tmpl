// {{ .StructName }}Decoder implements decoding of {{ .StructName }}
package {{ .PackageName }};

import net.stef.BitsReader;
import net.stef.Helper;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class {{ .StructName }}Decoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private int fieldCount;
    {{if .OptionalFieldCount}}private int optionalFieldCount;{{end}}

    {{ range .Fields }}
    private {{ .Type.EncoderType }}Decoder {{.name}}Decoder;
    private boolean is{{.Name}}Recursive = false; // Indicates {{.Name}} field's type is recursive.
    {{- end }}
    {{if .DictName}}
    private {{ .StructName }}DecoderDict dict;
    {{end}}

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.{{.StructName}}Decoder != null) {
            throw new IllegalStateException("cannot initialize {{ .StructName }}Decoder: already initialized");
        }
        state.{{.StructName}}Decoder = this;

        try {
            fieldCount = state.getStructFieldCounts().get{{.StructName}}FieldCount();
            {{- if .OptionalFieldCount}}
            optionalFieldCount = Helper.optionalFieldCount({{printf "0b%b" .OptionalsMask}}, fieldCount);
            {{- end}}
            column = columns.getColumn();
            {{- if .DictName}}
            dict = state.{{.DictName}};
            {{- end}}
            {{ range $i,$e := .Fields }}
            if (this.fieldCount <= {{$i}}) {
                return; // {{.Name}} and subsequent fields are skipped.
            }
            {{- if .Type.IsPrimitive}}
            {{.name}}Decoder = new {{.Type.EncoderType}}Decoder();
            {{.name}}Decoder.init({{if .Type.DictName}}state.{{.Type.DictName}}, {{end}}columns.addSubColumn());
            {{- else}}
            if (state.{{.Type.EncoderType}}Decoder != null) {
                // Recursion detected, use the existing decoder.
                {{.name}}Decoder = state.{{.Type.EncoderType}}Decoder;
                is{{.Name}}Recursive = true; // Mark that we are using a recursive decoder.
            } else {
                {{.name}}Decoder = new {{.Type.EncoderType}}Decoder();
                {{.name}}Decoder.init(state, columns.addSubColumn());
            }
            {{- end}}
            {{- end }}
        } finally {
            state.{{.StructName}}Decoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        {{ range $i,$e := .Fields }}
        if (this.fieldCount <= {{$i}}) {
            return; // {{.Name}} and subsequent fields are skipped.
        }
        {{if not .IsPrimitive}}
        if (!is{{.Name}}Recursive) {
            {{.name}}Decoder.continueDecoding();
        }
        {{else}}{{.name}}Decoder.continueDecoding();{{end}}
        {{- end }}
    }

    public void reset() {
        {{ range $i, $e := .Fields }}
        if (fieldCount <= {{$i}}) {
            // {{.Name}} and all subsequent fields are skipped.
            return;
        }
        {{if not .IsPrimitive -}}
        if (!is{{.Name}}Recursive) {
            {{.name}}Decoder.reset();
        }
        {{- else -}}
        {{.name}}Decoder.reset();
        {{- end}}
        {{- end}}
    }

    public {{.StructName}} decode({{.StructName}} dstPtr) throws IOException {
        {{- if .DictName}}
        // Check if this is a dictionary-based decoding.
        int dictFlag = buf.readBit();
        if (dictFlag == 0) {
            long refNum = buf.readUvarintCompact();
            if (refNum >= dict.size()) {
                throw new IOException("Invalid refNum");
            }
            return dict.getByIndex((int)refNum);
        }

        // dstPtr is pointing to a element in the dictionary. We are not allowed
       	// to modify it. Make a clone of it and decode into the clone.
        {{.StructName}} val = dstPtr.clone();
        {{- else}}
        {{.StructName}} val = dstPtr;
        {{- end}}
        // Read bits that indicate which fields follow.
        val.modifiedFields.mask = buf.readBits(fieldCount);
        {{ if .OptionalFieldCount}}
        // Write bits to indicate which optional fields are set.
        val.optionalFieldsPresent = buf.readBits(optionalFieldCount);
        {{- end}}
        {{ range .Fields }}
        if ((val.modifiedFields.mask & {{ $.StructName }}.fieldModified{{.Name}}) != 0
            {{- if .Optional}} && (val.optionalFieldsPresent & {{ $.StructName }}.fieldPresent{{.Name}}) != 0{{end}}) {
            // Field is changed and is present, decode it.
            {{if not .Type.IsPrimitive -}}
            if (val.{{.name}} == null) {
                val.{{.name}} = new {{ .Type.Storage }}(val.modifiedFields, {{ $.StructName }}.fieldModified{{.Name}});
            }
            val.{{.name}} = {{.name}}Decoder.decode(val.{{.name}});
            {{- else -}}
            val.{{.name}} = {{.name}}Decoder.decode();
            {{- end}}
        }
        {{ end }}
        {{if .DictName}}
        dict.add(val);
        {{end}}
        return val;
    }
}

