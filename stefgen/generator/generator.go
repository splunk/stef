package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"os"
	"path"
	"strings"
	"text/template"

	"github.com/tigrannajaryan/stef/stef-go/schema"

	"github.com/tigrannajaryan/stef/stefgen/templates"
)

type Generator struct {
	OutputDir string

	// Buffer to accumulated generated file.
	outBuf  *bytes.Buffer
	lastErr error

	schema         *schema.Schema
	compiledSchema *genSchema

	fileName string
}

func (g *Generator) GenFile(schema *schema.Schema) error {
	var err error
	g.compiledSchema, err = compileSchema(schema)
	if err != nil {
		return err
	}

	g.schema = schema

	if err := g.oTemplate("common.go.tmpl", "common.go", make(map[string]any)); err != nil {
		return err
	}

	if err := g.oStructs(); err != nil {
		return err
	}

	if err := g.oMultimaps(); err != nil {
		return err
	}

	if err := g.oArrays(); err != nil {
		return err
	}

	if err := g.oDicts(); err != nil {
		return err
	}

	if err := g.oWriters(); err != nil {
		return err
	}

	if err := g.oReaders(); err != nil {
		return err
	}

	return g.lastErr
}

func (g *Generator) formatAndWriteToFile() error {
	destFileName := path.Base(strings.TrimSuffix(g.fileName, path.Ext(g.fileName))) + ".go"
	destFileName = path.Join(g.OutputDir, destFileName)
	destDir := path.Dir(destFileName)

	if err := os.MkdirAll(destDir, 0700); err != nil {
		return err
	}

	var err error
	f, err := os.Create(destFileName)
	if err != nil {
		return err
	}

	// Nicely format the generated Go code.
	goCode, err := format.Source(g.outBuf.Bytes())
	if err != nil {
		// Write unformatted code to have something to look at.
		_, err := f.Write(g.outBuf.Bytes())
		if err != nil {
			return err
		}
		// But still return an error.
		return err
	}

	_, err = f.Write(goCode)
	return err
}

func (g *Generator) oStartFile(fileName string) error {
	g.fileName = fileName
	fmt.Printf("Generating %s\n", fileName)
	g.outBuf = bytes.NewBuffer(nil)
	return g.lastErr
}

func (g *Generator) oTemplate(templateName, outputFileName string, data map[string]any) error {
	data["PackageName"] = g.compiledSchema.PackageName
	data["MainStructName"] = g.compiledSchema.MainStruct

	if err := g.oStartFile(outputFileName); err != nil {
		return err
	}

	t, err := template.ParseFS(templates.Templates, templateName)
	if err != nil {
		return err
	}

	contentBuf := bytes.NewBuffer(nil)

	err = t.Lookup(templateName).Execute(contentBuf, data)
	if err != nil {
		return err
	}

	content := "// Code generated by stefgen. DO NOT EDIT.\n" + contentBuf.String()
	_, err = io.WriteString(g.outBuf, content)
	if err != nil {
		g.lastErr = err
	}

	if err := g.formatAndWriteToFile(); err != nil {
		return err
	}

	return g.lastErr
}
