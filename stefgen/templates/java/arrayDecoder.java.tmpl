package {{ .PackageName }};

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

// Decoder for {{ .ArrayName }}
class {{ .ArrayName }}Decoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private {{.ElemType.EncoderType}}Decoder elemDecoder;
    private boolean isRecursive = false;

    // init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        column = columns.getColumn();

        {{- if .ElemType.IsPrimitive}}
        elemDecoder = new {{.ElemType.EncoderType}}Decoder();
        {{- if .ElemType.DictName}}
        elemDecoder.init(state.{{.ElemType.DictName}}, columns.addSubColumn());
        {{- else if .ElemType.IsDictPossible}}
        elemDecoder.init(nil, columns.addSubColumn());
        {{- else}}
        elemDecoder.init(columns.addSubColumn());
        {{- end}}
        {{- else}}
        // Remember this encoder in the state so that we can detect recursion.
        if (state.{{ .ArrayName }}Decoder != null) {
            throw new IllegalStateException("cannot initialize {{ .ArrayName }}Decoder: already initialized");
        }
        state.{{ .ArrayName }}Decoder = this;
        try {
            if (state.{{.ElemType.EncoderType}}Decoder != null) {
                elemDecoder = state.{{.ElemType.EncoderType}}Decoder;
                isRecursive = true;
            } else {
                elemDecoder = new {{.ElemType.EncoderType}}Decoder();
                elemDecoder.init(state, columns.addSubColumn());
            }
        } finally {
            state.{{ .ArrayName }}Decoder = null;
        }
        {{- end}}
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        buf.reset(column.getData());
        if (!isRecursive) {
            elemDecoder.continueDecoding();
        }
    }

    public void reset() {
        if (!isRecursive) {
            elemDecoder.reset();
        }
    }

    public {{.ArrayName}} decode({{.ArrayName}} dst) throws IOException {
        long newLen = buf.readUvarintCompact();
        if (newLen < 0) {
            throw new IllegalStateException("Invalid array length: " + newLen);
        }
        if (newLen > Integer.MAX_VALUE) {
            throw new IllegalStateException("Array length exceeds maximum: " + newLen);
        }

        dst.ensureLen((int)newLen);
        for (int i = 0; i < newLen; i++) {
            dst.elems[i] = elemDecoder.decode({{if not .ElemType.IsPrimitive }}dst.elems[i]{{end}});
        }

        return dst;
    }
}
