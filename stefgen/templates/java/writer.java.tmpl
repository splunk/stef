package {{ .PackageName }};

import net.stef.Constants;
import net.stef.ChunkWriter;
import net.stef.FrameEncoder;
import net.stef.FrameFlags;
import net.stef.Serde;
import net.stef.VarHeader;
import net.stef.WriteBufs;
import net.stef.WriterOptions;
import net.stef.schema.Compatibility;
import net.stef.schema.WireSchema;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

// {{.StructName}}Writer allows writing records of {{.StructName}}
// in STEF format to an output stream.
public class {{.StructName}}Writer {
    // The next record to be written. Modify this record and call write()
    // to write a record.
    public final {{.StructName}} record;

    private WriterOptions opts;
    private ChunkWriter dst;
    private FrameEncoder frameEncoder;
    private {{.StructName}}Encoder encoder;
    private WriterState state;
    private WriteBufs writeBufs;
    private long frameRecordCount;
    private long recordCount;

    public {{.StructName}}Writer(ChunkWriter dst, WriterOptions opts) throws IOException {
        this.dst = dst;
        this.opts = opts;
        this.record = new {{.StructName}}();
        this.state = new WriterState();
        this.encoder = new {{.StructName}}Encoder();
        this.writeBufs = new WriteBufs();
        this.frameEncoder = new FrameEncoder();

        if (this.opts.getSchema() != null) {
            WireSchema ownSchema = {{.StructName}}.wireSchema();
            if (ownSchema.compatible(this.opts.getSchema()) == Compatibility.Incompatible) {
                throw new IOException("schema is not compatible with Writer");
            }
        }

        state.init(opts);
        encoder.init(state, writeBufs.columns);

        frameEncoder.init(dst, opts.getCompression());
        writeFixedHeader();
        writeVarHeader();
    }

    private void writeFixedHeader() throws IOException {
        ByteArrayOutputStream hdrTail = new ByteArrayOutputStream();
        byte versionAndType = Constants.HdrFormatVersion;
        hdrTail.write(versionAndType);
        byte flags = (byte) (this.opts.getCompression().getValue() & Constants.HdrFlagsCompressionMethod);
        hdrTail.write(flags);
        long hdrTailSize = hdrTail.size();

        ByteArrayOutputStream hdrFull = new ByteArrayOutputStream();
        hdrFull.write(Constants.HdrSignature);
        Serde.writeUvarint(hdrTailSize, hdrFull);
        hdrFull.write(hdrTail.toByteArray());

        this.dst.writeChunk(hdrFull.toByteArray(), null);
    }

    private void writeVarHeader() throws IOException {
        VarHeader hdr = new VarHeader();
        if (opts.isIncludeDescriptor()) {
            if (opts.getSchema() != null) {
                ByteArrayOutputStream buf = new ByteArrayOutputStream();
                opts.getSchema().serialize(buf);
                hdr.setSchemaWireBytes(buf.toByteArray());
            } else {
                hdr.setSchemaWireBytes({{.StructName}}.wireSchemaBytes);
            }
        }
        if (opts.getUserData() != null && !opts.getUserData().isEmpty()) {
            hdr.setUserData(opts.getUserData());
        }
        ByteArrayOutputStream buf = new ByteArrayOutputStream();
        hdr.serialize(buf);
        frameEncoder.write(buf.toByteArray());
        frameEncoder.closeFrame();
        frameEncoder.openFrame(0);
    }

    public void write() throws IOException {
        encoder.encode(this.record);
        frameRecordCount++;
        int nextFrameFlags = this.opts.getFrameRestartFlags();
        boolean restartFrame = false;
        if (state.getLimiter().isDictLimitReached() || (nextFrameFlags & FrameFlags.RestartDictionaries) != 0) {
            state.resetDicts();
            nextFrameFlags = this.opts.getFrameRestartFlags() | FrameFlags.RestartDictionaries;
            restartFrame = true;
        }
        if (state.getLimiter().isFrameLimitReached()) {
            restartFrame = true;
        }
        if (restartFrame) {
            restartFrame(nextFrameFlags);
        }
        recordCount++;
    }

    public long getRecordCount() {
        return this.recordCount;
    }

    private void restartFrame(int nextFrameFlags) throws IOException {
        if ((nextFrameFlags & FrameFlags.RestartCodecs) != 0) {
            encoder.reset();
        }

        Serde.writeUvarint(frameRecordCount, frameEncoder);
        frameRecordCount = 0;
        encoder.collectColumns(writeBufs.columns);
        writeBufs.writeTo(frameEncoder);
        frameEncoder.closeFrame();
        frameEncoder.openFrame(nextFrameFlags);
        state.getLimiter().resetFrameSize();
    }

    public void flush() throws IOException {
        if (frameRecordCount == 0) {
            return;
        }
        restartFrame(opts.getFrameRestartFlags());
    }
}
