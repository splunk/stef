// {{ .StructName }}Encoder implements encoding of {{ .StructName }}
package {{ .PackageName }};

import net.stef.BitsWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

class {{ .StructName }}Encoder {
    private BitsWriter buf = new BitsWriter();
    private SizeLimiter limiter;
    private {{.StructName}}.Type prevType;
    private int fieldCount;

    // Field encoders.
    {{ range .Fields }}
    private {{.Type.EncoderType}}Encoder {{.name}}Encoder;
    private boolean is{{.Name}}Recursive = false; // Indicates {{.Name}} field's type is recursive.
    {{- end }}
    {{if .DictName}}
    private {{ .StructName }}EncoderDict dict;
    {{end}}

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        // Remember this encoder in the state so that we can detect recursion.
        if (state.{{.StructName}}Encoder != null) {
            throw new IllegalStateException("cannot initialize {{ .StructName }}Encoder: already initialized");
        }
        state.{{.StructName}}Encoder = this;

        try {
            prevType = {{.StructName}}.Type.TypeNone;
            this.limiter = state.getLimiter();
            {{- if .DictName}}
            this.dict = state.get{{.DictName}}();
            {{- end}}

            this.fieldCount = state.getStructFieldCounts().get{{.StructName}}FieldCount();
            {{ range $i, $e := .Fields }}
            // Init encoder for {{.Name}} field.
            if (this.fieldCount <= {{$i}}) {
                return; // {{.Name}} and subsequent fields are skipped.
            }
            {{- if .IsPrimitive}}
            {{.name}}Encoder = new {{.Type.EncoderType}}Encoder();
            {{.name}}Encoder.init({{if .Type.DictName}}state.{{.Type.DictName}}, {{end}}this.limiter, columns.addSubColumn());
            {{- else}}
            if (state.{{.Type.EncoderType}}Encoder != null) {
                // Recursion detected, use the existing encoder.
                {{.name}}Encoder = state.{{.Type.EncoderType}}Encoder;
                is{{.Name}}Recursive = true;
            } else {
                {{.name}}Encoder = new {{.Type.EncoderType}}Encoder();
                {{.name}}Encoder.init(state, columns.addSubColumn());
            }
            {{- end}}
            {{- end}}
        } finally {
            state.{{.StructName}}Encoder = null;
        }
    }

    public void reset() {
        prevType = {{ .StructName }}.Type.TypeNone;
        {{ range $i, $e := .Fields }}
        if (fieldCount <= {{$i}}) {
            return; // {{.Name}} and all subsequent fields are skipped.
        }
        {{if not .IsPrimitive}}
        if (!is{{.Name}}Recursive) {
            {{.name}}Encoder.reset();
        }
        {{else}}{{.name}}Encoder.reset();{{end}}
        {{- end}}
    }

    // Encode encodes val into buf
    public void encode({{ .StructName }} val) throws IOException {
        int oldLen = buf.bitCount();

        {{ $.StructName }}.Type typ = val.typ;
        if (typ.getValue() > fieldCount) {
            // The current field type is not supported in target schema. Encode the type as None.
            typ = {{ $.StructName }}.Type.TypeNone;
        }

        // Compute type delta. 0 means the type is the same as the last time.
        int typDelta = typ.getValue() - prevType.getValue();
        prevType = typ;
        buf.writeVarintCompact(typDelta);

        // Account written bits in the limiter.
        int newLen = buf.bitCount();
        limiter.addFrameBits(newLen-oldLen);

        // Encode currently selected field.
        switch (typ) {
        {{- range .Fields }}
        case Type{{.Name}}:
            // Encode {{.Name}}
            {{.name}}Encoder.encode(val.{{.name}});
            break;
        {{- end }}
        }
    }

    // collectColumns collects all buffers from all encoders into buf.
    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBits(this.buf);
        int colIdx = 0;
        {{ range $i,$e := .Fields }}
        // Collect {{.Name}} field.
        if (this.fieldCount <= {{$i}}) {
            return; // {{.Name}} and subsequent fields are skipped.
        }
        {{if not .IsPrimitive -}}
        if (!is{{.Name}}Recursive) {
            {{.name}}Encoder.collectColumns(columnSet.at(colIdx));
            colIdx++;
        }
        {{else}}
        {{.name}}Encoder.collectColumns(columnSet.at(colIdx));
        colIdx++;
        {{end -}}
        {{- end }}
    }
}
