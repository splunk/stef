package {{ .PackageName }};

import net.stef.Compression;
import net.stef.FrameFlags;
import net.stef.MemChunkWriter;
import net.stef.ReadOptions;
import net.stef.ReadResult;
import net.stef.WriterOptions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

class {{.StructName}}WriterTest {

    // gen{{.StructName}}Records generates a number of records pseudo-randomly
    // using the supplied Random generator. Generated records will be always
    // the same for the same input state of Random generator.
    static List<{{.StructName}}> gen{{.StructName}}Records(Random random) {
        final int recCount = 1000;
        List<{{.StructName}}> records = new ArrayList<>(recCount);
        {{.StructName}} record = new {{.StructName}}();
        for (int i = 0; i < recCount; i++) {
            record.mutateRandom(random);
            {{.StructName}} copy = new {{.StructName}}();
            copy.copyFrom(record);
            records.add(copy);
        }
        return records;
    }

    @Test
    void test{{.StructName}}WriteRead() throws Exception {
        List<WriterOptions.Builder> opts = Arrays.asList(
            WriterOptions.builder(),
            WriterOptions.builder().compression(Compression.Zstd),
            WriterOptions.builder().maxUncompressedFrameByteSize(500),
            WriterOptions.builder().maxTotalDictSize(500),

            WriterOptions.builder().
                maxUncompressedFrameByteSize(500).
                maxTotalDictSize(500).
                compression(Compression.Zstd),

            WriterOptions.builder().frameRestartFlags(FrameFlags.RestartDictionaries),
            WriterOptions.builder().frameRestartFlags(FrameFlags.RestartCodecs),
            WriterOptions.builder().frameRestartFlags(FrameFlags.RestartDictionaries | FrameFlags.RestartCodecs),

            WriterOptions.builder().frameRestartFlags(FrameFlags.RestartCompression).
                compression(Compression.Zstd),

            WriterOptions.builder().frameRestartFlags(FrameFlags.RestartDictionaries | FrameFlags.RestartCodecs | FrameFlags.RestartCompression).
                compression(Compression.Zstd),

            WriterOptions.builder().frameRestartFlags(FrameFlags.RestartCodecs).maxUncompressedFrameByteSize(500)
        );

        // Choose a seed (non-pseudo) randomly. We will print the seed
        // on failure for easy reproduction.
        long seed1 = System.nanoTime();
        Random random = new Random(seed1);

        for (int optIdx=0; optIdx < opts.size(); optIdx++) {
            WriterOptions.Builder opt = opts.get(optIdx);
            try {
                MemChunkWriter buf = new MemChunkWriter();
                {{.StructName}}Writer writer = new {{.StructName}}Writer(buf, opt.build());

                // Generate records pseudo-randomly
                List<{{.StructName}}> records = gen{{.StructName}}Records(random);
                // Write the records
                for (int i = 0; i < records.size(); i++) {
                    writer.record.copyFrom(records.get(i));
                    writer.write();
                }
                writer.flush();

                // Read the records and compare to written.
                {{.StructName}}Reader reader = new {{.StructName}}Reader(new ByteArrayInputStream(buf.getBytes()));
                for (int i = 0; i < records.size(); i++) {
                    assertEquals(ReadResult.Success, reader.read(ReadOptions.none));
                    assertTrue(reader.record.equals(records.get(i)), "record " + i + " seed " + seed1 + " optIdx " + optIdx);
                }
                assertThrows(EOFException.class, () -> reader.read(ReadOptions.none));
            } catch (Exception e) {
                fail("seed " + seed1 + " optIdx " + optIdx + ": " + e.getMessage());
            }
        }
    }
}
