// {{ .StructName }}Decoder implements decoding of {{ .StructName }}
package {{ .PackageName }};

import net.stef.BitsReader;
import net.stef.ReadColumnSet;
import net.stef.ReadableColumn;
import net.stef.codecs.*;

import java.io.IOException;

class {{ .StructName }}Decoder {
    private final BitsReader buf = new BitsReader();
    private ReadableColumn column;
    private {{.StructName}} lastValPtr;
    private {{.StructName}} lastVal = new {{.StructName}}();
    private int fieldCount;
    private {{.StructName}}.Type prevType;

    // Field decoders.
    {{range .Fields}}
    private {{.Type.EncoderType}}Decoder {{.name}}Decoder;
    private boolean is{{.Name}}Recursive = false; // Indicates {{.Name}} field's type is recursive.
    {{- end }}
    {{if .DictName}}
    private {{ .StructName }}DecoderDict dict;
    {{end}}

    // Init is called once in the lifetime of the stream.
    public void init(ReaderState state, ReadColumnSet columns) throws IOException {
        // Remember this decoder in the state so that we can detect recursion.
        if (state.{{.StructName}}Decoder != null) {
            throw new IllegalStateException("cannot initialize {{ .StructName }}Decoder: already initialized");
        }
        state.{{.StructName}}Decoder = this;

        try {
            prevType = {{.StructName}}.Type.TypeNone;
            this.fieldCount = state.getStructFieldCounts().get{{.StructName}}FieldCount();
            this.column = columns.getColumn();
            this.lastVal.init(null, 0);
            this.lastValPtr = this.lastVal;
            {{- if .DictName}}
            this.dict = state.get{{.DictName}}();
            {{- end}}
            Exception err = null;
            {{ range $i,$e := .Fields }}
            if (this.fieldCount <= {{$i}}) {
                return; // {{.Name}} and subsequent fields are skipped.
            }
            {{- if .Type.IsPrimitive}}
            {{.name}}Decoder = new {{.Type.EncoderType}}Decoder();
            {{.name}}Decoder.init({{if .Type.DictName}}state.{{.Type.DictName}}, {{end}}columns.addSubColumn());
            {{- else}}
            if (state.{{.Type.EncoderType}}Decoder != null) {
                // Recursion detected, use the existing decoder.
                {{.name}}Decoder = state.{{.Type.EncoderType}}Decoder;
                is{{.Name}}Recursive = true; // Mark that we are using a recursive decoder.
            } else {
                {{.name}}Decoder = new {{.Type.EncoderType}}Decoder();
                {{.name}}Decoder.init(state, columns.addSubColumn());
            }
            {{- end}}
            {{- end }}
        } finally {
            state.{{.StructName}}Decoder = null;
        }
    }

    // continueDecoding is called at the start of the frame to continue decoding column data.
    // This should set the decoder's source buffer, so the new decoding continues from
    // the supplied column data. This should NOT reset the internal state of the decoder,
    // since columns can cross frame boundaries and the new column data is considered
    // continuation of that same column in the previous frame.
    public void continueDecoding() {
        this.buf.reset(this.column.getData());
        {{ range $i,$e := .Fields }}
        if (this.fieldCount <= {{$i}}) {
            return; // {{.Name}} and subsequent fields are skipped.
        }
        {{if not .IsPrimitive}}
        if (!is{{.Name}}Recursive) {
            {{.name}}Decoder.continueDecoding();
        }
        {{else}}{{.name}}Decoder.continueDecoding();{{end}}
        {{- end }}
    }

    public void reset() {
        prevType = {{.StructName}}.Type.TypeNone;
        {{ range $i, $e := .Fields }}
        if (fieldCount <= {{$i}}) {
            return; // {{.Name}} and all subsequent fields are skipped.
        }
        {{if not .IsPrimitive -}}
        if (!is{{.Name}}Recursive) {
            {{.name}}Decoder.reset();
        }
        {{- else -}}
        {{.name}}Decoder.reset();
        {{- end}}
        {{- end}}
    }

    // Decode decodes a value from the buffer into dst.
    public {{.StructName}} decode({{.StructName}} dst) throws IOException {
        // Read type delta
        long typeDelta = this.buf.readVarintCompact();
        long typ = prevType.getValue() + typeDelta;
        if (typ < 0 || typ >= {{.StructName}}.Type.values().length) {
            throw new IOException("Invalid oneof type");
        }
        {{.StructName}}.Type newType = {{.StructName}}.Type.values()[(int)typ];
        if (dst.typ != newType) {
            dst.typ = newType;
            dst.resetContained();
        }
        prevType = dst.typ;
        this.lastValPtr = dst;
        // Decode selected field
        switch (dst.typ) {
        {{- range .Fields }}
        case Type{{.Name}}:
            {{if not .Type.IsPrimitive -}}
            if (dst.{{.name}} == null) {
                dst.{{.name}} = new {{ .Type.Storage }}(dst.parentModifiedFields, dst.parentModifiedBit);
            }
            dst.{{.name}} = this.{{.name}}Decoder.decode(dst.{{.name}});
            {{- else -}}
            dst.{{.name}} = this.{{.name}}Decoder.decode();
            {{- end}}
            break;
        {{- end }}
        default:
            break;
        }
        return dst;
    }
}
