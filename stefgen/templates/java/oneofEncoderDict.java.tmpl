{{- if .DictName}}
package {{ .PackageName }};

import java.util.*;
import net.stef.SizeLimiter;

// {{ .StructName }}EncoderDict is the dictionary used by {{ .StructName }}Encoder
class {{ .StructName }}EncoderDict {
    private final HashMap<{{ .StructName }}, {{ .StructName }}Entry> dict = new HashMap<>();
    private SizeLimiter limiter;

    public void init(SizeLimiter limiter) {
        this.dict.clear();
        this.dict.put(null, new {{ .StructName }}Entry(0L, null)); // null {{ .StructName }} is RefNum 0
        this.limiter = limiter;
    }

    public void reset() {
        this.dict.clear();
        this.dict.put(null, new {{ .StructName }}Entry(0L, null)); // null {{ .StructName }} is RefNum 0
    }

    public {{ .StructName }}Entry get({{ .StructName }} key) {
        return this.dict.get(key);
    }

    public void set({{ .StructName }} key, {{ .StructName }}Entry entry) {
        this.dict.put(key, entry);
    }

    public int size() {
        return this.dict.size();
    }

    // {{ .StructName }}Entry for dictionary
    public static class {{ .StructName }}Entry {
        public long refNum;
        public {{ .StructName }} val;

        public {{ .StructName }}Entry(long refNum, {{ .StructName }} val) {
            this.refNum = refNum;
            this.val = val;
        }
    }
}
{{- end}}