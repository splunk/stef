package {{ .PackageName }};

import net.stef.BytesWriter;
import net.stef.SizeLimiter;
import net.stef.WriteColumnSet;
import net.stef.codecs.*;

import java.io.IOException;

// Encoder for {{ .MultimapName }}
class {{ .MultimapName }}Encoder {
    private final BytesWriter buf = new BytesWriter(0);
    private WriteColumnSet columns;
    private SizeLimiter limiter;

    private {{.Key.Type.EncoderType}}Encoder keyEncoder;
    private {{.Value.Type.EncoderType}}Encoder valueEncoder;

    private final {{ .MultimapName }} lastVal = new {{ .MultimapName }}();

    public void init(WriterState state, WriteColumnSet columns) throws IOException {
        this.limiter = state.getLimiter();
    {{- if .Key.Recursive}}
        keyEncoder = state.{{.Key.Type.EncoderType}}Encoder;
    {{- else}}
        keyEncoder = new {{.Key.Type.EncoderType}}Encoder();
    {{- if .Key.Type.IsPrimitive}}
        keyEncoder.init({{if .Key.Type.DictName}}state.{{.Key.Type.DictName}}{{else}}null{{end}}, limiter, columns.addSubColumn());
    {{- else}}
        keyEncoder.init(state, columns.addSubColumn());
    {{- end}}
    {{- end}}

    {{- if .Value.Recursive}}
        valueEncoder = state.{{.Value.Type.EncoderType}}Encoder;
    {{- else}}
        valueEncoder = new {{.Value.Type.EncoderType}}Encoder();
    {{- if .Value.Type.IsPrimitive}}
        valueEncoder.init({{if .Value.Type.DictName}}&state.{{.Value.Type.DictName}}{{else}}null{{end}}, limiter, columns.addSubColumn());
    {{- else}}
        valueEncoder.init(state, columns.addSubColumn());
    {{- end}}
    {{- end}}
    }

    public void reset() {
    {{ if not .Key.Recursive}}
        keyEncoder.reset();
    {{- end}}
    {{ if not .Value.Recursive}}
        valueEncoder.reset();
    {{end -}}
    }

    // equals performs deep comparison and returns true if encoder's previously encoded value is equal to list.
    public boolean equals({{ .MultimapName }} list) {
        return lastVal.equals(list);
    }

    public boolean encode({{ .MultimapName }} list) throws IOException {
        int oldLen = buf.size();
        if (list.elemsLen == 0) {
            buf.writeUvarint(0b1);
            boolean changed = lastVal.elemsLen != 0;
            lastVal.ensureLen(0);
            int newLen = buf.size();
            limiter.addFrameBytes(newLen - oldLen);
            return changed;
        }
        if (list.isSameKeys(lastVal) && lastVal.elemsLen < 63) {
            return encodeValuesOnly(list);
        } else {
            encodeFull(list);
            return true;
        }
    }

    private boolean encodeValuesOnly({{ .MultimapName }} list) throws IOException {
        if (list.elemsLen > 62) {
            throw new UnsupportedOperationException("Not implemented for >62 elements");
        }

        // Calculate changed values.
        long changedValuesBits = 0;
        for (int i = 0; i < list.elemsLen; i++) {
            changedValuesBits <<= 1;
            {{- if .Value.Type.IsPrimitive}}
            if (lastVal.elems[i].value != list.elems[i].value) {
                changedValuesBits |= 1;
            }
            {{else}}
            if (!{{.Value.Type.EqualFunc}}(lastVal.elems[i].value, list.elems[i].value)) {
                changedValuesBits |= 1;
            }
            {{- end}}
        }

        buf.writeUvarint(changedValuesBits << 1);

        // Encode changed values first.
        long bitToRead = 1L << (list.elemsLen - 1);
        for (int i = 0; i < list.elemsLen; i++) {
            if ((bitToRead & changedValuesBits) != 0) {
                valueEncoder.encode(list.elems[i].value);
            }
            bitToRead >>>= 1;
            if (bitToRead == 0) {
                break;
            }
        }

        // Store changed values in lastVal after encoding.
        lastVal.ensureLen(list.elemsLen);
        bitToRead = 1L << (list.elemsLen - 1);
        for (int i = 0; i < list.elemsLen; i++) {
            if ((bitToRead & changedValuesBits) != 0) {
                {{- if .Value.Type.IsPrimitive}}
                lastVal.elems[i].value = list.elems[i].value;
                {{else}}
                lastVal.elems[i].value.copyFrom(list.elems[i].value);
                {{- end}}
            }
            bitToRead >>>= 1;
            if (bitToRead == 0) {
                break;
            }
        }
        return changedValuesBits != 0;
    }

    private void encodeFull({{ .MultimapName }} list) throws IOException {
        buf.writeUvarint(((long)list.elemsLen << 1) | 0b1);

        // Encode values first.
        for (int i = 0; i < list.elemsLen; i++) {
            keyEncoder.encode(list.elems[i].key);
            valueEncoder.encode(list.elems[i].value);
        }

        lastVal.ensureLen(list.elemsLen);
        for (int i = 0; i < list.elemsLen; i++) {
            {{- if .Key.Type.IsPrimitive}}
            lastVal.elems[i].key = list.elems[i].key;
            {{- else}}
            lastVal.elems[i].key.copyFrom(list.elems[i].key);
            {{- end}}

            {{- if .Value.Type.IsPrimitive}}
            lastVal.elems[i].value = list.elems[i].value;
            {{- else}}
            lastVal.elems[i].value.copyFrom(list.elems[i].value);
            {{- end}}
        }
    }

    public void rencodeLast() throws IOException {
        {{ .MultimapName }} list = lastVal;
        buf.writeUvarint(((long)list.elemsLen << 1) | 0b1);
        for (int i = 0; i < list.elemsLen; i++) {
            keyEncoder.encode(list.elems[i].key);
            valueEncoder.encode(list.elems[i].value);
        }
    }

    public void collectColumns(WriteColumnSet columnSet) {
        columnSet.setBytes(buf);
        {{- if not .Key.Recursive }}
        keyEncoder.collectColumns(columnSet.at(0));
        {{- end}}
        {{- if not .Value.Recursive }}
        valueEncoder.collectColumns(columnSet.at(1));
        {{- end}}
    }
}

