package {{ .PackageName }}

import (
	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
    "github.com/splunk/stef/go/pkg/schema"
)

type WriterState struct {
    limiter pkg.SizeLimiter

    // OverrideSchema is set if encoding should perform a translation into the target
    // schema. The specified schema must be compatible with endoders' schema.
    OverrideSchema *schema.WireSchema

    // Dictionaries
    {{range .Dicts -}}
    {{.DictName}} {{.DictGoType}}EncoderDict
    {{end}}

    // Encoders
    {{range $name, $val := .Encoders -}}
    {{$name}}Encoder *{{$name}}Encoder
    {{end}}
}

func (d *WriterState) Init(opts *pkg.WriterOptions) {
	d.limiter.Init(opts)
    d.OverrideSchema = opts.Schema

    // Init dictionaries
    {{range .Dicts -}}
 	d.{{.DictName}}.Init(&d.limiter)
    {{end}}
}

func (d *WriterState) ResetDicts() {
    d.limiter.ResetDict()
    {{range .Dicts -}}
    d.{{.DictName}}.Reset()
    {{end -}}
}

type ReaderState struct {
    // OverrideSchema is set if decoding should perform a translation from specfied
    // schema. OverrideSchema must be compatible with decoders' schema.
    OverrideSchema *schema.WireSchema

    // Dictionaries
    {{range .Dicts -}}
    {{.DictName}} {{.DictGoType}}DecoderDict
    {{end}}

    // Decoders
    {{range $name, $val := .Encoders -}}
    {{$name}}Decoder *{{$name}}Decoder
    {{end}}
}

func (d* ReaderState) Init(overrideSchema *schema.WireSchema) {
    d.OverrideSchema = overrideSchema
    {{range .Dicts -}}
 	d.{{.DictName}}.Init()
    {{end -}}
}

// ResetDicts resets all dictionaries to initial state. Used when a frame is
// started with RestartDictionaries flag.
func (d* ReaderState) ResetDicts() {
    {{range .Dicts -}}
    d.{{.DictName}}.Reset()
    {{end -}}
}
