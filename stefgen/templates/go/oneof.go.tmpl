package {{ .PackageName }}

import (
    "fmt"
    "math/rand/v2"
    "strings"
	"unsafe"

    {{if .DictName}}
	"modernc.org/b/v2"{{end}}

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
    "github.com/splunk/stef/go/pkg/schema"
)

var _ = strings.Compare
var _ = encoders.StringEncoder{}

// {{ .StructName }} is a oneof struct.
type {{ .StructName }} struct {
    // The current type of the oneof.
	typ {{$.StructName }}Type
    {{ range .Fields }}
    {{.name}} {{if .Type.Flags.StoreByPtr}}*{{end}}{{ .Type.Storage }}
    {{- end }}

    // Pointer to parent's modifiedFields
    parentModifiedFields *modifiedFields
    // Bit to set in parent's modifiedFields when this oneof is modified.
    parentModifiedBit uint64
}

// Init must be called once, before the {{.StructName }} is used.
func (s *{{.StructName }}) Init() {
    s.init(nil, 0)
}

func (s *{{ $.StructName }}) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
    s.parentModifiedFields = parentModifiedFields
    s.parentModifiedBit = parentModifiedBit

    {{ range .Fields }}
	{{- if and (not .Type.IsPrimitive) (not .Type.Flags.StoreByPtr) }}
    s.{{.name}}.init(parentModifiedFields, parentModifiedBit)
    {{- end -}}
    {{- end -}}
}

// reset the struct to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (s *{{ $.StructName }}) reset() {
    s.typ = {{$.StructName }}TypeNone
    {{ range .Fields }}
	{{- if not .Type.IsPrimitive }}
    s.{{.name}}.reset()
    {{- end -}}
    {{- end -}}
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (s *{{ $.StructName }}) fixParent(parentModifiedFields *modifiedFields) {
    s.parentModifiedFields = parentModifiedFields

    {{ range .Fields }}
	{{- if and (not .Type.IsPrimitive) (not .Type.Flags.StoreByPtr) }}
    s.{{.name}}.fixParent(parentModifiedFields)
    {{- end -}}
    {{- end -}}
}

type {{$.StructName }}Type byte
const (
    {{.StructName }}TypeNone = {{$.StructName }}Type(iota)
{{- range .Fields }}
    {{$.StructName }}Type{{.Name}}
{{- end }}
    {{.StructName}}TypeCount
)

// Type returns the type of the value currently contained in {{ $.StructName }}.
func (s *{{ $.StructName }}) Type() {{$.StructName }}Type {
    return s.typ
}

// SetType sets the type of the value currently contained in {{ $.StructName }}.
func (s *{{ $.StructName }}) SetType(typ {{$.StructName }}Type) {
	if s.typ!=typ {
        s.typ=typ
        switch typ {
        {{- range .Fields }}
        {{- if .Type.Flags.StoreByPtr}}
        case {{ $.StructName }}Type{{.Name}}:
            if s.{{.name}} == nil {
                s.{{.name}} = &{{ .Type.Storage }}{}
                s.{{.name}}.init(s.parentModifiedFields, s.parentModifiedBit)
            }
        {{- end -}}
        {{- end }}
        }
        s.markParentModified()
    }
}

{{ range .Fields }}
// {{.Name}} returns the value if the contained type is currently {{$.StructName }}Type{{.Name}}.
// The caller must check the type via Type() before attempting to call this function.
func (s *{{ $.StructName }}) {{.Name}}() {{if .Type.Flags.PassByPtr}}*{{end}}{{.Type.Exported}} {
{{- if .Type.IsPrimitive}}
    return {{.Type.ToExported (print "s." .name)}}
{{- else}}
	return {{if and .Type.Flags.PassByPtr (not .Type.Flags.StoreByPtr)}}&{{end}}s.{{.name}}
{{- end}}
}

{{if .Type.IsPrimitive}}
// Set{{.Name}} sets the value to the specified value and sets the type to {{$.StructName }}Type{{.Name}}.
func (s *{{ $.StructName }}) Set{{.Name}}(v {{if .PassByPointer}}*{{end}}{{.Type.Exported}}) {
    if s.typ!={{$.StructName }}Type{{.Name}} || !{{ .Type.EqualFunc }}(s.{{.name}}, {{.Type.ToStorage "v"}}) {
		s.{{.name}} = {{.Type.ToStorage "v"}}
		s.typ = {{$.StructName }}Type{{.Name}}
        s.markParentModified()
    }
}
{{end}}
{{ end }}

func (s *{{ .StructName }}) Clone() {{if .Type.Flags.StoreByPtr}}*{{end}}{{.StructName}} {
	return {{if .Type.Flags.StoreByPtr}}&{{end}}{{ .StructName }}{
        {{ range .Fields }}{{.name}}: {{if .Type.MustClone}}s.{{.name}}.Clone(){{else}}s.{{.name}}{{end}},
        {{ end }}
	}
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (s *{{ .StructName }}) byteSize() uint {
    return uint(unsafe.Sizeof(*s))+
       {{range .Fields -}}
       {{- if .Type.MustClone}}s.{{.name}}.byteSize()+{{end}}
       {{- end }}0
}

func copy{{.StructName}}(dst *{{.StructName}}, src *{{.StructName}}) {
	switch src.typ {
    {{- range .Fields}}
    case {{ $.StructName }}Type{{.Name}}:
        {{- if .Type.MustClone}}
        dst.SetType(src.typ)
        copy{{.Type.TypeName}}(
            {{- if .Type.Flags.TakePtr}}&{{end}}dst.{{.name }},
            {{- if .Type.Flags.TakePtr}}&{{end}}src.{{.name}})
        {{- else}}
        dst.Set{{.Name}}({{.Type.ToExported (print "src." .name)}})
        {{- end}}
    {{- end}}
    case {{ $.StructName }}TypeNone: dst.SetType(src.typ)
    default: panic("copy{{.StructName}}: unexpected type: " + fmt.Sprint(src.typ))
    }
}

// CopyFrom() performs a deep copy from src.
func (s* {{.StructName}}) CopyFrom(src *{{.StructName}}) {
    copy{{.StructName}}(s, src)
}

func (s* {{.StructName}}) markParentModified() {
	s.parentModifiedFields.markModified(s.parentModifiedBit)
}

func (s *{{ $.StructName }}) markModifiedRecursively() {
    switch s.typ {
    {{- range .Fields}}
        case {{ $.StructName }}Type{{.Name}}:
        {{- if not .Type.IsPrimitive}}
            s.{{.name}}.markModifiedRecursively()
        {{- end}}
    {{- end}}
    }
}

func (s *{{ $.StructName }}) markUnmodifiedRecursively() {
    switch s.typ {
    {{- range .Fields}}
        case {{ $.StructName }}Type{{.Name}}:
        {{- if not .Type.IsPrimitive}}
            s.{{.name}}.markUnmodifiedRecursively()
        {{- end}}
    {{- end}}
    }
}

// IsEqual performs deep comparison and returns true if struct is equal to val.
func (e *{{ .StructName }}) IsEqual(val *{{ .StructName }}) bool {
    if e.typ != val.typ {
        return false
    }
    switch e.typ {
    {{- range .Fields }}
    case {{ $.StructName }}Type{{.Name}}:
        {{- if .Type.IsPrimitive }}
        return {{ .Type.EqualFunc }}(e.{{.name}}, val.{{.name}})
        {{- else }}
        return e.{{.name}}.IsEqual({{- if .Type.Flags.TakePtr}}&{{end}}val.{{.name}})
        {{- end }}
        {{- end }}
    }

    return true
}

func {{.StructName}}Equal(left, right *{{.StructName}}) bool {
    return left.IsEqual(right)
}

// Cmp{{.StructName}} performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func Cmp{{.StructName}}(left, right *{{.StructName}}) int {
    if left == nil {
        if right == nil {
            return 0
        }
        return -1
    }
    if right == nil {
        return 1
    }

    c := pkg.Uint64Compare(uint64(left.typ), uint64(right.typ))
    if c != 0 {
        return c
    }
    switch left.typ {
    {{- range .Fields }}
    case {{ $.StructName }}Type{{.Name}}:
        return {{ .Type.CompareFunc }}(
            {{- if .Type.Flags.TakePtr}}&{{end}}left.{{.name}},
            {{- if .Type.Flags.TakePtr}}&{{end}}right.{{.name}})
    {{- end }}
    }

    return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. Only fields that exist
// in the schema are mutated, allowing to generate data for specified schema.
func (s *{{ .StructName }}) mutateRandom(random *rand.Rand, schem *schema.Schema) {
    // Get the field count for this oneof from the schema. If the schema specifies
    // fewer field count than the one we have in this code then we will not mutate
    // the type of the oneof to the choices that are not in the schema.
    fieldCount, err := schem.FieldCount({{printf "%q" .StructName}})
    if err != nil {
        panic(fmt.Sprintf("cannot get field count for %s: %v", {{printf "%q" .StructName}}, err))
    }

typeChanged := false
    if random.IntN(10)==0 {
        s.SetType({{$.StructName }}Type(random.IntN(fieldCount+1)))
        typeChanged = true
    }

    switch s.typ {
    {{- range .Fields }}
    case {{ $.StructName }}Type{{.Name}}:
        if typeChanged || random.IntN(2)==0 {
        {{- if not .Type.IsPrimitive }}
            s.{{.name}}.mutateRandom(random, schem)
        {{- else }}
            s.Set{{.Name}}({{.Type.ToExported (print .Type.RandomFunc)}})
        {{- end}}
        }
    {{- end }}
    }
}

// {{ .StructName }}Encoder implements encoding of {{ .StructName }}
type {{ .StructName }}Encoder struct {
    buf pkg.BitsWriter
	limiter *pkg.SizeLimiter
    prevType {{.StructName}}Type
    fieldCount uint

    // Field encoders.
    {{ range .Fields }}
    {{.name}}Encoder {{if not .IsPrimitive}}*{{end}}{{ .Type.EncoderType }}Encoder
    {{if not .IsPrimitive}}is{{.Name}}Recursive bool // Indicates {{.Name}} field's type is recursive.
    {{end}}
    {{- end }}
    {{if .DictName}}
	dict *{{ .StructName }}EncoderDict{{end}}
}

{{if .DictName}}
type {{ .StructName }}Entry struct {
	refNum uint64
	val  *{{ .StructName }}
}

// {{ .StructName }}EncoderDict is the dictionary used by {{ .StructName }}Encoder
type {{ .StructName }}EncoderDict struct {
	dict b.Tree[*{{ .StructName }}, {{ .StructName }}Entry]
	limiter *pkg.SizeLimiter
}

func (d* {{ .StructName }}EncoderDict) Init(limiter *pkg.SizeLimiter) {
    d.dict = *b.TreeNew[*{{ .StructName }}, {{ .StructName }}Entry](Cmp{{.StructName}})
    d.dict.Set(nil, {{ .StructName }}Entry{}) // nil {{ .StructName }} is RefNum 0
    d.limiter = limiter
}

func (d* {{ .StructName }}EncoderDict) Reset() {
    d.dict.Clear()
    d.dict.Set(nil, {{ .StructName }}Entry{}) // nil {{ .StructName }} is RefNum 0
}
{{end}}

func (e *{{ .StructName }}Encoder) Init(state* WriterState, columns *pkg.WriteColumnSet) error {
    // Remember this encoder in the state so that we can detect recursion.
    if state.{{.StructName}}Encoder != nil {
        panic("cannot initialize {{ .StructName }}Encoder: already initialized")
    }
    state.{{.StructName}}Encoder = e
    defer func() { state.{{.StructName}}Encoder = nil }()

	e.limiter = &state.limiter
    {{- if .DictName}}
	e.dict = &state.{{.DictName}}
    {{end}}

    var err error
    e.fieldCount, err = state.StructFieldCounts.{{.StructName}}FieldCount()
    if err != nil {
        return fmt.Errorf("cannot find struct %s in override schema: %v", {{printf "%q" .StructName}}, err)
    }

    {{ range $i, $e := .Fields }}
    // Init encoder for {{.Name}} field.
    if e.fieldCount <= {{$i}} {
        // {{.Name}} and all subsequent fields are skipped.
        return nil
    }
    {{- if .IsPrimitive}}
        {{- if .Type.DictName}}
        err = e.{{.name}}Encoder.Init(&state.{{.Type.DictName}}, e.limiter, columns.AddSubColumn())
        {{- else}}
        err = e.{{.name}}Encoder.Init({{if .Type.IsDictPossible}}nil, {{end}}e.limiter, columns.AddSubColumn())
        {{- end}}
    {{- else}}
    if state.{{.Type.EncoderType}}Encoder != nil {
        // Recursion detected, use the existing encoder.
        e.{{.name}}Encoder = state.{{.Type.EncoderType}}Encoder
        e.is{{.Name}}Recursive = true
    } else {
        e.{{.name}}Encoder = new({{.Type.EncoderType}}Encoder)
        err = e.{{.name}}Encoder.Init(state, columns.AddSubColumn())
    }
    {{- end}}
    if err != nil {
        return err
    }
    {{end}}
    return nil
}

func (e *{{ .StructName }}Encoder) Reset() {
    e.prevType = 0
    {{ range $i, $e := .Fields }}
    if e.fieldCount <= {{$i}} {
        return // {{.Name}} and all subsequent fields are skipped.
    }
    {{if not .IsPrimitive}}
    if !e.is{{.Name}}Recursive {
        e.{{.name}}Encoder.Reset()
    }
    {{else}}e.{{.name}}Encoder.Reset(){{end}}
    {{- end}}
}

// Encode encodes val into buf
func (e *{{ .StructName }}Encoder) Encode(val *{{ .StructName }}) {
    typ := val.typ
    if uint(typ) > e.fieldCount {
        // The current field type is not supported in target schema. Encode the type as None.
        typ = {{ $.StructName }}TypeNone
    }

	// Compute type delta. 0 means the type is the same as the last time.
	typDelta := int(typ) - int(e.prevType)
    e.prevType = typ
	bitCount := e.buf.WriteVarintCompact(int64(typDelta))

    // Account written bits in the limiter.
    e.limiter.AddFrameBits(bitCount)

    // Encode currently selected field.
	switch typ {
    {{- range .Fields }}
    case {{ $.StructName }}Type{{.Name}}:
        // Encode {{.Name}}
        e.{{.name}}Encoder.Encode({{- if .Type.Flags.TakePtr}}&{{end}}val.{{.name}})
    {{- end }}
    }
}

// CollectColumns collects all buffers from all encoders into buf.
func (e *{{ .StructName }}Encoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
    columnSet.SetBits(&e.buf)
    colIdx := 0
    {{ range $i,$e := .Fields }}
    // Collect {{.Name}} field.
    if e.fieldCount <= {{$i}} {
        return // {{.Name}} and subsequent fields are skipped.
    }
    {{if not .IsPrimitive -}}
    if !e.is{{.Name}}Recursive {
        e.{{.name}}Encoder.CollectColumns(columnSet.At(colIdx))
        colIdx++
    }
    {{else}}
    e.{{.name}}Encoder.CollectColumns(columnSet.At(colIdx))
    colIdx++
    {{end -}}
    {{end -}}
}

// {{ .StructName }}Decoder implements decoding of {{ .StructName }}
type {{ .StructName }}Decoder struct {
    buf pkg.BitsReader
    column *pkg.ReadableColumn
    lastValPtr *{{.StructName}}
    lastVal {{.StructName}}
    fieldCount uint

    prevType {{.StructName}}Type

    // Field decoders.
    {{range .Fields}}
    {{.name}}Decoder {{if not .IsPrimitive}}*{{end}}{{ .Type.EncoderType }}Decoder
    {{if not .IsPrimitive}}is{{.Name}}Recursive bool
    {{end}}
    {{- end }}
    {{if .DictName}}
    dict *{{ .StructName }}DecoderDict
    {{end}}
}

// Init is called once in the lifetime of the stream.
func (d *{{ .StructName }}Decoder) Init(state* ReaderState, columns *pkg.ReadColumnSet) error {
    // Remember this decoder in the state so that we can detect recursion.
    if state.{{.StructName}}Decoder != nil {
        panic("cannot initialize {{ .StructName }}Decoder: already initialized")
    }
    state.{{.StructName}}Decoder = d
    defer func() { state.{{.StructName}}Decoder = nil }()

    var err error
    d.fieldCount, err = state.StructFieldCounts.{{.StructName}}FieldCount()
    if err != nil {
        return fmt.Errorf("cannot find struct %s in override schema: %v", {{printf "%q" .StructName}}, err)
    }

    d.column = columns.Column()

    {{if .IsMainStruct}}
    d.lastVal.Init()
	{{else}}
    d.lastVal.init(nil,0)
    {{- end}}
    d.lastValPtr = &d.lastVal

    {{- range $i,$e := .Fields }}
    if d.fieldCount <= {{$i}} {
        return nil // {{.Name}} and subsequent fields are skipped.
    }
    {{- if .Type.IsPrimitive}}
        {{- if .Type.DictName}}
        err = d.{{.name}}Decoder.Init(&state.{{.Type.DictName}}, columns.AddSubColumn())
        {{- else if .Type.IsDictPossible}}
        err = d.{{.name}}Decoder.Init(nil, columns.AddSubColumn())
        {{- else}}
        err = d.{{.name}}Decoder.Init(columns.AddSubColumn())
        {{- end}}
    {{- else}}
    if state.{{.Type.EncoderType}}Decoder != nil {
        // Recursion detected, use the existing decoder.
        d.{{.name}}Decoder = state.{{.Type.EncoderType}}Decoder
        d.is{{.Name}}Recursive = true // Mark that we are using a recursive decoder.
    } else {
        d.{{.name}}Decoder = new({{.Type.EncoderType}}Decoder)
        err = d.{{.name}}Decoder.Init(state, columns.AddSubColumn())
    }
    {{- end}}
    if err != nil {
        return err
    }
    {{- end }}

    {{- if .DictName}}
    d.dict = &state.{{.DictName}}
    {{- end}}

    return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *{{ .StructName }}Decoder) Continue() {
    d.buf.Reset(d.column.Data())

    {{ range $i,$e := .Fields }}
    if d.fieldCount <= {{$i}} {
        return // {{.Name}} and subsequent fields are skipped.
    }
    {{if not .IsPrimitive}}
    if !d.is{{.Name}}Recursive {
        d.{{.name}}Decoder.Continue()
    }
    {{else}}d.{{.name}}Decoder.Continue(){{end}}
    {{end }}
}

func (d *{{ .StructName }}Decoder) Reset() {
    d.prevType = 0
    {{ range $i, $e := .Fields }}
    if d.fieldCount <= {{$i}} {
        return // {{.Name}} and all subsequent fields are skipped.
    }
    {{if not .IsPrimitive}}
    if !d.is{{.Name}}Recursive {
        d.{{.name}}Decoder.Reset()
    }
    {{else}}d.{{.name}}Decoder.Reset(){{end}}
    {{- end}}
}

func (d *{{ .StructName }}Decoder) Decode(dstPtr {{if.DictName}}*{{end}}*{{.StructName}}) error {
	// Read Type delta
    typeDelta := d.buf.ReadVarintCompact()

	// Calculate and validate the new Type
	typ := int(d.prevType) + int(typeDelta)
	if typ < 0 || typ >= int({{.StructName}}TypeCount) {
		return pkg.ErrInvalidOneOfType
    }

	dst := dstPtr
	dst.typ = {{.StructName}}Type(typ)
    d.prevType = {{.StructName}}Type(dst.typ)

	// Decode selected field
	switch dst.typ {
    {{- range .Fields }}
    case {{ $.StructName }}Type{{.Name}}:
        // Decode {{.Name}}
        {{- if .Type.Flags.StoreByPtr}}
        if dst.{{.name}} == nil {
            dst.{{.name}} = &{{ .Type.Storage }}{}
            dst.{{.name}}.init(dst.parentModifiedFields, dst.parentModifiedBit)
        }
        {{end}}
        err := d.{{.name}}Decoder.Decode({{if .Type.Flags.DecodeByPtr}}&{{end}}dst.{{.name}})
        if err != nil {
            return err
        }
    {{- end }}
    }
	return nil
}

{{if .DictName}}
// {{ .StructName }}DecoderDict is the dictionary used by {{ .StructName }}Decoder
type {{ .StructName }}DecoderDict struct {
    dict []*{{.StructName}}
}

func (d* {{ .StructName }}DecoderDict) Init() {
    d.dict = d.dict[:0]
    d.dict = append(d.dict, nil) // nil {{.StructName}} is RefNum 0
}
{{end}}
