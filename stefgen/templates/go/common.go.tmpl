package {{ .PackageName }}

import (
    "fmt"
    "math"

    "github.com/splunk/stef/go/pkg/schema"
)

// The STEF IDL string. Used for testing.
const allSchemaContent = {{printf "%q" .Schema}}

// StructFieldCounts is used to keep track of the number of fields in each struct
// of an associated schema and to iterate over the fields.
// Field counts will be fetched from the iterator if the struct is encountered
// for the first time and then remembered for subsequent calls (for the case when
// the same struct is used multiple times in the schema).
type StructFieldCounts struct {
    {{range $name, $val := .Structs -}}
    count{{$name}} uint // Number of fields in {{$name}} struct.
    {{end}}

    // OverrideSchema is set if codec should perform a translation from specified schema.
    overrideSchema bool
    overrideSchemaIter schema.WireSchemaIter
}

func (s* StructFieldCounts) Init(overrideSchema *schema.WireSchema) {
    if overrideSchema != nil {
        s.overrideSchema = true
        s.overrideSchemaIter = schema.NewWireSchemaIter(overrideSchema)
    }

    // Initialize all struct field counts to math.MaxUint, indicating that the field count
    // is not known.
    {{range $name, $val := .Structs -}}
    s.count{{$name}} = math.MaxUint
    {{end}}
}

// Get the field count for a specific struct/oneof.
// It is expected that the order in which this function is called matches
// the order in which the WireSchemaIter iterates over the structs (see WireSchema).
func getFieldCount(fieldCount *uint, fieldName string, overrideSchema bool, overrideSchemaIter *schema.WireSchemaIter, defaultCount uint) (uint, error) {
    if *fieldCount == math.MaxUint {
        // Field count is not known, we need to determine it.
        if overrideSchema {
            // Get the field count from the override schema.
            var err error
            *fieldCount, err = overrideSchemaIter.NextFieldCount()
            if err != nil {
                return 0, fmt.Errorf("cannot find struct %s in override schema: %v", fieldName, err)
            }
        } else {
            // Schema is not overridden. Use the compile-time struct field count.
            *fieldCount = defaultCount
        }
    } else {
        // Field count is already known, return it.
    }
    return *fieldCount, nil
}

{{range $name, $val := .Structs -}}
func (s* StructFieldCounts) {{$name}}FieldCount() (uint, error) {
    return getFieldCount(&s.count{{$name}}, "{{$name}}", s.overrideSchema, &s.overrideSchemaIter, {{len $val.Fields}})
}

{{end}}

func (s *StructFieldCounts) AllFetched() bool {
    return s.overrideSchema == false || s.overrideSchemaIter.Done()
}
