package {{ .PackageName }}

import (
	"math/rand/v2"
	{{if not .ElemType.MustClone}}
	"slices"
	{{end}}
	"unsafe"
	"strings"

	"github.com/splunk/stef/go/pkg"
	"github.com/splunk/stef/go/pkg/encoders"
	"github.com/splunk/stef/go/pkg/schema"
)

var _ = (*encoders.StringEncoder)(nil)
var _ = (*strings.Builder)(nil)

// {{ .ArrayName }} is a variable size array.
type {{ .ArrayName }} struct {
	elems []{{if .IsStructType}}*{{end}}{{.ElemType.Storage}}

	parentModifiedFields *modifiedFields
	parentModifiedBit uint64
}

func (e *{{.ArrayName}}) init(parentModifiedFields *modifiedFields, parentModifiedBit uint64) {
	e.parentModifiedFields = parentModifiedFields
	e.parentModifiedBit = parentModifiedBit
}

func (e *{{.ArrayName}}) initAlloc(parentModifiedFields *modifiedFields, parentModifiedBit uint64, allocators *Allocators) {
	e.init(parentModifiedFields, parentModifiedBit)
}

// reset the array to its initial state, as if init() was just called.
// Will not reset internal fields such as parentModifiedFields.
func (e *{{.ArrayName}}) reset() {
    e.elems = e.elems[:0]
}

// fixParent sets the parentModifiedFields pointer to the supplied value.
// This is used when the parent is moved in memory for example because the parent
// an array element and the array was expanded.
func (e *{{.ArrayName}}) fixParent(parentModifiedFields *modifiedFields) {
    e.parentModifiedFields = parentModifiedFields
}

func (e *{{.ArrayName}}) canBeShared() bool {
    // An array can never be shared.
    return false
}

// Clone() creates a deep copy of {{ .ArrayName }}
func (e *{{.ArrayName}}) Clone(allocators *Allocators) {{ .ArrayName }} {
    var clone {{ .ArrayName }}
    copyToNew{{.ArrayName}}(&clone, e, allocators)
    return clone
}

func (e *{{.ArrayName}}) CloneShared(allocators *Allocators) {{ .ArrayName }} {
    // Clone and CloneShared are the same.
    return e.Clone(allocators)
}

// ByteSize returns approximate memory usage in bytes. Used to calculate
// memory used by dictionaries.
func (e *{{.ArrayName}}) byteSize() uint {
    if len(e.elems)==0 {
        return 0
    }
    // TODO: add size of elements if they are clonable.
    size := uint(unsafe.Sizeof(e.elems[0]))*uint(len(e.elems))+uint(unsafe.Sizeof(e))
    {{if .ElemType.MustClone}}
    for i := range e.elems {
        size += e.elems[i].byteSize()
    }{{end}}
    return size
}

{{if not .ElemType.MustClone}}
// CopyFromSlice copies from a slice into this array. The length
// of the array will be equal to the length of slice and elements of
// the array will be assigned from elements of the slice.
func (e* {{.ArrayName}}) CopyFromSlice(src []{{.ElemType.Exported}}) {
	if !slices.Equal(e.elems, src) {
		e.elems = pkg.EnsureLen(e.elems, len(src))
		copy(e.elems, src)
		e.markModified()
	}
}

{{end}}

// Append a new element at the end of the array.
func (e* {{.ArrayName}}) Append(val {{if .IsStructType}}*{{end}}{{.ElemType.Exported}}) {
	e.elems = append(e.elems, {{.ElemType.ToStorage "val"}})
	e.markModified()
}

func (e* {{.ArrayName}}) markModified() {
	e.parentModifiedFields.markModified(e.parentModifiedBit)
}

func (e* {{.ArrayName}}) markModifiedRecursively() {
{{if not .ElemType.IsPrimitive -}}
	for i:=0; i < len(e.elems); i++ {
		e.elems[i].markModifiedRecursively()
	}
{{end}}
}

func (e* {{.ArrayName}}) markUnmodifiedRecursively() {
{{if not .ElemType.IsPrimitive -}}
	for i:=0; i < len(e.elems); i++ {
		e.elems[i].markUnmodifiedRecursively()
	}
{{end}}
}

// Update from src to dst, overwriting existing data in dst.
func copy{{.ArrayName}}(dst* {{.ArrayName}}, src *{{.ArrayName}}) {
	isModified := false

	minLen := min(len(dst.elems), len(src.elems))
	if len(dst.elems) != len(src.elems) {
		dst.elems = pkg.EnsureLen(dst.elems, len(src.elems))
		isModified = true
	}

	i := 0

	// Copy elements in the part of the array that already had the necessary room.
	for ; i < minLen; i++ {
		{{- if .ElemType.MustClone}}
		if src.elems[i].canBeShared() {
		    dst.elems[i] = src.elems[i]
		} else {
		    copy{{.ElemType.TypeName}}(dst.elems[i], src.elems[i])
		}
		isModified = true
		{{- else}}
		if dst.elems[i] != src.elems[i] {
			dst.elems[i] = src.elems[i]
			isModified = true
		}
		{{- end}}
	}

	{{- if .ElemType.MustClone}}
	if minLen < len(dst.elems) {
		isModified = true
		{{if .DictName}}
		allocCount := 0
		for j := minLen; j < len(dst.elems); j++ {
		    if src.elems[j].canBeShared() {
                dst.elems[j] = src.elems[j]
            } else {
                allocCount++
            }
        }
        elems := make([]{{.ElemType.Storage}}, allocCount)
		for j := 0, i:=minLen; j< len(elems); j++,i++ {
			// Copy the element.
			if !src.elems[i].canBeShared() {
    			dst.elems[i] = &elems[j]
	    		dst.elems[i].init(dst.parentModifiedFields, dst.parentModifiedBit)
		    	copyToNew{{.ElemType.TypeName}}(dst.elems[i], src.elems[i])
		    }
		}
		{{else}}
		// Need to allocate new elements for the part of the array that has grown.
        // Allocate all new elements at once.
        elems := make([]{{.ElemType.Storage}}, len(dst.elems) - minLen)
        for j := range elems {
            {{if not .ElemType.IsPrimitive -}}
            // Init the element.
            elems[j].init(dst.parentModifiedFields, dst.parentModifiedBit, dst.allocators)
            {{- end}}
            // Point to the allocated element.
            dst.elems[i+j] = &elems[j]
            // Copy the element.
            copy{{.ElemType.TypeName}}(dst.elems[i+j], src.elems[i+j])
        }
		{{end}}
	}
	{{- else}}
	for ; i < len(dst.elems); i++ {
		if dst.elems[i] != src.elems[i] {
			dst.elems[i] = src.elems[i]
			isModified = true
		}
	}
	{{- end}}
	if isModified {
		dst.markModified()
	}
	return dst
}

// Copy from src to dst. dst is assumed to be just inited.
func copyToNew{{.ArrayName}}(dst* {{.ArrayName}}, src *{{.ArrayName}}, allocators *Allocators) {
    if len(src.elems)==0 {
        return
    }

	dst.elems = pkg.EnsureLen(dst.elems, len(src.elems))

	{{- if .ElemType.MustClone}}
    // Need to allocate new elements for the part of the array that has grown.
    for j := 0; j<len(dst.elems); j++ {
        if src.elems[j].canBeShared() {
            dst.elems[j] = src.elems[j]
        } else {
            // Alloc and init the element.
            dst.elems[j] = allocators.{{.ElemType.Storage}}.Alloc()
            dst.elems[j].initAlloc(dst.parentModifiedFields, dst.parentModifiedBit, allocators)
            // Copy the element.
            copyToNew{{.ElemType.TypeName}}(dst.elems[j], src.elems[j], allocators)
        }
    }
	{{- else}}
	for i:=0; i < len(dst.elems); i++ {
		dst.elems[i] = src.elems[i]
	}
	{{- end}}
}

// Len returns the number of elements in the array.
func (e *{{.ArrayName}}) Len() int {
	return len(e.elems)
}

// At returns element at index i.
func (m *{{.ArrayName}}) At(i int) {{if .IsStructType}}*{{end}}{{.ElemType.Exported}} {
	return {{.ElemType.ToExported "m.elems[i]"}}
}

// EnsureLen ensures the length of the array is equal to newLen.
// It will grow or shrink the array if needed.
func (e *{{.ArrayName}}) EnsureLen(newLen int) {
	oldLen := len(e.elems)
	if newLen > oldLen {
		// Grow the array
		e.elems = append(e.elems, make([]{{if .IsStructType}}*{{end}}{{.ElemType.Storage}}, newLen-oldLen)...)
		e.markModified()
		{{- if .IsStructType}}
		// Initialize newlly added elements.
		for ; oldLen<newLen; oldLen++ {
			e.elems[oldLen] = new({{.ElemType.Storage}})
			e.elems[oldLen].init(e.parentModifiedFields, e.parentModifiedBit)
		}
		{{- end}}
	} else if oldLen > newLen {
		// Shrink it
		e.elems = e.elems[:newLen]
		e.markModified()
	}
}

// EnsureLen ensures the length of the array is equal to newLen.
// It will grow or shrink the array if needed.
func (e *{{.ArrayName}}) ensureLen(newLen int, allocators *Allocators) {
	oldLen := len(e.elems)
	if newLen > oldLen {
		// Grow the array
		e.elems = append(e.elems, make([]{{if .IsStructType}}*{{end}}{{.ElemType.Storage}}, newLen-oldLen)...)
		e.markModified()
		{{- if .IsStructType}}
		// Initialize newly added elements.
		for ; oldLen<newLen; oldLen++ {
			e.elems[oldLen] = allocators.{{.ElemType.Storage}}.Alloc()
			e.elems[oldLen].initAlloc(e.parentModifiedFields, e.parentModifiedBit, allocators)
		}
		{{- end}}
	} else if oldLen > newLen {
		// Shrink it
		e.elems = e.elems[:newLen]
		e.markModified()
	}
}

// IsEqual performs deep comparison and returns true if array is equal to val.
func (e *{{ .ArrayName }}) IsEqual(val *{{ .ArrayName }}) bool {
	if len(e.elems) != len(val.elems) {
		return false
	}
	for i := range e.elems {
		{{- if .ElemType.IsPrimitive }}
		if !{{ .ElemType.EqualFunc }}(e.elems[i],val.elems[i]) {
			return false
		}
		{{- else }}
		if !e.elems[i].IsEqual(val.elems[i]) {
			return false
		}
		{{- end}}
	}
	return true
}

// Cmp{{.ArrayName}} performs deep comparison and returns an integer that
// will be 0 if left == right, negative if left < right, positive if left > right.
func Cmp{{.ArrayName}}(left, right *{{ .ArrayName }}) int {
	c := len(left.elems) - len(right.elems)
	if c != 0 {
		return c
	}
	for i := range left.elems {
		fc := {{.ElemType.CompareFunc}}(left.elems[i], right.elems[i])
		if fc < 0 {
			return -1
		}
		if fc > 0 {
			return 1
		}
	}
	return 0
}

// mutateRandom mutates fields in a random, deterministic manner using
// random parameter as a deterministic generator. If array elements contain structs/oneofs
// only fields that exist in the schema are mutated, allowing to generate data for
// specified schema.
func (a *{{ .ArrayName }}) mutateRandom(random *rand.Rand, schem *schema.Schema) {
	if random.IntN(20)==0 {
		a.EnsureLen(a.Len()+1)
	}
	if random.IntN(20)==0 && a.Len()>0 {
		a.EnsureLen(a.Len()-1)
	}

	for i := range a.elems {
		_ = i
		if random.IntN(2*len(a.elems))==0 {
		{{- if not .ElemType.IsPrimitive }}
			a.elems[i].mutateRandom(random, schem)
		{{- else}}
			v := {{ .ElemType.RandomFunc }}
			if a.elems[i] != v {
				a.elems[i] = v
				a.markModified()
			}
		{{- end}}
		}
	}
}

type {{ .ArrayName }}Encoder struct {
    buf pkg.BitsWriter
	limiter *pkg.SizeLimiter
	elemEncoder *{{.ElemType.EncoderType}}Encoder
    isRecursive bool
	state* WriterState
}

func (e *{{ .ArrayName }}Encoder) Init(state* WriterState, columns *pkg.WriteColumnSet) error {
	e.state = state
	e.limiter = &state.limiter

	{{ if .ElemType.IsPrimitive -}}
	e.elemEncoder = new({{.ElemType.EncoderType}}Encoder)
	if err := e.elemEncoder.Init({{- if .ElemType.DictName}}&e.state.{{.ElemType.DictName}}, {{end -}}e.limiter, columns.AddSubColumn()); err != nil {
		return err
	}
	{{- else -}}
	// Remember this encoder in the state so that we can detect recursion.
	if state.{{ .ArrayName }}Encoder != nil {
		panic("cannot initialize {{ .ArrayName }}Encoder: already initialized")
	}
	state.{{ .ArrayName }}Encoder = e
	defer func() { state.{{ .ArrayName }}Encoder = nil }()

	if state.{{.ElemType.EncoderType}}Encoder != nil {
		// Recursion detected, use the existing encoder.
		e.elemEncoder = state.{{.ElemType.EncoderType}}Encoder
		e.isRecursive = true
	} else {
		e.elemEncoder = new({{.ElemType.EncoderType}}Encoder)
		if err := e.elemEncoder.Init(state, columns.AddSubColumn()); err != nil {
			return err
		}
	}
	{{- end}}

	return nil
}

func (e *{{ .ArrayName }}Encoder) Reset() {
	if !e.isRecursive {
		e.elemEncoder.Reset()
	}
}

func (e *{{ .ArrayName }}Encoder) Encode(arr *{{ .ArrayName }}) {
	oldBitLen := e.buf.BitCount()

    // Write the length of the array.
	newLen := len(arr.elems)
    e.buf.WriteUvarintCompact(uint64(newLen))

    // Encode the elements of the array.
    for i := 0; i < newLen; i++ {
        e.elemEncoder.Encode(arr.elems[i])
    }

	// Account written bits in the limiter.
	newBitLen := e.buf.BitCount()
	e.limiter.AddFrameBits(newBitLen-oldBitLen)
}

func (e *{{ .ArrayName }}Encoder) CollectColumns(columnSet *pkg.WriteColumnSet) {
	columnSet.SetBits(&e.buf)
	if !e.isRecursive {
		e.elemEncoder.CollectColumns(columnSet.At(0))
	}
}

type {{ .ArrayName }}Decoder struct {
    buf pkg.BitsReader
	column *pkg.ReadableColumn
	elemDecoder *{{.ElemType.EncoderType}}Decoder
	isRecursive bool
	allocators *Allocators
}

// Init is called once in the lifetime of the stream.
func (d *{{ .ArrayName }}Decoder) Init(state* ReaderState, columns *pkg.ReadColumnSet) error {
	d.column = columns.Column()

{{- if .ElemType.IsPrimitive}}
	d.elemDecoder = new({{.ElemType.EncoderType}}Decoder)
{{- if .ElemType.DictName}}
	err := d.elemDecoder.Init(&state.{{.ElemType.DictName}}, columns.AddSubColumn())
{{- else}}
	err := d.elemDecoder.Init(columns.AddSubColumn())
{{- end}}
	if err != nil {
		return err
	}
{{- else}}
	// Remember this encoder in the state so that we can detect recursion.
	if state.{{ .ArrayName }}Decoder != nil {
		panic("cannot initialize {{ .ArrayName }}Decoder: already initialized")
	}
	state.{{ .ArrayName }}Decoder = d
	defer func() { state.{{ .ArrayName }}Decoder = nil }()

	if state.{{.ElemType.EncoderType}}Decoder != nil {
		d.elemDecoder = state.{{.ElemType.EncoderType}}Decoder
		d.isRecursive = true
	} else {
		d.elemDecoder = new({{.ElemType.EncoderType}}Decoder)
		if err := d.elemDecoder.Init(state, columns.AddSubColumn()); err != nil {
			return err
		}
	}
{{- end}}

    d.allocators = &state.Allocators

	return nil
}

// Continue is called at the start of the frame to continue decoding column data.
// This should set the decoder's source buffer, so the new decoding continues from
// the supplied column data. This should NOT reset the internal state of the decoder,
// since columns can cross frame boundaries and the new column data is considered
// continuation of that same column in the previous frame.
func (d *{{ .ArrayName }}Decoder) Continue() {
	d.buf.Reset(d.column.Data())
	if !d.isRecursive {
		d.elemDecoder.Continue()
	}
}

func (d *{{ .ArrayName }}Decoder) Reset() {
	if !d.isRecursive {
		d.elemDecoder.Reset()
	}
}

func (d *{{ .ArrayName }}Decoder) Decode(dst *{{.ArrayName}}) error {
	newLen := int(d.buf.ReadUvarintCompact())

	dst.ensureLen(newLen, d.allocators)

	for i := 0; i < newLen; i++ {
		{{- if .ElemType.IsPrimitive}}
		err := d.elemDecoder.Decode({{if .ElemType.Flags.DecodeByPtr}}&{{end}}dst.elems[i])
		if err != nil {
			return err
		}
		{{- else}}
		err := d.elemDecoder.Decode({{if .ElemType.DictName}}&{{end}}dst.elems[i])
		if err != nil {
			return err
		}
		{{- end}}
	}

	return nil
}