package {{ .PackageName }}

import (
	"bufio"
	"fmt"
	"io"

	"github.com/splunk/stef/go/pkg"
)

type {{.StructName}}Reader struct {
	// Record contains the record that was just read by the last Read() operation.
	// Do not modify this field externally. The next Read() will overwrite the Record.
	Record {{.StructName}}

	base pkg.BaseReader
	decoder {{.StructName}}Decoder
	state ReaderState
	recordPtr *{{.StructName}}
}

func New{{.StructName}}Reader(source io.Reader) (*{{.StructName}}Reader, error) {
	bufferedSource := bufio.NewReaderSize(source, 64 * 1024)
	reader := &{{.StructName}}Reader{}

	reader.Record.Init()
	reader.recordPtr = &reader.Record

	if err := reader.base.Init(bufferedSource); err != nil {
		return nil, err
	}

	if err:=reader.initSchema(); err != nil {
		return nil, err
	}

	return reader, nil
}

func (r *{{.StructName}}Reader) initSchema() error {
	ownSchema, err := {{.StructName}}WireSchema()
	if err != nil {
		return err
	}
	if err := r.base.ReadVarHeader(ownSchema); err != nil {
		return err
	}

	r.state.Init(r.base.Schema)
	err = r.decoder.Init(&r.state, &r.base.ReadBufs.Columns)
	if err != nil {
		return fmt.Errorf("schema is not compatible with Reader: %w", err)
	}

	return nil
}

func (f *{{.StructName}}Reader) Header() *pkg.FixedHeader {
	return &f.base.FixedHeader
}

func (f *{{.StructName}}Reader) UserData() map[string]string {
	return f.base.VarHeader.UserData
}

// Read the next record. After Read() returns successfully the record
// will be accessible in {{.StructName}}Reader.Record field.
//
// If Read() encounters a decoding error one of the pkg.Err values will
// be returned.
// If underlying source io.Reader returns any error then Read() will
// either return that error or a decoding error if source io.Reader
// returned an error prematurely while more data was expected in STEF stream.
//
// For well-formed streams that don't encounter decoding errors Read() will
// return io.EOF once end of the underlying source io.Reader is reached
// (assuming io.Reader returns io.EOF itself).
func (r *{{.StructName}}Reader) Read(opts pkg.ReadOptions) error {
	for r.base.FrameRecordCount == 0 {
		if err := r.nextFrame(); err != nil {
			return err
		}
	}
	r.base.FrameRecordCount--
	r.base.RecordCount++
	return r.decoder.Decode(r.recordPtr)
}

func (r *{{.StructName}}Reader) RecordCount() uint64 {
	return r.base.RecordCount
}

func (r *{{.StructName}}Reader) nextFrame() error {
	frameFlags, err := r.base.NextFrame()
	if err != nil {
		return err
	}

	if frameFlags&pkg.RestartDictionaries != 0 {
		// The frame that has just started indicates that the dictionaries
		// must be restarted. Reset all dictionaries.
		r.state.ResetDicts()
	}

	if frameFlags&pkg.RestartCodecs != 0 {
		// The frame that has just started indicates that the decoders
		// must be restarted.
		r.decoder.Reset()
	}

	r.decoder.Continue()
	return nil
}
